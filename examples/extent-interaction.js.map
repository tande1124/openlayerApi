{"version":3,"sources":["webpack:///../src/ol/interaction/Extent.js","webpack:///./extent-interaction.js"],"names":["ExtentEventType","ExtentEvent","extent","super","this","Extent","opt_options","const","style","options","condition_","condition","extent_","pointerHandler_","pixelTolerance_","undefined","pixelTolerance","snappedToVertex_","extentFeature_","vertexFeature_","extentOverlay_","source","useSpatialIndex","wrapX","boxStyle","feature","resolution","POLYGON","updateWhileAnimating","updateWhileInteracting","vertexOverlay_","pointerStyle","getDefaultPointerStyleFunction","setExtent","snapToVertex_","pixel","map","pixelCoordinate","getCoordinateFromPixelInternal","getExtentInternal","segments","getSegments","sort","a","b","closestSegment","vertex","vertexPixel","getPixelFromCoordinateInternal","pixel1","pixel2","squaredDist1","squaredDist2","dist","Math","sqrt","min","handlePointerMove_","mapBrowserEvent","createOrUpdatePointerFeature_","createOrUpdateExtentFeature_","let","extentFeature","setGeometry","getSource","addFeature","vertexFeature","getGeometry","setCoordinates","handleEvent","originalEvent","type","POINTERMOVE","handlingDownUpSequence","handleDownEvent","getOpposingPoint","point","x_","y_","x","y","getPointHandler","getEdgeHandler","handleDragEvent","coordinate","handleUpEvent","setMap","getExtent","getMap","getView","getProjection","dispatchEvent","POINT","fixedPoint","fixedP1","fixedP2","vectorSource","url","format","layers","target","view","center","zoom","addInteraction"],"mappings":"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","file":"extent-interaction.js","sourcesContent":["/**\r\n * @module ol/interaction/Extent\r\n */\r\nimport Event from '../events/Event.js';\r\nimport Feature from '../Feature.js';\r\nimport GeometryType from '../geom/GeometryType.js';\r\nimport MapBrowserEventType from '../MapBrowserEventType.js';\r\nimport Point from '../geom/Point.js';\r\nimport PointerInteraction from './Pointer.js';\r\nimport VectorLayer from '../layer/Vector.js';\r\nimport VectorSource from '../source/Vector.js';\r\nimport {always} from '../events/condition.js';\r\nimport {boundingExtent, getArea} from '../extent.js';\r\nimport {\r\n  closestOnSegment,\r\n  distance as coordinateDistance,\r\n  squaredDistance as squaredCoordinateDistance,\r\n  squaredDistanceToSegment,\r\n} from '../coordinate.js';\r\nimport {createEditingStyle} from '../style/Style.js';\r\nimport {fromExtent as polygonFromExtent} from '../geom/Polygon.js';\r\nimport {toUserExtent} from '../proj.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\r\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\r\n * boolean to indicate whether that event should be handled.\r\n * Default is {@link module:ol/events/condition~always}.\r\n * @property {import(\"../extent.js\").Extent} [extent] Initial extent. Defaults to no\r\n * initial extent.\r\n * @property {import(\"../style/Style.js\").StyleLike} [boxStyle]\r\n * Style for the drawn extent box. Defaults to\r\n * {@link module:ol/style/Style~createEditing()['Polygon']}\r\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\r\n * pointer close enough to a segment or vertex for editing.\r\n * @property {import(\"../style/Style.js\").StyleLike} [pointerStyle]\r\n * Style for the cursor used to draw the extent. Defaults to\r\n * {@link module:ol/style/Style~createEditing()['Point']}\r\n * @property {boolean} [wrapX=false] Wrap the drawn extent across multiple maps\r\n * in the X direction? Only affects visuals, not functionality.\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nconst ExtentEventType = {\r\n  /**\r\n   * Triggered after the extent is changed\r\n   * @event ExtentEvent#extentchanged\r\n   * @api\r\n   */\r\n  EXTENTCHANGED: 'extentchanged',\r\n};\r\n\r\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/interaction/Extent~Extent} instances are\r\n * instances of this type.\r\n */\r\nexport class ExtentEvent extends Event {\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent the new extent\r\n   */\r\n  constructor(extent) {\r\n    super(ExtentEventType.EXTENTCHANGED);\r\n\r\n    /**\r\n     * The current extent.\r\n     * @type {import(\"../extent.js\").Extent}\r\n     * @api\r\n     */\r\n    this.extent = extent;\r\n  }\r\n}\r\n\r\n/**\r\n * @classdesc\r\n * Allows the user to draw a vector box by clicking and dragging on the map.\r\n * Once drawn, the vector box can be modified by dragging its vertices or edges.\r\n * This interaction is only supported for mouse devices.\r\n *\r\n * @fires ExtentEvent\r\n * @api\r\n */\r\nclass Extent extends PointerInteraction {\r\n  /**\r\n   * @param {Options=} opt_options Options.\r\n   */\r\n  constructor(opt_options) {\r\n    const options = opt_options || {};\r\n\r\n    super(/** @type {import(\"./Pointer.js\").Options} */ (options));\r\n\r\n    /**\r\n     * Condition\r\n     * @type {import(\"../events/condition.js\").Condition}\r\n     * @private\r\n     */\r\n    this.condition_ = options.condition ? options.condition : always;\r\n\r\n    /**\r\n     * Extent of the drawn box\r\n     * @type {import(\"../extent.js\").Extent}\r\n     * @private\r\n     */\r\n    this.extent_ = null;\r\n\r\n    /**\r\n     * Handler for pointer move events\r\n     * @type {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent|null}\r\n     * @private\r\n     */\r\n    this.pointerHandler_ = null;\r\n\r\n    /**\r\n     * Pixel threshold to snap to extent\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.pixelTolerance_ =\r\n      options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\r\n\r\n    /**\r\n     * Is the pointer snapped to an extent vertex\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.snappedToVertex_ = false;\r\n\r\n    /**\r\n     * Feature for displaying the visible extent\r\n     * @type {Feature}\r\n     * @private\r\n     */\r\n    this.extentFeature_ = null;\r\n\r\n    /**\r\n     * Feature for displaying the visible pointer\r\n     * @type {Feature<Point>}\r\n     * @private\r\n     */\r\n    this.vertexFeature_ = null;\r\n\r\n    if (!opt_options) {\r\n      opt_options = {};\r\n    }\r\n\r\n    /**\r\n     * Layer for the extentFeature\r\n     * @type {VectorLayer}\r\n     * @private\r\n     */\r\n    this.extentOverlay_ = new VectorLayer({\r\n      source: new VectorSource({\r\n        useSpatialIndex: false,\r\n        wrapX: !!opt_options.wrapX,\r\n      }),\r\n      style: opt_options.boxStyle\r\n        ? opt_options.boxStyle\r\n        : getDefaultExtentStyleFunction(),\r\n      updateWhileAnimating: true,\r\n      updateWhileInteracting: true,\r\n    });\r\n\r\n    /**\r\n     * Layer for the vertexFeature\r\n     * @type {VectorLayer}\r\n     * @private\r\n     */\r\n    this.vertexOverlay_ = new VectorLayer({\r\n      source: new VectorSource({\r\n        useSpatialIndex: false,\r\n        wrapX: !!opt_options.wrapX,\r\n      }),\r\n      style: opt_options.pointerStyle\r\n        ? opt_options.pointerStyle\r\n        : getDefaultPointerStyleFunction(),\r\n      updateWhileAnimating: true,\r\n      updateWhileInteracting: true,\r\n    });\r\n\r\n    if (opt_options.extent) {\r\n      this.setExtent(opt_options.extent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../pixel.js\").Pixel} pixel cursor location\r\n   * @param {import(\"../PluggableMap.js\").default} map map\r\n   * @returns {import(\"../coordinate.js\").Coordinate|null} snapped vertex on extent\r\n   * @private\r\n   */\r\n  snapToVertex_(pixel, map) {\r\n    const pixelCoordinate = map.getCoordinateFromPixelInternal(pixel);\r\n    const sortByDistance = function (a, b) {\r\n      return (\r\n        squaredDistanceToSegment(pixelCoordinate, a) -\r\n        squaredDistanceToSegment(pixelCoordinate, b)\r\n      );\r\n    };\r\n    const extent = this.getExtentInternal();\r\n    if (extent) {\r\n      //convert extents to line segments and find the segment closest to pixelCoordinate\r\n      const segments = getSegments(extent);\r\n      segments.sort(sortByDistance);\r\n      const closestSegment = segments[0];\r\n\r\n      let vertex = closestOnSegment(pixelCoordinate, closestSegment);\r\n      const vertexPixel = map.getPixelFromCoordinateInternal(vertex);\r\n\r\n      //if the distance is within tolerance, snap to the segment\r\n      if (coordinateDistance(pixel, vertexPixel) <= this.pixelTolerance_) {\r\n        //test if we should further snap to a vertex\r\n        const pixel1 = map.getPixelFromCoordinateInternal(closestSegment[0]);\r\n        const pixel2 = map.getPixelFromCoordinateInternal(closestSegment[1]);\r\n        const squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\r\n        const squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\r\n        const dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\r\n        this.snappedToVertex_ = dist <= this.pixelTolerance_;\r\n        if (this.snappedToVertex_) {\r\n          vertex =\r\n            squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\r\n        }\r\n        return vertex;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent pointer move event\r\n   * @private\r\n   */\r\n  handlePointerMove_(mapBrowserEvent) {\r\n    const pixel = mapBrowserEvent.pixel;\r\n    const map = mapBrowserEvent.map;\r\n\r\n    let vertex = this.snapToVertex_(pixel, map);\r\n    if (!vertex) {\r\n      vertex = map.getCoordinateFromPixelInternal(pixel);\r\n    }\r\n    this.createOrUpdatePointerFeature_(vertex);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent extent\r\n   * @returns {Feature} extent as featrue\r\n   * @private\r\n   */\r\n  createOrUpdateExtentFeature_(extent) {\r\n    let extentFeature = this.extentFeature_;\r\n\r\n    if (!extentFeature) {\r\n      if (!extent) {\r\n        extentFeature = new Feature({});\r\n      } else {\r\n        extentFeature = new Feature(polygonFromExtent(extent));\r\n      }\r\n      this.extentFeature_ = extentFeature;\r\n      this.extentOverlay_.getSource().addFeature(extentFeature);\r\n    } else {\r\n      if (!extent) {\r\n        extentFeature.setGeometry(undefined);\r\n      } else {\r\n        extentFeature.setGeometry(polygonFromExtent(extent));\r\n      }\r\n    }\r\n    return extentFeature;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../coordinate.js\").Coordinate} vertex location of feature\r\n   * @returns {Feature} vertex as feature\r\n   * @private\r\n   */\r\n  createOrUpdatePointerFeature_(vertex) {\r\n    let vertexFeature = this.vertexFeature_;\r\n    if (!vertexFeature) {\r\n      vertexFeature = new Feature(new Point(vertex));\r\n      this.vertexFeature_ = vertexFeature;\r\n      this.vertexOverlay_.getSource().addFeature(vertexFeature);\r\n    } else {\r\n      const geometry = vertexFeature.getGeometry();\r\n      geometry.setCoordinates(vertex);\r\n    }\r\n    return vertexFeature;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n   * @return {boolean} `false` to stop event propagation.\r\n   */\r\n  handleEvent(mapBrowserEvent) {\r\n    if (!mapBrowserEvent.originalEvent || !this.condition_(mapBrowserEvent)) {\r\n      return true;\r\n    }\r\n    //display pointer (if not dragging)\r\n    if (\r\n      mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE &&\r\n      !this.handlingDownUpSequence\r\n    ) {\r\n      this.handlePointerMove_(mapBrowserEvent);\r\n    }\r\n    //call pointer to determine up/down/drag\r\n    super.handleEvent(mapBrowserEvent);\r\n    //return false to stop propagation\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Handle pointer down events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   */\r\n  handleDownEvent(mapBrowserEvent) {\r\n    const pixel = mapBrowserEvent.pixel;\r\n    const map = mapBrowserEvent.map;\r\n\r\n    const extent = this.getExtentInternal();\r\n    let vertex = this.snapToVertex_(pixel, map);\r\n\r\n    //find the extent corner opposite the passed corner\r\n    const getOpposingPoint = function (point) {\r\n      let x_ = null;\r\n      let y_ = null;\r\n      if (point[0] == extent[0]) {\r\n        x_ = extent[2];\r\n      } else if (point[0] == extent[2]) {\r\n        x_ = extent[0];\r\n      }\r\n      if (point[1] == extent[1]) {\r\n        y_ = extent[3];\r\n      } else if (point[1] == extent[3]) {\r\n        y_ = extent[1];\r\n      }\r\n      if (x_ !== null && y_ !== null) {\r\n        return [x_, y_];\r\n      }\r\n      return null;\r\n    };\r\n    if (vertex && extent) {\r\n      const x =\r\n        vertex[0] == extent[0] || vertex[0] == extent[2] ? vertex[0] : null;\r\n      const y =\r\n        vertex[1] == extent[1] || vertex[1] == extent[3] ? vertex[1] : null;\r\n\r\n      //snap to point\r\n      if (x !== null && y !== null) {\r\n        this.pointerHandler_ = getPointHandler(getOpposingPoint(vertex));\r\n        //snap to edge\r\n      } else if (x !== null) {\r\n        this.pointerHandler_ = getEdgeHandler(\r\n          getOpposingPoint([x, extent[1]]),\r\n          getOpposingPoint([x, extent[3]])\r\n        );\r\n      } else if (y !== null) {\r\n        this.pointerHandler_ = getEdgeHandler(\r\n          getOpposingPoint([extent[0], y]),\r\n          getOpposingPoint([extent[2], y])\r\n        );\r\n      }\r\n      //no snap - new bbox\r\n    } else {\r\n      vertex = map.getCoordinateFromPixelInternal(pixel);\r\n      this.setExtent([vertex[0], vertex[1], vertex[0], vertex[1]]);\r\n      this.pointerHandler_ = getPointHandler(vertex);\r\n    }\r\n    return true; //event handled; start downup sequence\r\n  }\r\n\r\n  /**\r\n   * Handle pointer drag events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   */\r\n  handleDragEvent(mapBrowserEvent) {\r\n    if (this.pointerHandler_) {\r\n      const pixelCoordinate = mapBrowserEvent.coordinate;\r\n      this.setExtent(this.pointerHandler_(pixelCoordinate));\r\n      this.createOrUpdatePointerFeature_(pixelCoordinate);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle pointer up events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   */\r\n  handleUpEvent(mapBrowserEvent) {\r\n    this.pointerHandler_ = null;\r\n    //If bbox is zero area, set to null;\r\n    const extent = this.getExtentInternal();\r\n    if (!extent || getArea(extent) === 0) {\r\n      this.setExtent(null);\r\n    }\r\n    return false; //Stop handling downup sequence\r\n  }\r\n\r\n  /**\r\n   * Remove the interaction from its current map and attach it to the new map.\r\n   * Subclasses may set up event handlers to get notified about changes to\r\n   * the map here.\r\n   * @param {import(\"../PluggableMap.js\").default} map Map.\r\n   */\r\n  setMap(map) {\r\n    this.extentOverlay_.setMap(map);\r\n    this.vertexOverlay_.setMap(map);\r\n    super.setMap(map);\r\n  }\r\n\r\n  /**\r\n   * Returns the current drawn extent in the view projection (or user projection if set)\r\n   *\r\n   * @return {import(\"../extent.js\").Extent} Drawn extent in the view projection.\r\n   * @api\r\n   */\r\n  getExtent() {\r\n    return toUserExtent(\r\n      this.getExtentInternal(),\r\n      this.getMap().getView().getProjection()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the current drawn extent in the view projection\r\n   *\r\n   * @return {import(\"../extent.js\").Extent} Drawn extent in the view projection.\r\n   * @api\r\n   */\r\n  getExtentInternal() {\r\n    return this.extent_;\r\n  }\r\n\r\n  /**\r\n   * Manually sets the drawn extent, using the view projection.\r\n   *\r\n   * @param {import(\"../extent.js\").Extent} extent Extent\r\n   * @api\r\n   */\r\n  setExtent(extent) {\r\n    //Null extent means no bbox\r\n    this.extent_ = extent ? extent : null;\r\n    this.createOrUpdateExtentFeature_(extent);\r\n    this.dispatchEvent(new ExtentEvent(this.extent_));\r\n  }\r\n}\r\n\r\n/**\r\n * Returns the default style for the drawn bbox\r\n *\r\n * @return {import(\"../style/Style.js\").StyleFunction} Default Extent style\r\n */\r\nfunction getDefaultExtentStyleFunction() {\r\n  const style = createEditingStyle();\r\n  return function (feature, resolution) {\r\n    return style[GeometryType.POLYGON];\r\n  };\r\n}\r\n\r\n/**\r\n * Returns the default style for the pointer\r\n *\r\n * @return {import(\"../style/Style.js\").StyleFunction} Default pointer style\r\n */\r\nfunction getDefaultPointerStyleFunction() {\r\n  const style = createEditingStyle();\r\n  return function (feature, resolution) {\r\n    return style[GeometryType.POINT];\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../coordinate.js\").Coordinate} fixedPoint corner that will be unchanged in the new extent\r\n * @returns {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent} event handler\r\n */\r\nfunction getPointHandler(fixedPoint) {\r\n  return function (point) {\r\n    return boundingExtent([fixedPoint, point]);\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../coordinate.js\").Coordinate} fixedP1 first corner that will be unchanged in the new extent\r\n * @param {import(\"../coordinate.js\").Coordinate} fixedP2 second corner that will be unchanged in the new extent\r\n * @returns {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent|null} event handler\r\n */\r\nfunction getEdgeHandler(fixedP1, fixedP2) {\r\n  if (fixedP1[0] == fixedP2[0]) {\r\n    return function (point) {\r\n      return boundingExtent([fixedP1, [point[0], fixedP2[1]]]);\r\n    };\r\n  } else if (fixedP1[1] == fixedP2[1]) {\r\n    return function (point) {\r\n      return boundingExtent([fixedP1, [fixedP2[0], point[1]]]);\r\n    };\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../extent.js\").Extent} extent extent\r\n * @returns {Array<Array<import(\"../coordinate.js\").Coordinate>>} extent line segments\r\n */\r\nfunction getSegments(extent) {\r\n  return [\r\n    [\r\n      [extent[0], extent[1]],\r\n      [extent[0], extent[3]],\r\n    ],\r\n    [\r\n      [extent[0], extent[3]],\r\n      [extent[2], extent[3]],\r\n    ],\r\n    [\r\n      [extent[2], extent[3]],\r\n      [extent[2], extent[1]],\r\n    ],\r\n    [\r\n      [extent[2], extent[1]],\r\n      [extent[0], extent[1]],\r\n    ],\r\n  ];\r\n}\r\n\r\nexport default Extent;\r\n","import ExtentInteraction from '../src/ol/interaction/Extent.js';\r\nimport GeoJSON from '../src/ol/format/GeoJSON.js';\r\nimport Map from '../src/ol/Map.js';\r\nimport View from '../src/ol/View.js';\r\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\r\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\r\nimport {shiftKeyOnly} from '../src/ol/events/condition.js';\r\n\r\nconst vectorSource = new VectorSource({\r\n  url: 'data/geojson/countries.geojson',\r\n  format: new GeoJSON(),\r\n});\r\n\r\nconst map = new Map({\r\n  layers: [\r\n    new TileLayer({\r\n      source: new OSM(),\r\n    }),\r\n    new VectorLayer({\r\n      source: vectorSource,\r\n    }),\r\n  ],\r\n  target: 'map',\r\n  view: new View({\r\n    center: [0, 0],\r\n    zoom: 2,\r\n  }),\r\n});\r\n\r\nconst extent = new ExtentInteraction({condition: shiftKeyOnly});\r\nmap.addInteraction(extent);\r\n"],"sourceRoot":""}