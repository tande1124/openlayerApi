{"version":3,"sources":["webpack:///./draw-shapes.js"],"names":["draw","raster","source","wrapX","vector","map","layers","target","view","center","zoom","typeSelect","document","getElementById","addInteraction","let","geometryFunction","value","coordinates","geometry","length","const","last","dx","dy","radius","Math","sqrt","rotation","atan2","newCoordinates","i","angle","PI","fraction","offsetX","cos","offsetY","sin","push","slice","setCoordinates","type","onchange","removeInteraction","addEventListener","removeLastPoint"],"mappings":"2FAAA,WA+BIA,EA/BJ,4DAUMC,EAAS,IAAI,IAAU,CAC3BC,OAAQ,IAAI,MAGRA,EAAS,IAAI,IAAa,CAACC,OAAO,IAElCC,EAAS,IAAI,IAAY,CAC7BF,OAAQA,IAGJG,EAAM,IAAI,IAAI,CAClBC,OAAQ,CAACL,EAAQG,GACjBG,OAAQ,MACRC,KAAM,IAAI,IAAK,CACbC,OAAQ,EAAE,KAAU,MACpBC,KAAM,MAIJC,EAAaC,SAASC,eAAe,QAG3C,SAASC,IACPC,IAEMC,EAFFC,EAAQN,EAAWM,MACT,SAAVA,IAEY,WAAVA,GACFA,EAAQ,SACRD,EAAmB,YAAqB,IACrB,QAAVC,GACTA,EAAQ,SACRD,EAAmB,eACA,SAAVC,IACTA,EAAQ,SACRD,EAAmB,SAAUE,EAAaC,GACxC,GAAID,EAAYE,OAAQ,CAStB,IARAC,IAAMZ,EAASS,EAAY,GACrBI,EAAOJ,EAAYA,EAAYE,OAAS,GACxCG,EAAKd,EAAO,GAAKa,EAAK,GACtBE,EAAKf,EAAO,GAAKa,EAAK,GACtBG,EAASC,KAAKC,KAAKJ,EAAKA,EAAKC,EAAKA,GAClCI,EAAWF,KAAKG,MAAML,EAAID,GAC1BO,EAAiB,GAEdC,EAAI,EAAGA,EADE,KACeA,EAAG,CAClCV,IAAMW,EAAQJ,EAAgB,EAAJG,EAAQL,KAAKO,GAFvB,GAGVC,EAAWH,EAAI,GAAM,EAAI,EAAI,GAC7BI,EAAUV,EAASS,EAAWR,KAAKU,IAAIJ,GACvCK,EAAUZ,EAASS,EAAWR,KAAKY,IAAIN,GAC7CF,EAAeS,KAAK,CAAC9B,EAAO,GAAK0B,EAAS1B,EAAO,GAAK4B,IAQxD,OANAP,EAAeS,KAAKT,EAAe,GAAGU,SACjCrB,EAGHA,EAASsB,eAAe,CAACX,IAFzBX,EAAW,IAAI,IAAQ,CAACW,IAInBX,KAIbnB,EAAO,IAAI,IAAK,CACdE,OAAQA,EACRwC,KAAMzB,EACND,iBAAkBA,IAEpBX,EAAIS,eAAed,IAOvBW,EAAWgC,SAAW,WACpBtC,EAAIuC,kBAAkB5C,GACtBc,KAGFF,SAASC,eAAe,QAAQgC,iBAAiB,SAAS,WACxD7C,EAAK8C,qBAGPhC,M","file":"draw-shapes.js","sourcesContent":["import Draw, {\r\n  createBox,\r\n  createRegularPolygon,\r\n} from '../src/ol/interaction/Draw.js';\r\nimport Map from '../src/ol/Map.js';\r\nimport Polygon from '../src/ol/geom/Polygon.js';\r\nimport View from '../src/ol/View.js';\r\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\r\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\r\n\r\nconst raster = new TileLayer({\r\n  source: new OSM(),\r\n});\r\n\r\nconst source = new VectorSource({wrapX: false});\r\n\r\nconst vector = new VectorLayer({\r\n  source: source,\r\n});\r\n\r\nconst map = new Map({\r\n  layers: [raster, vector],\r\n  target: 'map',\r\n  view: new View({\r\n    center: [-11000000, 4600000],\r\n    zoom: 4,\r\n  }),\r\n});\r\n\r\nconst typeSelect = document.getElementById('type');\r\n\r\nlet draw; // global so we can remove it later\r\nfunction addInteraction() {\r\n  let value = typeSelect.value;\r\n  if (value !== 'None') {\r\n    let geometryFunction;\r\n    if (value === 'Square') {\r\n      value = 'Circle';\r\n      geometryFunction = createRegularPolygon(4);\r\n    } else if (value === 'Box') {\r\n      value = 'Circle';\r\n      geometryFunction = createBox();\r\n    } else if (value === 'Star') {\r\n      value = 'Circle';\r\n      geometryFunction = function (coordinates, geometry) {\r\n        if (coordinates.length) {\r\n          const center = coordinates[0];\r\n          const last = coordinates[coordinates.length - 1];\r\n          const dx = center[0] - last[0];\r\n          const dy = center[1] - last[1];\r\n          const radius = Math.sqrt(dx * dx + dy * dy);\r\n          const rotation = Math.atan2(dy, dx);\r\n          const newCoordinates = [];\r\n          const numPoints = 12;\r\n          for (let i = 0; i < numPoints; ++i) {\r\n            const angle = rotation + (i * 2 * Math.PI) / numPoints;\r\n            const fraction = i % 2 === 0 ? 1 : 0.5;\r\n            const offsetX = radius * fraction * Math.cos(angle);\r\n            const offsetY = radius * fraction * Math.sin(angle);\r\n            newCoordinates.push([center[0] + offsetX, center[1] + offsetY]);\r\n          }\r\n          newCoordinates.push(newCoordinates[0].slice());\r\n          if (!geometry) {\r\n            geometry = new Polygon([newCoordinates]);\r\n          } else {\r\n            geometry.setCoordinates([newCoordinates]);\r\n          }\r\n          return geometry;\r\n        }\r\n      };\r\n    }\r\n    draw = new Draw({\r\n      source: source,\r\n      type: value,\r\n      geometryFunction: geometryFunction,\r\n    });\r\n    map.addInteraction(draw);\r\n  }\r\n}\r\n\r\n/**\r\n * Handle change event.\r\n */\r\ntypeSelect.onchange = function () {\r\n  map.removeInteraction(draw);\r\n  addInteraction();\r\n};\r\n\r\ndocument.getElementById('undo').addEventListener('click', function () {\r\n  draw.removeLastPoint();\r\n});\r\n\r\naddInteraction();\r\n"],"sourceRoot":""}