{"version":3,"sources":["webpack:///../src/ol/source/CartoDB.js","webpack:///./cartodb.js"],"names":["options","super","attributions","cacheSize","crossOrigin","maxZoom","undefined","minZoom","projection","transition","wrapX","this","account_","account","mapId_","map","config_","config","templateCache_","initializeMap_","getConfig","updateConfig","setConfig","const","paramHash","JSON","stringify","applyTemplate_","let","mapUrl","client","XMLHttpRequest","addEventListener","handleInitResponse_","bind","handleInitError_","open","setRequestHeader","send","event","status","response","parse","responseText","err","setState","ERROR","READY","data","tilesUrl","cdn_url","https","layergroupid","setUrl","mapConfig","cartoDBSource","Map","layers","Tile","source","OSM","target","view","View","center","zoom","document","getElementById","n","value","sql"],"mappings":"mJAwMe,EA5JU,YAIvB,WAAYA,GACVC,OAAM,MACJC,aAAcF,EAAQE,aACtBC,UAAWH,EAAQG,UACnBC,YAAaJ,EAAQI,YACrBC,aAA6BC,IAApBN,EAAQK,QAAwBL,EAAQK,QAAU,GAC3DE,QAASP,EAAQO,QACjBC,WAAYR,EAAQQ,WACpBC,WAAYT,EAAQS,WACpBC,MAAOV,EAAQU,QAOjBC,KAAKC,SAAWZ,EAAQa,QAMxBF,KAAKG,OAASd,EAAQe,KAAO,GAM7BJ,KAAKK,QAAUhB,EAAQiB,QAAU,GAMjCN,KAAKO,eAAiB,GAEtBP,KAAKQ,iB,8FAQP,EAAF,UAAEC,UAAA,WACE,OAAOT,KAAKK,SASd,EAAF,UAAEK,aAAA,SAAaJ,GACX,YAAON,KAAKK,QAASC,GACrBN,KAAKQ,kBAUP,EAAF,UAAEG,UAAA,SAAUL,GACRN,KAAKK,QAAUC,GAAU,GACzBN,KAAKQ,kBAOP,EAAF,UAAEA,eAAA,WACEI,IAAMC,EAAYC,KAAKC,UAAUf,KAAKK,SACtC,GAAIL,KAAKO,eAAeM,GACtBb,KAAKgB,eAAehB,KAAKO,eAAeM,QAD1C,CAIAI,IAAIC,EAAS,WAAalB,KAAKC,SAAW,wBAEtCD,KAAKG,SACPe,GAAU,UAAYlB,KAAKG,QAG7BS,IAAMO,EAAS,IAAIC,eACnBD,EAAOE,iBACL,OACArB,KAAKsB,oBAAoBC,KAAKvB,KAAMa,IAEtCM,EAAOE,iBAAiB,QAASrB,KAAKwB,iBAAiBD,KAAKvB,OAC5DmB,EAAOM,KAAK,OAAQP,GACpBC,EAAOO,iBAAiB,eAAgB,oBACxCP,EAAOQ,KAAKb,KAAKC,UAAUf,KAAKK,YAUlC,EAAF,UAAEiB,oBAAA,SAAoBT,EAAWe,GAC7BhB,IAAMO,EAAwCS,EAAY,OAE1D,IAAKT,EAAOU,QAAWV,EAAOU,QAAU,KAAOV,EAAOU,OAAS,IAAM,CACnEZ,IAAIa,EACJ,IACEA,EAA4ChB,KAAKiB,MAC/CZ,EAAOa,cAET,MAAOC,GAEP,YADAjC,KAAKkC,SAAS,IAAYC,OAG5BnC,KAAKgB,eAAec,GACpB9B,KAAKO,eAAeM,GAAaiB,EACjC9B,KAAKkC,SAAS,IAAYE,YAE1BpC,KAAKkC,SAAS,IAAYC,QAQ9B,EAAF,UAAEX,iBAAA,SAAiBI,GACf5B,KAAKkC,SAAS,IAAYC,QAQ5B,EAAF,UAAEnB,eAAA,SAAeqB,GACbzB,IAAM0B,EACJ,WACAD,EAAKE,QAAQC,MACb,IACAxC,KAAKC,SACL,eACAoC,EAAKI,aACL,mBACFzC,KAAK0C,OAAOJ,I,EAxJS,CAAH,K,OCvChBK,EAAY,CAChB,OAAU,CACR,CACE,KAAQ,UACR,QAAW,CACT,iBAAoB,QACpB,SAAY,iCACZ,IAAO,wDAMTC,EAAgB,IAAI,EAAQ,CAChC1C,QAAS,gBACTI,OAAQqC,IAGE,IAAIE,EAAA,EAAI,CAClBC,OAAQ,CACN,IAAIC,EAAA,EAAU,CACZC,OAAQ,IAAIC,EAAA,IAEd,IAAIF,EAAA,EAAU,CACZC,OAAQJ,KAGZM,OAAQ,MACRC,KAAM,IAAIC,EAAA,EAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAUVC,SAASC,eAAe,gBAAgBnC,iBAAiB,UAAU,WANnE,IAAiBoC,IAOPzD,KAAK0D,MANbf,EAAUG,OAAO,GAAGzD,QAAQsE,IAC1B,mDAAqDF,EACvDb,EAAcjC,UAAUgC,Q","file":"cartodb.js","sourcesContent":["/**\r\n * @module ol/source/CartoDB\r\n */\r\n\r\nimport SourceState from './State.js';\r\nimport XYZ from './XYZ.js';\r\nimport {assign} from '../obj.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection.\r\n * @property {number} [maxZoom=18] Max zoom.\r\n * @property {number} [minZoom] Minimum zoom.\r\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\r\n * @property {Object} [config] If using anonymous maps, the CartoDB config to use. See\r\n * http://docs.cartodb.com/cartodb-platform/maps-api/anonymous-maps/\r\n * for more detail.\r\n * If using named maps, a key-value lookup with the template parameters.\r\n * See http://docs.cartodb.com/cartodb-platform/maps-api/named-maps/\r\n * for more detail.\r\n * @property {string} [map] If using named maps, this will be the name of the template to load.\r\n * See http://docs.cartodb.com/cartodb-platform/maps-api/named-maps/\r\n * for more detail.\r\n * @property {string} account If using named maps, this will be the name of the template to load.\r\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\r\n * To disable the opacity transition, pass `transition: 0`.\r\n */\r\n\r\n/**\r\n * @typedef {Object} CartoDBLayerInfo\r\n * @property {string} layergroupid The layer group ID\r\n * @property {{https: string}} cdn_url The CDN URL\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Layer source for the CartoDB Maps API.\r\n * @api\r\n */\r\nclass CartoDB extends XYZ {\r\n  /**\r\n   * @param {Options} options CartoDB options.\r\n   */\r\n  constructor(options) {\r\n    super({\r\n      attributions: options.attributions,\r\n      cacheSize: options.cacheSize,\r\n      crossOrigin: options.crossOrigin,\r\n      maxZoom: options.maxZoom !== undefined ? options.maxZoom : 18,\r\n      minZoom: options.minZoom,\r\n      projection: options.projection,\r\n      transition: options.transition,\r\n      wrapX: options.wrapX,\r\n    });\r\n\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.account_ = options.account;\r\n\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.mapId_ = options.map || '';\r\n\r\n    /**\r\n     * @type {!Object}\r\n     * @private\r\n     */\r\n    this.config_ = options.config || {};\r\n\r\n    /**\r\n     * @type {!Object<string, CartoDBLayerInfo>}\r\n     * @private\r\n     */\r\n    this.templateCache_ = {};\r\n\r\n    this.initializeMap_();\r\n  }\r\n\r\n  /**\r\n   * Returns the current config.\r\n   * @return {!Object} The current configuration.\r\n   * @api\r\n   */\r\n  getConfig() {\r\n    return this.config_;\r\n  }\r\n\r\n  /**\r\n   * Updates the carto db config.\r\n   * @param {Object} config a key-value lookup. Values will replace current values\r\n   *     in the config.\r\n   * @api\r\n   */\r\n  updateConfig(config) {\r\n    assign(this.config_, config);\r\n    this.initializeMap_();\r\n  }\r\n\r\n  /**\r\n   * Sets the CartoDB config\r\n   * @param {Object} config In the case of anonymous maps, a CartoDB configuration\r\n   *     object.\r\n   * If using named maps, a key-value lookup with the template parameters.\r\n   * @api\r\n   */\r\n  setConfig(config) {\r\n    this.config_ = config || {};\r\n    this.initializeMap_();\r\n  }\r\n\r\n  /**\r\n   * Issue a request to initialize the CartoDB map.\r\n   * @private\r\n   */\r\n  initializeMap_() {\r\n    const paramHash = JSON.stringify(this.config_);\r\n    if (this.templateCache_[paramHash]) {\r\n      this.applyTemplate_(this.templateCache_[paramHash]);\r\n      return;\r\n    }\r\n    let mapUrl = 'https://' + this.account_ + '.carto.com/api/v1/map';\r\n\r\n    if (this.mapId_) {\r\n      mapUrl += '/named/' + this.mapId_;\r\n    }\r\n\r\n    const client = new XMLHttpRequest();\r\n    client.addEventListener(\r\n      'load',\r\n      this.handleInitResponse_.bind(this, paramHash)\r\n    );\r\n    client.addEventListener('error', this.handleInitError_.bind(this));\r\n    client.open('POST', mapUrl);\r\n    client.setRequestHeader('Content-type', 'application/json');\r\n    client.send(JSON.stringify(this.config_));\r\n  }\r\n\r\n  /**\r\n   * Handle map initialization response.\r\n   * @param {string} paramHash a hash representing the parameter set that was used\r\n   *     for the request\r\n   * @param {Event} event Event.\r\n   * @private\r\n   */\r\n  handleInitResponse_(paramHash, event) {\r\n    const client = /** @type {XMLHttpRequest} */ (event.target);\r\n    // status will be 0 for file:// urls\r\n    if (!client.status || (client.status >= 200 && client.status < 300)) {\r\n      let response;\r\n      try {\r\n        response = /** @type {CartoDBLayerInfo} */ (JSON.parse(\r\n          client.responseText\r\n        ));\r\n      } catch (err) {\r\n        this.setState(SourceState.ERROR);\r\n        return;\r\n      }\r\n      this.applyTemplate_(response);\r\n      this.templateCache_[paramHash] = response;\r\n      this.setState(SourceState.READY);\r\n    } else {\r\n      this.setState(SourceState.ERROR);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Event} event Event.\r\n   */\r\n  handleInitError_(event) {\r\n    this.setState(SourceState.ERROR);\r\n  }\r\n\r\n  /**\r\n   * Apply the new tile urls returned by carto db\r\n   * @param {CartoDBLayerInfo} data Result of carto db call.\r\n   * @private\r\n   */\r\n  applyTemplate_(data) {\r\n    const tilesUrl =\r\n      'https://' +\r\n      data.cdn_url.https +\r\n      '/' +\r\n      this.account_ +\r\n      '/api/v1/map/' +\r\n      data.layergroupid +\r\n      '/{z}/{x}/{y}.png';\r\n    this.setUrl(tilesUrl);\r\n  }\r\n}\r\n\r\nexport default CartoDB;\r\n","import Map from '../src/ol/Map.js';\r\nimport TileLayer from '../src/ol/layer/Tile.js';\r\nimport View from '../src/ol/View.js';\r\nimport {CartoDB, OSM} from '../src/ol/source.js';\r\n\r\nconst mapConfig = {\r\n  'layers': [\r\n    {\r\n      'type': 'cartodb',\r\n      'options': {\r\n        'cartocss_version': '2.1.1',\r\n        'cartocss': '#layer { polygon-fill: #F00; }',\r\n        'sql': 'select * from european_countries_e where area > 0',\r\n      },\r\n    },\r\n  ],\r\n};\r\n\r\nconst cartoDBSource = new CartoDB({\r\n  account: 'documentation',\r\n  config: mapConfig,\r\n});\r\n\r\nconst map = new Map({\r\n  layers: [\r\n    new TileLayer({\r\n      source: new OSM(),\r\n    }),\r\n    new TileLayer({\r\n      source: cartoDBSource,\r\n    }),\r\n  ],\r\n  target: 'map',\r\n  view: new View({\r\n    center: [0, 0],\r\n    zoom: 2,\r\n  }),\r\n});\r\n\r\nfunction setArea(n) {\r\n  mapConfig.layers[0].options.sql =\r\n    'select * from european_countries_e where area > ' + n;\r\n  cartoDBSource.setConfig(mapConfig);\r\n}\r\n\r\ndocument.getElementById('country-area').addEventListener('change', function () {\r\n  setArea(this.value);\r\n});\r\n"],"sourceRoot":""}