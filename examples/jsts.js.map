{"version":3,"sources":["webpack:///./jsts.js"],"names":["source","fetch","then","response","json","const","features","readFeatures","featureProjection","parser","jsts","io","OL3Parser","inject","let","i","length","feature","buffered","read","getGeometry","buffer","setGeometry","write","addFeatures","vectorLayer","rasterLayer","layers","target","document","getElementById","view","center","zoom"],"mappings":"2FAAA,+HAiBMA,EAAS,IAAI,IACnBC,MAAM,oCACHC,MAAK,SAAUC,GACd,OAAOA,EAASC,UAEjBF,MAAK,SAAUE,GACdC,IACMC,GADS,IAAI,KACKC,aAAaH,EAAM,CACzCI,kBAAmB,cAGfC,EAAS,IAAIC,KAAKC,GAAGC,UAC3BH,EAAOI,OACL,IACA,IACA,IACA,IACA,IACA,IACA,KAGF,IAAKC,IAAIC,EAAI,EAAGA,EAAIT,EAASU,OAAQD,IAAK,CACxCV,IAAMY,EAAUX,EAASS,GAKnBG,EAHWT,EAAOU,KAAKF,EAAQG,eAGXC,OAAO,IAGjCJ,EAAQK,YAAYb,EAAOc,MAAML,IAGnClB,EAAOwB,YAAYlB,MAEvBD,IAAMoB,EAAc,IAAI,IAAY,CAClCzB,OAAQA,IAGJ0B,EAAc,IAAI,IAAU,CAChC1B,OAAQ,IAAI,MAGF,IAAI,IAAI,CAClB2B,OAAQ,CAACD,EAAaD,GACtBG,OAAQC,SAASC,eAAe,OAChCC,KAAM,IAAI,IAAK,CACbC,OAAQ,YAAW,CAAC,WAAY,YAChCC,KAAM,S","file":"jsts.js","sourcesContent":["import GeoJSON from '../src/ol/format/GeoJSON.js';\r\nimport LinearRing from '../src/ol/geom/LinearRing.js';\r\nimport Map from '../src/ol/Map.js';\r\nimport OSM from '../src/ol/source/OSM.js';\r\nimport VectorSource from '../src/ol/source/Vector.js';\r\nimport View from '../src/ol/View.js';\r\nimport {\r\n  LineString,\r\n  MultiLineString,\r\n  MultiPoint,\r\n  MultiPolygon,\r\n  Point,\r\n  Polygon,\r\n} from '../src/ol/geom.js';\r\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\r\nimport {fromLonLat} from '../src/ol/proj.js';\r\n\r\nconst source = new VectorSource();\r\nfetch('data/geojson/roads-seoul.geojson')\r\n  .then(function (response) {\r\n    return response.json();\r\n  })\r\n  .then(function (json) {\r\n    const format = new GeoJSON();\r\n    const features = format.readFeatures(json, {\r\n      featureProjection: 'EPSG:3857',\r\n    });\r\n\r\n    const parser = new jsts.io.OL3Parser();\r\n    parser.inject(\r\n      Point,\r\n      LineString,\r\n      LinearRing,\r\n      Polygon,\r\n      MultiPoint,\r\n      MultiLineString,\r\n      MultiPolygon\r\n    );\r\n\r\n    for (let i = 0; i < features.length; i++) {\r\n      const feature = features[i];\r\n      // convert the OpenLayers geometry to a JSTS geometry\r\n      const jstsGeom = parser.read(feature.getGeometry());\r\n\r\n      // create a buffer of 40 meters around each line\r\n      const buffered = jstsGeom.buffer(40);\r\n\r\n      // convert back from JSTS and replace the geometry on the feature\r\n      feature.setGeometry(parser.write(buffered));\r\n    }\r\n\r\n    source.addFeatures(features);\r\n  });\r\nconst vectorLayer = new VectorLayer({\r\n  source: source,\r\n});\r\n\r\nconst rasterLayer = new TileLayer({\r\n  source: new OSM(),\r\n});\r\n\r\nconst map = new Map({\r\n  layers: [rasterLayer, vectorLayer],\r\n  target: document.getElementById('map'),\r\n  view: new View({\r\n    center: fromLonLat([126.979293, 37.528787]),\r\n    zoom: 15,\r\n  }),\r\n});\r\n"],"sourceRoot":""}