{"version":3,"sources":["webpack:///../src/ol/layer/MapboxVector.js","webpack:///./mapbox-vector-layer.js"],"names":["mapboxBaseUrl","getMapboxPath","url","const","startsWith","indexOf","slice","length","error","super","EventType","ERROR","this","SourceType","MapboxVector","options","declutter","source","state","LOADING","format","MVT","className","opacity","visible","zIndex","minResolution","maxResolution","minZoom","maxZoom","renderOrder","renderBuffer","renderMode","map","updateWhileAnimating","updateWhileInteracting","preload","useInterimTilesOnError","sourceId","layers","accessToken","fetchStyle","styleUrl","token","mapboxPath","Error","style","normalizeStyleUrl","fetch","then","response","ok","json","onStyleLoad","catch","handleError","sourceIdOrLayersList","firstSource","lookup","i","layer","id","let","candidate","Object","keys","sources","sprite","normalizeSpriteUrl","glyphs","font","normalizeGlyphsUrl","styleSource","type","getSource","setUrl","setState","READY","dispatchEvent","VectorTile","Map","target","view","View","center","zoom"],"mappings":"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","file":"mapbox-vector-layer.js","sourcesContent":["/**\r\n * @module ol/layer/MapboxVector\r\n */\r\nimport BaseEvent from '../events/Event.js';\r\nimport EventType from '../events/EventType.js';\r\nimport MVT from '../format/MVT.js';\r\nimport SourceState from '../source/State.js';\r\nimport VectorTileLayer from '../layer/VectorTile.js';\r\nimport VectorTileSource from '../source/VectorTile.js';\r\nimport {applyStyle} from 'ol-mapbox-style';\r\n\r\nconst mapboxBaseUrl = 'https://api.mapbox.com';\r\n\r\n/**\r\n * Gets the path from a mapbox:// URL.\r\n * @param {string} url The Mapbox URL.\r\n * @return {string} The path.\r\n * @private\r\n */\r\nexport function getMapboxPath(url) {\r\n  const startsWith = 'mapbox://';\r\n  if (url.indexOf(startsWith) !== 0) {\r\n    return '';\r\n  }\r\n  return url.slice(startsWith.length);\r\n}\r\n\r\n/**\r\n * Turns mapbox:// sprite URLs into resolvable URLs.\r\n * @param {string} url The sprite URL.\r\n * @param {string} token The access token.\r\n * @return {string} A resolvable URL.\r\n * @private\r\n */\r\nexport function normalizeSpriteUrl(url, token) {\r\n  const mapboxPath = getMapboxPath(url);\r\n  if (!mapboxPath) {\r\n    return url;\r\n  }\r\n  const startsWith = 'sprites/';\r\n  if (mapboxPath.indexOf(startsWith) !== 0) {\r\n    throw new Error(`unexpected sprites url: ${url}`);\r\n  }\r\n  const sprite = mapboxPath.slice(startsWith.length);\r\n\r\n  return `${mapboxBaseUrl}/styles/v1/${sprite}/sprite?access_token=${token}`;\r\n}\r\n\r\n/**\r\n * Turns mapbox:// glyphs URLs into resolvable URLs.\r\n * @param {string} url The glyphs URL.\r\n * @param {string} token The access token.\r\n * @return {string} A resolvable URL.\r\n * @private\r\n */\r\nexport function normalizeGlyphsUrl(url, token) {\r\n  const mapboxPath = getMapboxPath(url);\r\n  if (!mapboxPath) {\r\n    return url;\r\n  }\r\n  const startsWith = 'fonts/';\r\n  if (mapboxPath.indexOf(startsWith) !== 0) {\r\n    throw new Error(`unexpected fonts url: ${url}`);\r\n  }\r\n  const font = mapboxPath.slice(startsWith.length);\r\n\r\n  return `${mapboxBaseUrl}/fonts/v1/${font}/0-255.pbf?access_token=${token}`;\r\n}\r\n\r\n/**\r\n * Turns mapbox:// style URLs into resolvable URLs.\r\n * @param {string} url The style URL.\r\n * @param {string} token The access token.\r\n * @return {string} A resolvable URL.\r\n * @private\r\n */\r\nexport function normalizeStyleUrl(url, token) {\r\n  const mapboxPath = getMapboxPath(url);\r\n  if (!mapboxPath) {\r\n    return url;\r\n  }\r\n  const startsWith = 'styles/';\r\n  if (mapboxPath.indexOf(startsWith) !== 0) {\r\n    throw new Error(`unexpected style url: ${url}`);\r\n  }\r\n  const style = mapboxPath.slice(startsWith.length);\r\n\r\n  return `${mapboxBaseUrl}/styles/v1/${style}?&access_token=${token}`;\r\n}\r\n\r\n/**\r\n * Turns mapbox:// source URLs into vector tile URL templates.\r\n * @param {string} url The source URL.\r\n * @param {string} token The access token.\r\n * @return {string} A vector tile template.\r\n * @private\r\n */\r\nexport function normalizeSourceUrl(url, token) {\r\n  const mapboxPath = getMapboxPath(url);\r\n  if (!mapboxPath) {\r\n    return url;\r\n  }\r\n  return `https://{a-d}.tiles.mapbox.com/v4/${mapboxPath}/{z}/{x}/{y}.vector.pbf?access_token=${token}`;\r\n}\r\n\r\n/**\r\n * @classdesc\r\n * Event emitted on configuration or loading error.\r\n */\r\nclass ErrorEvent extends BaseEvent {\r\n  /**\r\n   * @param {Error} error error object.\r\n   */\r\n  constructor(error) {\r\n    super(EventType.ERROR);\r\n\r\n    /**\r\n     * @type {Error}\r\n     */\r\n    this.error = error;\r\n  }\r\n}\r\n\r\n/**\r\n * @typedef {Object} StyleObject\r\n * @property {Object<string, SourceObject>} sources The style sources.\r\n * @property {string} sprite The sprite URL.\r\n * @property {string} glyphs The glyphs URL.\r\n * @property {Array<LayerObject>} layers The style layers.\r\n */\r\n\r\n/**\r\n * @typedef {Object} SourceObject\r\n * @property {string} url The source URL.\r\n * @property {SourceType} type The source type.\r\n */\r\n\r\n/**\r\n * The Mapbox source type.\r\n * @enum {string}\r\n */\r\nconst SourceType = {\r\n  VECTOR: 'vector',\r\n};\r\n\r\n/**\r\n * @typedef {Object} LayerObject\r\n * @property {string} id The layer id.\r\n * @property {string} source The source id.\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} styleUrl The URL of the Mapbox style object to use for this layer.  For a\r\n * style created with Mapbox Studio and hosted on Mapbox, this will look like\r\n * 'mapbox://styles/you/your-style'.\r\n * @property {string} accessToken The access token for your Mapbox style.\r\n * @property {string} [source] If your style uses more than one source, you need to use either the\r\n * `source` property or the `layers` property to limit rendering to a single vector source.  The\r\n * `source` property corresponds to the id of a vector source in your Mapbox style.\r\n * @property {Array<string>} [layers] Limit rendering to the list of included layers.  All layers\r\n * must share the same vector soource.  If your style uses more than one source, you need to use\r\n * either the `source` property or the `layers` property to limit rendering to a single vector\r\n * source.\r\n * @property {boolean} [declutter=true] Declutter images and text. Decluttering is applied to all\r\n * image and text styles of all Vector and VectorTile layers that have set this to `true`. The priority\r\n * is defined by the z-index of the layer, the `zIndex` of the style and the render order of features.\r\n * Higher z-index means higher priority. Within the same z-index, a feature rendered before another has\r\n * higher priority.\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {import(\"../render.js\").OrderFunction} [renderOrder] Render order. Function to be used when sorting\r\n * features before rendering. By default features are drawn in the order that they are created. Use\r\n * `null` to avoid the sort, but get an undefined draw order.\r\n * @property {number} [renderBuffer=100] The buffer in pixels around the tile extent used by the\r\n * renderer when getting features from the vector tile for the rendering or hit-detection.\r\n * Recommended value: Vector tiles are usually generated with a buffer, so this value should match\r\n * the largest possible buffer of the used tiles. It should be at least the size of the largest\r\n * point symbol or line width.\r\n * @property {import(\"./VectorTileRenderType.js\").default|string} [renderMode='hybrid'] Render mode for vector tiles:\r\n *  * `'image'`: Vector tiles are rendered as images. Great performance, but point symbols and texts\r\n *    are always rotated with the view and pixels are scaled during zoom animations. When `declutter`\r\n *    is set to `true`, the decluttering is done per tile resulting in labels and point symbols getting\r\n *    cut off at tile boundaries.\r\n *  * `'hybrid'`: Polygon and line elements are rendered as images, so pixels are scaled during zoom\r\n *    animations. Point symbols and texts are accurately rendered as vectors and can stay upright on\r\n *    rotated views.\r\n *  * `'vector'`: Everything is rendered as vectors. Use this mode for improved performance on vector\r\n *    tile layers with only a few rendered features (e.g. for highlighting a subset of features of\r\n *    another layer with the same source).\r\n * @property {import(\"../PluggableMap.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\r\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\r\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\r\n * use {@link module:ol/Map#addLayer}.\r\n * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will be\r\n * recreated during animations. This means that no vectors will be shown clipped, but the setting\r\n * will have a performance impact for large amounts of vector data. When set to `false`, batches\r\n * will be recreated when no animation is active.\r\n * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will be\r\n * recreated during interactions. See also `updateWhileAnimating`.\r\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\r\n * means no preloading.\r\n * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A vector tile layer based on a Mapbox style that uses a single vector source.  Configure\r\n * the layer with the `styleUrl` and `accessToken` shown in Mapbox Studio's share panel.\r\n * If the style uses more than one source, use the `source` property to choose a single\r\n * vector source.  If you want to render a subset of the layers in the style, use the `layers`\r\n * property (all layers must share the same vector source).  See the constructor options for\r\n * more detail.\r\n *\r\n *     var map = new Map({\r\n *       view: new View({\r\n *         center: [0, 0],\r\n *         zoom: 1\r\n *       }),\r\n *       layers: [\r\n *         new MapboxVector({\r\n *           styleUrl: 'mapbox://styles/mapbox/bright-v9',\r\n *           accessToken: 'your-mapbox-access-token-here'\r\n *         })\r\n *       ],\r\n *       target: 'map'\r\n *     });\r\n *\r\n * On configuration or loading error, the layer will trigger an `'error'` event.  Listeners\r\n * will receive an object with an `error` property that can be used to diagnose the problem.\r\n *\r\n * @param {Options} options Options.\r\n * @extends {VectorTileLayer}\r\n * @fires module:ol/events/Event~BaseEvent#event:error\r\n * @api\r\n */\r\nclass MapboxVectorLayer extends VectorTileLayer {\r\n  /**\r\n   * @param {Options} options Layer options.  At a minimum, `styleUrl` and `accessToken`\r\n   * must be provided.\r\n   */\r\n  constructor(options) {\r\n    const declutter = 'declutter' in options ? options.declutter : true;\r\n    const source = new VectorTileSource({\r\n      state: SourceState.LOADING,\r\n      format: new MVT(),\r\n    });\r\n\r\n    super({\r\n      source: source,\r\n      declutter: declutter,\r\n      className: options.className,\r\n      opacity: options.opacity,\r\n      visible: options.visible,\r\n      zIndex: options.zIndex,\r\n      minResolution: options.minResolution,\r\n      maxResolution: options.maxResolution,\r\n      minZoom: options.minZoom,\r\n      maxZoom: options.maxZoom,\r\n      renderOrder: options.renderOrder,\r\n      renderBuffer: options.renderBuffer,\r\n      renderMode: options.renderMode,\r\n      map: options.map,\r\n      updateWhileAnimating: options.updateWhileAnimating,\r\n      updateWhileInteracting: options.updateWhileInteracting,\r\n      preload: options.preload,\r\n      useInterimTilesOnError: options.useInterimTilesOnError,\r\n    });\r\n\r\n    this.sourceId = options.source;\r\n    this.layers = options.layers;\r\n    this.accessToken = options.accessToken;\r\n    this.fetchStyle(options.styleUrl);\r\n  }\r\n\r\n  /**\r\n   * Fetch the style object.\r\n   * @param {string} styleUrl The URL of the style to load.\r\n   * @protected\r\n   */\r\n  fetchStyle(styleUrl) {\r\n    const url = normalizeStyleUrl(styleUrl, this.accessToken);\r\n    fetch(url)\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\r\n            `unexpected response when fetching style: ${response.status}`\r\n          );\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((style) => {\r\n        this.onStyleLoad(style);\r\n      })\r\n      .catch((error) => {\r\n        this.handleError(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Handle the loaded style object.\r\n   * @param {StyleObject} style The loaded style.\r\n   * @protected\r\n   */\r\n  onStyleLoad(style) {\r\n    let sourceId;\r\n    let sourceIdOrLayersList;\r\n    if (this.layers) {\r\n      // confirm all layers share the same source\r\n      const lookup = {};\r\n      for (let i = 0; i < style.layers.length; ++i) {\r\n        const layer = style.layers[i];\r\n        if (layer.source) {\r\n          lookup[layer.id] = layer.source;\r\n        }\r\n      }\r\n      let firstSource;\r\n      for (let i = 0; i < this.layers.length; ++i) {\r\n        const candidate = lookup[this.layers[i]];\r\n        if (!candidate) {\r\n          this.handleError(\r\n            new Error(`could not find source for ${this.layers[i]}`)\r\n          );\r\n          return;\r\n        }\r\n        if (!firstSource) {\r\n          firstSource = candidate;\r\n        } else if (firstSource !== candidate) {\r\n          this.handleError(\r\n            new Error(\r\n              `layers can only use a single source, found ${firstSource} and ${candidate}`\r\n            )\r\n          );\r\n          return;\r\n        }\r\n      }\r\n      sourceId = firstSource;\r\n      sourceIdOrLayersList = this.layers;\r\n    } else {\r\n      sourceId = this.sourceId;\r\n      sourceIdOrLayersList = sourceId;\r\n    }\r\n\r\n    if (!sourceIdOrLayersList) {\r\n      // default to the first source in the style\r\n      sourceId = Object.keys(style.sources)[0];\r\n      sourceIdOrLayersList = sourceId;\r\n    }\r\n\r\n    if (style.sprite) {\r\n      style.sprite = normalizeSpriteUrl(style.sprite, this.accessToken);\r\n    }\r\n\r\n    if (style.glyphs) {\r\n      style.glyphs = normalizeGlyphsUrl(style.glyphs, this.accessToken);\r\n    }\r\n\r\n    const styleSource = style.sources[sourceId];\r\n    if (styleSource.type !== SourceType.VECTOR) {\r\n      this.handleError(\r\n        new Error(`only works for vector sources, found ${styleSource.type}`)\r\n      );\r\n      return;\r\n    }\r\n\r\n    const source = this.getSource();\r\n    source.setUrl(normalizeSourceUrl(styleSource.url, this.accessToken));\r\n\r\n    applyStyle(this, style, sourceIdOrLayersList)\r\n      .then(() => {\r\n        source.setState(SourceState.READY);\r\n      })\r\n      .catch((error) => {\r\n        this.handleError(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Handle configuration or loading error.\r\n   * @param {Error} error The error.\r\n   * @protected\r\n   */\r\n  handleError(error) {\r\n    this.dispatchEvent(new ErrorEvent(error));\r\n    const source = this.getSource();\r\n    source.setState(SourceState.ERROR);\r\n  }\r\n}\r\n\r\nexport default MapboxVectorLayer;\r\n","import Map from '../src/ol/Map.js';\r\nimport MapboxVector from '../src/ol/layer/MapboxVector.js';\r\nimport View from '../src/ol/View.js';\r\n\r\nconst map = new Map({\r\n  target: 'map',\r\n  layers: [\r\n    new MapboxVector({\r\n      styleUrl: 'mapbox://styles/mapbox/bright-v9',\r\n      accessToken:\r\n        'pk.eyJ1IjoiYWhvY2V2YXIiLCJhIjoiY2pzbmg0Nmk5MGF5NzQzbzRnbDNoeHJrbiJ9.7_-_gL8ur7ZtEiNwRfCy7Q',\r\n    }),\r\n  ],\r\n  view: new View({\r\n    center: [0, 0],\r\n    zoom: 2,\r\n  }),\r\n});\r\n"],"sourceRoot":""}