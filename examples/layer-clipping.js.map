{"version":3,"sources":["webpack:///./layer-clipping.js"],"names":["osm","source","layers","target","view","center","zoom","on","event","const","ctx","context","matrix","inversePixelTransform","canvasPixelRatio","Math","sqrt","canvasRotation","atan2","save","translate","canvas","width","height","rotate","scale","beginPath","moveTo","bezierCurveTo","clip","restore"],"mappings":"2FAAA,uCAKMA,EAAM,IAAI,IAAU,CACxBC,OAAQ,IAAI,MAGF,IAAI,IAAI,CAClBC,OAAQ,CAACF,GACTG,OAAQ,MACRC,KAAM,IAAI,IAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAIVN,EAAIO,GAAG,aAAa,SAAUC,GAC5BC,IAAMC,EAAMF,EAAMG,QAGZC,EAASJ,EAAMK,sBACfC,EAAmBC,KAAKC,KAC5BJ,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAAKA,EAAO,IAEvCK,GAAkBF,KAAKG,MAAMN,EAAO,GAAIA,EAAO,IACrDF,EAAIS,OAEJT,EAAIU,UAAUV,EAAIW,OAAOC,MAAQ,EAAGZ,EAAIW,OAAOE,OAAS,GACxDb,EAAIc,QAAQP,GAEZP,EAAIe,MAAM,EAAIX,EAAkB,EAAIA,GACpCJ,EAAIU,WAAW,IAAK,IACpBV,EAAIgB,YACJhB,EAAIiB,OAAO,GAAI,IACfjB,EAAIkB,cAAc,GAAI,GAAI,GAAI,GAAI,GAAI,IACtClB,EAAIkB,cAAc,GAAI,GAAI,GAAI,KAAM,GAAI,MACxClB,EAAIkB,cAAc,GAAI,GAAI,GAAI,IAAK,GAAI,KACvClB,EAAIkB,cAAc,IAAK,IAAK,IAAK,GAAI,IAAK,MAC1ClB,EAAIkB,cAAc,IAAK,KAAM,IAAK,GAAI,IAAK,IAC3ClB,EAAIkB,cAAc,GAAI,GAAI,GAAI,GAAI,GAAI,IACtClB,EAAImB,OACJnB,EAAIU,UAAU,GAAI,IAClBV,EAAIe,MAAM,EAAI,EAAIX,EAAkB,EAAI,EAAIA,GAG5CJ,EAAIc,OAAOP,GACXP,EAAIU,WAAWV,EAAIW,OAAOC,MAAQ,GAAIZ,EAAIW,OAAOE,OAAS,MAG5DvB,EAAIO,GAAG,cAAc,SAAUC,GACjBA,EAAMG,QACdmB,e","file":"layer-clipping.js","sourcesContent":["import Map from '../src/ol/Map.js';\r\nimport OSM from '../src/ol/source/OSM.js';\r\nimport TileLayer from '../src/ol/layer/Tile.js';\r\nimport View from '../src/ol/View.js';\r\n\r\nconst osm = new TileLayer({\r\n  source: new OSM(),\r\n});\r\n\r\nconst map = new Map({\r\n  layers: [osm],\r\n  target: 'map',\r\n  view: new View({\r\n    center: [0, 0],\r\n    zoom: 2,\r\n  }),\r\n});\r\n\r\nosm.on('prerender', function (event) {\r\n  const ctx = event.context;\r\n\r\n  // calculate the pixel ratio and rotation of the canvas\r\n  const matrix = event.inversePixelTransform;\r\n  const canvasPixelRatio = Math.sqrt(\r\n    matrix[0] * matrix[0] + matrix[1] * matrix[1]\r\n  );\r\n  const canvasRotation = -Math.atan2(matrix[1], matrix[0]);\r\n  ctx.save();\r\n  // center the canvas and remove rotation to position clipping\r\n  ctx.translate(ctx.canvas.width / 2, ctx.canvas.height / 2);\r\n  ctx.rotate(-canvasRotation);\r\n\r\n  ctx.scale(3 * canvasPixelRatio, 3 * canvasPixelRatio);\r\n  ctx.translate(-75, -80);\r\n  ctx.beginPath();\r\n  ctx.moveTo(75, 40);\r\n  ctx.bezierCurveTo(75, 37, 70, 25, 50, 25);\r\n  ctx.bezierCurveTo(20, 25, 20, 62.5, 20, 62.5);\r\n  ctx.bezierCurveTo(20, 80, 40, 102, 75, 120);\r\n  ctx.bezierCurveTo(110, 102, 130, 80, 130, 62.5);\r\n  ctx.bezierCurveTo(130, 62.5, 130, 25, 100, 25);\r\n  ctx.bezierCurveTo(85, 25, 75, 37, 75, 40);\r\n  ctx.clip();\r\n  ctx.translate(75, 80);\r\n  ctx.scale(1 / 3 / canvasPixelRatio, 1 / 3 / canvasPixelRatio);\r\n\r\n  // reapply canvas rotation and position\r\n  ctx.rotate(canvasRotation);\r\n  ctx.translate(-ctx.canvas.width / 2, -ctx.canvas.height / 2);\r\n});\r\n\r\nosm.on('postrender', function (event) {\r\n  const ctx = event.context;\r\n  ctx.restore();\r\n});\r\n"],"sourceRoot":""}