{"version":3,"sources":["webpack:///../src/ol/control/ZoomToExtent.js","webpack:///./navigation-controls.js"],"names":["ZoomToExtent","opt_options","const","options","super","element","document","createElement","target","this","extent","className","undefined","label","tipLabel","button","setAttribute","title","appendChild","createTextNode","addEventListener","CLICK","handleClick_","bind","cssClasses","event","preventDefault","handleZoomToExtent","view","getMap","getView","getProjection","getExtent","fitInternal","controls","extend","layers","source","center","zoom"],"mappings":"4FAAA,oCA2BMA,EAA4B,YAIhC,WAAYC,GACVC,IAAMC,EAAUF,GAA4B,GAE5CG,OAAM,MACJC,QAASC,SAASC,cAAc,OAChCC,OAAQL,EAAQK,SAOlBC,KAAKC,OAASP,EAAQO,OAASP,EAAQO,OAAS,KAEhDR,IAAMS,OACkBC,IAAtBT,EAAQQ,UAA0BR,EAAQQ,UAAY,iBAElDE,OAA0BD,IAAlBT,EAAQU,MAAsBV,EAAQU,MAAQ,IACtDC,OACiBF,IAArBT,EAAQW,SAAyBX,EAAQW,SAAW,gBAChDC,EAAST,SAASC,cAAc,UACtCQ,EAAOC,aAAa,OAAQ,UAC5BD,EAAOE,MAAQH,EACfC,EAAOG,YACY,iBAAVL,EAAqBP,SAASa,eAAeN,GAASA,GAG/DE,EAAOK,iBACL,IAAUC,MACVZ,KAAKa,aAAaC,KAAKd,OACvB,GAGFP,IAAMsB,EACJb,EAAY,IAAM,IAAqB,IAAM,IACzCN,EAAUI,KAAKJ,QACrBA,EAAQM,UAAYa,EACpBnB,EAAQa,YAAYH,G,8FAOtB,EAAF,UAAEO,aAAA,SAAaG,GACXA,EAAMC,iBACNjB,KAAKkB,sBAMP,EAAF,UAAEA,mBAAA,WACEzB,IACM0B,EADMnB,KAAKoB,SACAC,UACXpB,EAAUD,KAAKC,OAEjBD,KAAKC,OADLkB,EAAKG,gBAAgBC,YAEzBJ,EAAKK,YAAY,YAAkBvB,K,EA9DL,CAAP,KAkEZ,O,iCC7Ff,wDAMY,IAAI,IAAI,CAClBwB,SAAU,cAAkBC,OAAO,CACjC,IAAI,IAAa,CACfzB,OAAQ,CACN,kBACA,kBACA,kBACA,uBAIN0B,OAAQ,CACN,IAAI,IAAU,CACZC,OAAQ,IAAI,OAGhB7B,OAAQ,MACRoB,KAAM,IAAI,IAAK,CACbU,OAAQ,CAAC,EAAG,GACZC,KAAM,Q","file":"navigation-controls.js","sourcesContent":["/**\r\n * @module ol/control/ZoomToExtent\r\n */\r\nimport Control from './Control.js';\r\nimport EventType from '../events/EventType.js';\r\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\r\nimport {fromExtent as polygonFromExtent} from '../geom/Polygon.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-zoom-extent'] Class name.\r\n * @property {HTMLElement|string} [target] Specify a target if you want the control\r\n * to be rendered outside of the map's viewport.\r\n * @property {string|HTMLElement} [label='E'] Text label to use for the button.\r\n * Instead of text, also an element (e.g. a `span` element) can be used.\r\n * @property {string} [tipLabel='Fit to extent'] Text label to use for the button tip.\r\n * @property {import(\"../extent.js\").Extent} [extent] The extent to zoom to. If undefined the validity\r\n * extent of the view projection is used.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A button control which, when pressed, changes the map view to a specific\r\n * extent. To style this control use the css selector `.ol-zoom-extent`.\r\n *\r\n * @api\r\n */\r\nclass ZoomToExtent extends Control {\r\n  /**\r\n   * @param {Options=} opt_options Options.\r\n   */\r\n  constructor(opt_options) {\r\n    const options = opt_options ? opt_options : {};\r\n\r\n    super({\r\n      element: document.createElement('div'),\r\n      target: options.target,\r\n    });\r\n\r\n    /**\r\n     * @type {?import(\"../extent.js\").Extent}\r\n     * @protected\r\n     */\r\n    this.extent = options.extent ? options.extent : null;\r\n\r\n    const className =\r\n      options.className !== undefined ? options.className : 'ol-zoom-extent';\r\n\r\n    const label = options.label !== undefined ? options.label : 'E';\r\n    const tipLabel =\r\n      options.tipLabel !== undefined ? options.tipLabel : 'Fit to extent';\r\n    const button = document.createElement('button');\r\n    button.setAttribute('type', 'button');\r\n    button.title = tipLabel;\r\n    button.appendChild(\r\n      typeof label === 'string' ? document.createTextNode(label) : label\r\n    );\r\n\r\n    button.addEventListener(\r\n      EventType.CLICK,\r\n      this.handleClick_.bind(this),\r\n      false\r\n    );\r\n\r\n    const cssClasses =\r\n      className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\r\n    const element = this.element;\r\n    element.className = cssClasses;\r\n    element.appendChild(button);\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} event The event to handle\r\n   * @private\r\n   */\r\n  handleClick_(event) {\r\n    event.preventDefault();\r\n    this.handleZoomToExtent();\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  handleZoomToExtent() {\r\n    const map = this.getMap();\r\n    const view = map.getView();\r\n    const extent = !this.extent\r\n      ? view.getProjection().getExtent()\r\n      : this.extent;\r\n    view.fitInternal(polygonFromExtent(extent));\r\n  }\r\n}\r\n\r\nexport default ZoomToExtent;\r\n","import Map from '../src/ol/Map.js';\r\nimport OSM from '../src/ol/source/OSM.js';\r\nimport TileLayer from '../src/ol/layer/Tile.js';\r\nimport View from '../src/ol/View.js';\r\nimport {ZoomToExtent, defaults as defaultControls} from '../src/ol/control.js';\r\n\r\nconst map = new Map({\r\n  controls: defaultControls().extend([\r\n    new ZoomToExtent({\r\n      extent: [\r\n        813079.7791264898,\r\n        5929220.284081122,\r\n        848966.9639063801,\r\n        5936863.986909639,\r\n      ],\r\n    }),\r\n  ]),\r\n  layers: [\r\n    new TileLayer({\r\n      source: new OSM(),\r\n    }),\r\n  ],\r\n  target: 'map',\r\n  view: new View({\r\n    center: [0, 0],\r\n    zoom: 2,\r\n  }),\r\n});\r\n"],"sourceRoot":""}