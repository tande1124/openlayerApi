{"version":3,"sources":["webpack:///../src/ol/source/TileArcGISRest.js","webpack:///./arcgis-tiled.js"],"names":["opt_options","const","options","super","attributions","cacheSize","crossOrigin","imageSmoothing","projection","reprojectionErrorThreshold","tileGrid","tileLoadFunction","url","urls","wrapX","undefined","transition","this","params_","params","hidpi_","hidpi","tmpExtent_","setKey","getKeyForParams_","let","i","res","key","join","getParams","getRequestUrl_","tileCoord","tileSize","tileExtent","pixelRatio","srid","getCode","split","pop","Math","round","length","modifiedUrl","replace","getTilePixelRatio","updateParams","tileUrlFunction","getTileGrid","getTileGridForProjection","getResolutions","getTileCoordExtent","getTileSize","tmpSize","baseParams","Tile","source","OSM","extent","Map","layers","target","view","View","center","zoom"],"mappings":"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","file":"arcgis-tiled.js","sourcesContent":["/**\r\n * @module ol/source/TileArcGISRest\r\n */\r\n\r\nimport TileImage from './TileImage.js';\r\nimport {appendParams} from '../uri.js';\r\nimport {assign} from '../obj.js';\r\nimport {createEmpty} from '../extent.js';\r\nimport {modulo} from '../math.js';\r\nimport {scale as scaleSize, toSize} from '../size.js';\r\nimport {hash as tileCoordHash} from '../tilecoord.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\r\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service defaults will be\r\n * used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is `IMAGE` by\r\n * default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`,\r\n * and `IMAGESR` will be set dynamically. Set `LAYERS` to\r\n * override the default service layer visibility. See\r\n * http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#/Export_Map/02r3000000v7000000/\r\n * for further reference.\r\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\r\n * the image from the remote server.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\r\n * tilesize and extent supported by the server.\r\n * If this is not defined, a default grid will be used: if there is a projection\r\n * extent, the grid will be based on that; if not, a grid based on a global\r\n * extent with origin at 0,0 will be used.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\r\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\r\n * Higher values can increase reprojection performance, but decrease precision.\r\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL.\r\n * The default is\r\n * ```js\r\n * function(imageTile, src) {\r\n *   imageTile.getImage().src = src;\r\n * };\r\n * ```\r\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The\r\n * url should include /MapServer or /ImageServer.\r\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\r\n * @property {number} [transition] Duration of the opacity transition for rendering.  To disable the opacity\r\n * transition, pass `transition: 0`.\r\n * @property {Array<string>} [urls] ArcGIS Rest service urls. Use this instead of `url` when the ArcGIS\r\n * Service supports multiple urls for export requests.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Layer source for tile data from ArcGIS Rest services. Map and Image\r\n * Services are supported.\r\n *\r\n * For cached ArcGIS services, better performance is available using the\r\n * {@link module:ol/source/XYZ~XYZ} data source.\r\n * @api\r\n */\r\nclass TileArcGISRest extends TileImage {\r\n  /**\r\n   * @param {Options=} opt_options Tile ArcGIS Rest options.\r\n   */\r\n  constructor(opt_options) {\r\n    const options = opt_options ? opt_options : {};\r\n\r\n    super({\r\n      attributions: options.attributions,\r\n      cacheSize: options.cacheSize,\r\n      crossOrigin: options.crossOrigin,\r\n      imageSmoothing: options.imageSmoothing,\r\n      projection: options.projection,\r\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\r\n      tileGrid: options.tileGrid,\r\n      tileLoadFunction: options.tileLoadFunction,\r\n      url: options.url,\r\n      urls: options.urls,\r\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\r\n      transition: options.transition,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object}\r\n     */\r\n    this.params_ = options.params || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\r\n    this.tmpExtent_ = createEmpty();\r\n\r\n    this.setKey(this.getKeyForParams_());\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @return {string} The key for the current params.\r\n   */\r\n  getKeyForParams_() {\r\n    let i = 0;\r\n    const res = [];\r\n    for (const key in this.params_) {\r\n      res[i++] = key + '-' + this.params_[key];\r\n    }\r\n    return res.join('/');\r\n  }\r\n\r\n  /**\r\n   * Get the user-provided params, i.e. those passed to the constructor through\r\n   * the \"params\" option, and possibly updated using the updateParams method.\r\n   * @return {Object} Params.\r\n   * @api\r\n   */\r\n  getParams() {\r\n    return this.params_;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\r\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @param {Object} params Params.\r\n   * @return {string|undefined} Request URL.\r\n   * @private\r\n   */\r\n  getRequestUrl_(\r\n    tileCoord,\r\n    tileSize,\r\n    tileExtent,\r\n    pixelRatio,\r\n    projection,\r\n    params\r\n  ) {\r\n    const urls = this.urls;\r\n    if (!urls) {\r\n      return undefined;\r\n    }\r\n\r\n    // ArcGIS Server only wants the numeric portion of the projection ID.\r\n    const srid = projection.getCode().split(':').pop();\r\n\r\n    params['SIZE'] = tileSize[0] + ',' + tileSize[1];\r\n    params['BBOX'] = tileExtent.join(',');\r\n    params['BBOXSR'] = srid;\r\n    params['IMAGESR'] = srid;\r\n    params['DPI'] = Math.round(\r\n      params['DPI'] ? params['DPI'] * pixelRatio : 90 * pixelRatio\r\n    );\r\n\r\n    let url;\r\n    if (urls.length == 1) {\r\n      url = urls[0];\r\n    } else {\r\n      const index = modulo(tileCoordHash(tileCoord), urls.length);\r\n      url = urls[index];\r\n    }\r\n\r\n    const modifiedUrl = url\r\n      .replace(/MapServer\\/?$/, 'MapServer/export')\r\n      .replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\r\n    return appendParams(modifiedUrl, params);\r\n  }\r\n\r\n  /**\r\n   * Get the tile pixel ratio for this source.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} Tile pixel ratio.\r\n   */\r\n  getTilePixelRatio(pixelRatio) {\r\n    return this.hidpi_ ? pixelRatio : 1;\r\n  }\r\n\r\n  /**\r\n   * Update the user-provided params.\r\n   * @param {Object} params Params.\r\n   * @api\r\n   */\r\n  updateParams(params) {\r\n    assign(this.params_, params);\r\n    this.setKey(this.getKeyForParams_());\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\r\n   * @param {number} pixelRatio The pixel ratio\r\n   * @param {import(\"../proj/Projection.js\").default} projection The projection\r\n   * @return {string|undefined} The tile URL\r\n   * @override\r\n   */\r\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\r\n    let tileGrid = this.getTileGrid();\r\n    if (!tileGrid) {\r\n      tileGrid = this.getTileGridForProjection(projection);\r\n    }\r\n\r\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\r\n      return undefined;\r\n    }\r\n\r\n    if (pixelRatio != 1 && !this.hidpi_) {\r\n      pixelRatio = 1;\r\n    }\r\n\r\n    const tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\r\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\r\n\r\n    if (pixelRatio != 1) {\r\n      tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\r\n    }\r\n\r\n    // Apply default params and override with user specified values.\r\n    const baseParams = {\r\n      'F': 'image',\r\n      'FORMAT': 'PNG32',\r\n      'TRANSPARENT': true,\r\n    };\r\n    assign(baseParams, this.params_);\r\n\r\n    return this.getRequestUrl_(\r\n      tileCoord,\r\n      tileSize,\r\n      tileExtent,\r\n      pixelRatio,\r\n      projection,\r\n      baseParams\r\n    );\r\n  }\r\n}\r\n\r\nexport default TileArcGISRest;\r\n","import Map from '../src/ol/Map.js';\r\nimport TileLayer from '../src/ol/layer/Tile.js';\r\nimport View from '../src/ol/View.js';\r\nimport {OSM, TileArcGISRest} from '../src/ol/source.js';\r\n\r\nconst url =\r\n  'https://sampleserver1.arcgisonline.com/ArcGIS/rest/services/' +\r\n  'Specialty/ESRI_StateCityHighway_USA/MapServer';\r\n\r\nconst layers = [\r\n  new TileLayer({\r\n    source: new OSM(),\r\n  }),\r\n  new TileLayer({\r\n    extent: [-13884991, 2870341, -7455066, 6338219],\r\n    source: new TileArcGISRest({\r\n      url: url,\r\n    }),\r\n  }),\r\n];\r\nconst map = new Map({\r\n  layers: layers,\r\n  target: 'map',\r\n  view: new View({\r\n    center: [-10997148, 4569099],\r\n    zoom: 4,\r\n  }),\r\n});\r\n"],"sourceRoot":""}