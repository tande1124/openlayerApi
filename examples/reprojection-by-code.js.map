{"version":3,"sources":["webpack:///./reprojection-by-code.js"],"names":["graticule","strokeStyle","color","width","lineDash","showLabels","visible","wrapX","map","layers","source","target","view","projection","center","zoom","queryInput","document","getElementById","searchButton","resultSpan","renderEdgesCheckbox","showGraticuleCheckbox","setProjection","code","name","proj4def","bbox","innerHTML","setView","const","newProjCode","defs","newProj","fromLonLat","worldExtent","setWorldExtent","extent","undefined","setExtent","newView","fit","onclick","event","query","value","fetch","then","response","json","results","length","let","i","ii","result","preventDefault","onchange","getLayers","forEach","layer","getSource","setRenderReprojectionEdges","checked","setVisible"],"mappings":"4FAAA,+FAYMA,EAAY,IAAI,IAAU,CAE9BC,YAAa,IAAI,IAAO,CACtBC,MAAO,sBACPC,MAAO,EACPC,SAAU,CAAC,GAAK,KAElBC,YAAY,EACZC,SAAS,EACTC,OAAO,IAGHC,EAAM,IAAI,IAAI,CAClBC,OAAQ,CACN,IAAI,IAAU,CACZC,OAAQ,IAAI,MAEdV,GAEFW,OAAQ,MACRC,KAAM,IAAI,IAAK,CACbC,WAAY,YACZC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAIJC,EAAaC,SAASC,eAAe,cACrCC,EAAeF,SAASC,eAAe,eACvCE,EAAaH,SAASC,eAAe,eACrCG,EAAsBJ,SAASC,eAAe,gBAC9CI,EAAwBL,SAASC,eAAe,kBAEtD,SAASK,EAAcC,EAAMC,EAAMC,EAAUC,GAC3C,GAAa,OAATH,GAA0B,OAATC,GAA8B,OAAbC,GAA8B,OAATC,EASzD,OARAP,EAAWQ,UAAY,gDACvBpB,EAAIqB,QACF,IAAI,IAAK,CACPhB,WAAY,YACZC,OAAQ,CAAC,EAAG,GACZC,KAAM,KAMZK,EAAWQ,UAAY,IAAMJ,EAAO,KAAOC,EAE3CK,IAAMC,EAAc,QAAUP,EAC9B,IAAMQ,KAAKD,EAAaL,GACxB,YAAS,KACTI,IAAMG,EAAU,YAAcF,GACxBG,EAAa,YAAa,YAAaD,GAEzCE,EAAc,CAACR,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAIA,EAAK,IACnDM,EAAQG,eAAeD,GAInBR,EAAK,GAAKA,EAAK,KACjBQ,EAAc,CAACR,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAK,IAAKA,EAAK,KAEvDG,IAAMO,EAAS,YAAeF,EAAaD,OAAYI,EAAW,GAClEL,EAAQM,UAAUF,GAClBP,IAAMU,EAAU,IAAI,IAAK,CACvB3B,WAAYoB,IAEdzB,EAAIqB,QAAQW,GACZA,EAAQC,IAAIJ,GAyCdlB,EAAauB,QAAU,SAAUC,GAtCjC,IAAgBC,IAuCP5B,EAAW6B,MAtClBzB,EAAWQ,UAAY,gBACvBkB,MAAM,kCAAoCF,GACvCG,MAAK,SAAUC,GACd,OAAOA,EAASC,UAEjBF,MAAK,SAAUE,GACdnB,IAAMoB,EAAUD,EAAc,QAC9B,GAAIC,GAAWA,EAAQC,OAAS,EAC9B,IAAKC,IAAIC,EAAI,EAAGC,EAAKJ,EAAQC,OAAQE,EAAIC,EAAID,IAAK,CAChDvB,IAAMyB,EAASL,EAAQG,GACvB,GAAIE,EAAQ,CACVzB,IAAMN,EAAO+B,EAAa,KACpB9B,EAAO8B,EAAa,KACpB7B,EAAW6B,EAAc,MACzB5B,EAAO4B,EAAa,KAC1B,GACE/B,GACAA,EAAK2B,OAAS,GACdzB,GACAA,EAASyB,OAAS,GAClBxB,GACe,GAAfA,EAAKwB,OAGL,YADA5B,EAAcC,EAAMC,EAAMC,EAAUC,IAM5CJ,EAAc,KAAM,KAAM,KAAM,SAUpCoB,EAAMa,kBAMRnC,EAAoBoC,SAAW,WAC7BjD,EAAIkD,YAAYC,SAAQ,SAAUC,GAChC,GAAIA,aAAiB,IAAW,CAC9B9B,IAAMpB,EAASkD,EAAMC,YACjBnD,aAAkB,KACpBA,EAAOoD,2BAA2BzC,EAAoB0C,cAS9DzC,EAAsBmC,SAAW,WAC/BzD,EAAUgE,WAAW1C,EAAsByC,Y","file":"reprojection-by-code.js","sourcesContent":["import Graticule from '../src/ol/layer/Graticule.js';\r\nimport Map from '../src/ol/Map.js';\r\nimport OSM from '../src/ol/source/OSM.js';\r\nimport Stroke from '../src/ol/style/Stroke.js';\r\nimport TileImage from '../src/ol/source/TileImage.js';\r\nimport TileLayer from '../src/ol/layer/Tile.js';\r\nimport View from '../src/ol/View.js';\r\nimport proj4 from 'proj4';\r\nimport {applyTransform} from '../src/ol/extent.js';\r\nimport {get as getProjection, getTransform} from '../src/ol/proj.js';\r\nimport {register} from '../src/ol/proj/proj4.js';\r\n\r\nconst graticule = new Graticule({\r\n  // the style to use for the lines, optional.\r\n  strokeStyle: new Stroke({\r\n    color: 'rgba(255,120,0,0.9)',\r\n    width: 2,\r\n    lineDash: [0.5, 4],\r\n  }),\r\n  showLabels: true,\r\n  visible: false,\r\n  wrapX: false,\r\n});\r\n\r\nconst map = new Map({\r\n  layers: [\r\n    new TileLayer({\r\n      source: new OSM(),\r\n    }),\r\n    graticule,\r\n  ],\r\n  target: 'map',\r\n  view: new View({\r\n    projection: 'EPSG:3857',\r\n    center: [0, 0],\r\n    zoom: 1,\r\n  }),\r\n});\r\n\r\nconst queryInput = document.getElementById('epsg-query');\r\nconst searchButton = document.getElementById('epsg-search');\r\nconst resultSpan = document.getElementById('epsg-result');\r\nconst renderEdgesCheckbox = document.getElementById('render-edges');\r\nconst showGraticuleCheckbox = document.getElementById('show-graticule');\r\n\r\nfunction setProjection(code, name, proj4def, bbox) {\r\n  if (code === null || name === null || proj4def === null || bbox === null) {\r\n    resultSpan.innerHTML = 'Nothing usable found, using EPSG:3857...';\r\n    map.setView(\r\n      new View({\r\n        projection: 'EPSG:3857',\r\n        center: [0, 0],\r\n        zoom: 1,\r\n      })\r\n    );\r\n    return;\r\n  }\r\n\r\n  resultSpan.innerHTML = '(' + code + ') ' + name;\r\n\r\n  const newProjCode = 'EPSG:' + code;\r\n  proj4.defs(newProjCode, proj4def);\r\n  register(proj4);\r\n  const newProj = getProjection(newProjCode);\r\n  const fromLonLat = getTransform('EPSG:4326', newProj);\r\n\r\n  let worldExtent = [bbox[1], bbox[2], bbox[3], bbox[0]];\r\n  newProj.setWorldExtent(worldExtent);\r\n\r\n  // approximate calculation of projection extent,\r\n  // checking if the world extent crosses the dateline\r\n  if (bbox[1] > bbox[3]) {\r\n    worldExtent = [bbox[1], bbox[2], bbox[3] + 360, bbox[0]];\r\n  }\r\n  const extent = applyTransform(worldExtent, fromLonLat, undefined, 8);\r\n  newProj.setExtent(extent);\r\n  const newView = new View({\r\n    projection: newProj,\r\n  });\r\n  map.setView(newView);\r\n  newView.fit(extent);\r\n}\r\n\r\nfunction search(query) {\r\n  resultSpan.innerHTML = 'Searching ...';\r\n  fetch('https://epsg.io/?format=json&q=' + query)\r\n    .then(function (response) {\r\n      return response.json();\r\n    })\r\n    .then(function (json) {\r\n      const results = json['results'];\r\n      if (results && results.length > 0) {\r\n        for (let i = 0, ii = results.length; i < ii; i++) {\r\n          const result = results[i];\r\n          if (result) {\r\n            const code = result['code'];\r\n            const name = result['name'];\r\n            const proj4def = result['proj4'];\r\n            const bbox = result['bbox'];\r\n            if (\r\n              code &&\r\n              code.length > 0 &&\r\n              proj4def &&\r\n              proj4def.length > 0 &&\r\n              bbox &&\r\n              bbox.length == 4\r\n            ) {\r\n              setProjection(code, name, proj4def, bbox);\r\n              return;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      setProjection(null, null, null, null);\r\n    });\r\n}\r\n\r\n/**\r\n * Handle click event.\r\n * @param {Event} event The event.\r\n */\r\nsearchButton.onclick = function (event) {\r\n  search(queryInput.value);\r\n  event.preventDefault();\r\n};\r\n\r\n/**\r\n * Handle checkbox change event.\r\n */\r\nrenderEdgesCheckbox.onchange = function () {\r\n  map.getLayers().forEach(function (layer) {\r\n    if (layer instanceof TileLayer) {\r\n      const source = layer.getSource();\r\n      if (source instanceof TileImage) {\r\n        source.setRenderReprojectionEdges(renderEdgesCheckbox.checked);\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Handle checkbox change event.\r\n */\r\nshowGraticuleCheckbox.onchange = function () {\r\n  graticule.setVisible(showGraticuleCheckbox.checked);\r\n};\r\n"],"sourceRoot":""}