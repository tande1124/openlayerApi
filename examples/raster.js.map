{"version":3,"sources":["webpack:///./raster.js"],"names":["const","let"],"mappings":"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","file":"raster.js","sourcesContent":["import Map from '../src/ol/Map.js';\r\nimport RasterSource from '../src/ol/source/Raster.js';\r\nimport View from '../src/ol/View.js';\r\nimport XYZ from '../src/ol/source/XYZ.js';\r\nimport {Image as ImageLayer, Tile as TileLayer} from '../src/ol/layer.js';\r\n\r\nconst minVgi = 0;\r\nconst maxVgi = 0.25;\r\nconst bins = 10;\r\n\r\n/**\r\n * Calculate the Vegetation Greenness Index (VGI) from an input pixel.  This\r\n * is a rough estimate assuming that pixel values correspond to reflectance.\r\n * @param {Array<number>} pixel An array of [R, G, B, A] values.\r\n * @return {number} The VGI value for the given pixel.\r\n */\r\nfunction vgi(pixel) {\r\n  const r = pixel[0] / 255;\r\n  const g = pixel[1] / 255;\r\n  const b = pixel[2] / 255;\r\n  return (2 * g - r - b) / (2 * g + r + b);\r\n}\r\n\r\n/**\r\n * Summarize values for a histogram.\r\n * @param {numver} value A VGI value.\r\n * @param {Object} counts An object for keeping track of VGI counts.\r\n */\r\nfunction summarize(value, counts) {\r\n  const min = counts.min;\r\n  const max = counts.max;\r\n  const num = counts.values.length;\r\n  if (value < min) {\r\n    // do nothing\r\n  } else if (value >= max) {\r\n    counts.values[num - 1] += 1;\r\n  } else {\r\n    const index = Math.floor((value - min) / counts.delta);\r\n    counts.values[index] += 1;\r\n  }\r\n}\r\n\r\n/**\r\n * Use aerial imagery as the input data for the raster source.\r\n */\r\n\r\nconst key = 'get_your_own_D6rA4zTHduk6KOKTXzGB';\r\nconst attributions =\r\n  '<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">&copy; MapTiler</a> ' +\r\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>';\r\n\r\nconst aerial = new XYZ({\r\n  attributions: attributions,\r\n  url: 'https://api.maptiler.com/tiles/satellite/{z}/{x}/{y}.jpg?key=' + key,\r\n  maxZoom: 20,\r\n  crossOrigin: '',\r\n});\r\n\r\n/**\r\n * Create a raster source where pixels with VGI values above a threshold will\r\n * be colored green.\r\n */\r\nconst raster = new RasterSource({\r\n  sources: [aerial],\r\n  /**\r\n   * Run calculations on pixel data.\r\n   * @param {Array} pixels List of pixels (one per source).\r\n   * @param {Object} data User data object.\r\n   * @return {Array} The output pixel.\r\n   */\r\n  operation: function (pixels, data) {\r\n    const pixel = pixels[0];\r\n    const value = vgi(pixel);\r\n    summarize(value, data.counts);\r\n    if (value >= data.threshold) {\r\n      pixel[0] = 0;\r\n      pixel[1] = 255;\r\n      pixel[2] = 0;\r\n      pixel[3] = 128;\r\n    } else {\r\n      pixel[3] = 0;\r\n    }\r\n    return pixel;\r\n  },\r\n  lib: {\r\n    vgi: vgi,\r\n    summarize: summarize,\r\n  },\r\n});\r\nraster.set('threshold', 0.1);\r\n\r\nfunction createCounts(min, max, num) {\r\n  const values = new Array(num);\r\n  for (let i = 0; i < num; ++i) {\r\n    values[i] = 0;\r\n  }\r\n  return {\r\n    min: min,\r\n    max: max,\r\n    values: values,\r\n    delta: (max - min) / num,\r\n  };\r\n}\r\n\r\nraster.on('beforeoperations', function (event) {\r\n  event.data.counts = createCounts(minVgi, maxVgi, bins);\r\n  event.data.threshold = raster.get('threshold');\r\n});\r\n\r\nraster.on('afteroperations', function (event) {\r\n  schedulePlot(event.resolution, event.data.counts, event.data.threshold);\r\n});\r\n\r\nconst map = new Map({\r\n  layers: [\r\n    new TileLayer({\r\n      source: aerial,\r\n    }),\r\n    new ImageLayer({\r\n      source: raster,\r\n    }),\r\n  ],\r\n  target: 'map',\r\n  view: new View({\r\n    center: [-9651695, 4937351],\r\n    zoom: 13,\r\n    minZoom: 12,\r\n    maxZoom: 19,\r\n  }),\r\n});\r\n\r\nlet timer = null;\r\nfunction schedulePlot(resolution, counts, threshold) {\r\n  if (timer) {\r\n    clearTimeout(timer);\r\n    timer = null;\r\n  }\r\n  timer = setTimeout(plot.bind(null, resolution, counts, threshold), 1000 / 60);\r\n}\r\n\r\nconst barWidth = 15;\r\nconst plotHeight = 150;\r\nconst chart = d3\r\n  .select('#plot')\r\n  .append('svg')\r\n  .attr('width', barWidth * bins)\r\n  .attr('height', plotHeight);\r\n\r\nconst chartRect = chart.node().getBoundingClientRect();\r\n\r\nconst tip = d3.select(document.body).append('div').attr('class', 'tip');\r\n\r\nfunction plot(resolution, counts, threshold) {\r\n  const yScale = d3\r\n    .scaleLinear()\r\n    .domain([0, d3.max(counts.values)])\r\n    .range([0, plotHeight]);\r\n\r\n  const bar = chart.selectAll('rect').data(counts.values);\r\n\r\n  bar.enter().append('rect');\r\n\r\n  bar\r\n    .attr('class', function (count, index) {\r\n      const value = counts.min + index * counts.delta;\r\n      return 'bar' + (value >= threshold ? ' selected' : '');\r\n    })\r\n    .attr('width', barWidth - 2);\r\n\r\n  bar\r\n    .transition()\r\n    .attr('transform', function (value, index) {\r\n      return (\r\n        'translate(' +\r\n        index * barWidth +\r\n        ', ' +\r\n        (plotHeight - yScale(value)) +\r\n        ')'\r\n      );\r\n    })\r\n    .attr('height', yScale);\r\n\r\n  bar.on('mousemove', function (count, index) {\r\n    const threshold = counts.min + index * counts.delta;\r\n    if (raster.get('threshold') !== threshold) {\r\n      raster.set('threshold', threshold);\r\n      raster.changed();\r\n    }\r\n  });\r\n\r\n  bar.on('mouseover', function (count, index) {\r\n    let area = 0;\r\n    for (let i = counts.values.length - 1; i >= index; --i) {\r\n      area += resolution * resolution * counts.values[i];\r\n    }\r\n    tip.html(message(counts.min + index * counts.delta, area));\r\n    tip.style('display', 'block');\r\n    tip.transition().style({\r\n      left: chartRect.left + index * barWidth + barWidth / 2 + 'px',\r\n      top: d3.event.y - 60 + 'px',\r\n      opacity: 1,\r\n    });\r\n  });\r\n\r\n  bar.on('mouseout', function () {\r\n    tip\r\n      .transition()\r\n      .style('opacity', 0)\r\n      .each('end', function () {\r\n        tip.style('display', 'none');\r\n      });\r\n  });\r\n}\r\n\r\nfunction message(value, area) {\r\n  const acres = (area / 4046.86)\r\n    .toFixed(0)\r\n    .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\r\n  return acres + ' acres at<br>' + value.toFixed(2) + ' VGI or above';\r\n}\r\n"],"sourceRoot":""}