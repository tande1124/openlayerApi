{"version":3,"sources":["webpack:///./drag-and-drop-custom-mvt.js"],"names":["tileCoordZ","document","getElementById","tileCoordX","tileCoordY","customMVT","super","featureClass","readFeatures","source","options","extent","getTileCoordExtent","parseInt","value","dragAndDropInteraction","formatConstructors","map","interactions","extend","layers","target","view","center","zoom","on","event","const","vectorSource","features","addLayer","getView","fit","getExtent","displayFeatureInfo","pixel","forEachFeatureAtPixel","feature","push","length","i","ii","info","description","get","innerHTML","join","evt","dragging","getEventPixel","originalEvent","link","addEventListener","fullpath","filename","fetch","then","response","blob","navigator","msSaveBlob","href","URL","createObjectURL","download","click"],"mappings":"2FAAA,4IAcMA,EAAaC,SAASC,eAAe,cACrCC,EAAaF,SAASC,eAAe,cACrCE,EAAaH,SAASC,eAAe,cAErCG,EAAqB,YACzB,aACEC,OAAM,MAACC,aAAc,M,8FAEvB,EAAF,UAAEC,aAAA,SAAaC,EAAQC,GAMnB,OALAA,EAAQC,OAAS,cAAYC,mBAAmB,CAC9CC,SAASb,EAAWc,OACpBD,SAASV,EAAWW,OACpBD,SAAST,EAAWU,SAEfR,YAAME,aAAA,KAAa,KAAAC,EAAQC,I,EAVX,CAAH,KAgBlBK,EAAyB,IAAI,IAAY,CAC7CC,mBAAoB,CAACX,EAAW,IAAK,IAAS,IAAK,IAAK,OAGpDY,EAAM,IAAI,IAAI,CAClBC,aAAc,cAAsBC,OAAO,CAACJ,IAC5CK,OAAQ,CACN,IAAI,IAAU,CACZX,OAAQ,IAAI,OAGhBY,OAAQ,MACRC,KAAM,IAAI,IAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAIVT,EAAuBU,GAAG,eAAe,SAAUC,GACjDC,IAAMC,EAAe,IAAI,IAAa,CACpCC,SAAUH,EAAMG,WAElBZ,EAAIa,SACF,IAAI,IAAY,CACdrB,OAAQmB,KAGZX,EAAIc,UAAUC,IAAIJ,EAAaK,gBAGjCN,IAAMO,EAAqB,SAAUC,GACnCR,IAAME,EAAW,GAIjB,GAHAZ,EAAImB,sBAAsBD,GAAO,SAAUE,GACzCR,EAASS,KAAKD,MAEZR,EAASU,OAAS,EAAG,CACvBZ,IACIa,EAAGC,EADDC,EAAO,GAEb,IAAKF,EAAI,EAAGC,EAAKZ,EAASU,OAAQC,EAAIC,IAAMD,EAAG,CAC7Cb,IAAMgB,EACJd,EAASW,GAAGI,IAAI,SAChBf,EAASW,GAAGI,IAAI,UAChBf,EAASW,GAAGI,IAAI,SACdD,GACFD,EAAKJ,KAAKK,GAGd1C,SAASC,eAAe,QAAQ2C,UAAYH,EAAKI,KAAK,OAAS,aAE/D7C,SAASC,eAAe,QAAQ2C,UAAY,UAIhD5B,EAAIQ,GAAG,eAAe,SAAUsB,GAC9B,IAAIA,EAAIC,SAAR,CAGArB,IAAMQ,EAAQlB,EAAIgC,cAAcF,EAAIG,eACpChB,EAAmBC,OAGrBlB,EAAIQ,GAAG,SAAS,SAAUsB,GACxBb,EAAmBa,EAAIZ,UAKzBR,IAAMwB,EAAOlD,SAASC,eAAe,YAmBrCD,SAASC,eAAe,gBAAgBkD,iBAAiB,SAAS,YAjBlE,SAAkBC,EAAUC,GAC1BC,MAAMF,GACHG,MAAK,SAAUC,GACd,OAAOA,EAASC,UAEjBF,MAAK,SAAUE,GACVC,UAAUC,WAEZD,UAAUC,WAAWF,EAAMJ,IAE3BH,EAAKU,KAAOC,IAAIC,gBAAgBL,GAChCP,EAAKa,SAAWV,EAChBH,EAAKc,YAgBXD,CATE,2FACAhE,EAAWc,MACX,IACAV,EAAWU,MACX,IACAX,EAAWW,MACX,OAEAd,EAAWc,MAAQ,IAAMX,EAAWW,MAAQ,IAAMV,EAAWU,MAAQ,a","file":"drag-and-drop-custom-mvt.js","sourcesContent":["import Feature from '../src/ol/Feature.js';\r\nimport Map from '../src/ol/Map.js';\r\nimport View from '../src/ol/View.js';\r\nimport {\r\n  DragAndDrop,\r\n  defaults as defaultInteractions,\r\n} from '../src/ol/interaction.js';\r\nimport {GPX, GeoJSON, IGC, KML, MVT, TopoJSON} from '../src/ol/format.js';\r\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\r\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\r\nimport {createXYZ} from '../src/ol/tilegrid.js';\r\n\r\n// Define a custom MVT format as ol/format/MVT requires an extent\r\n\r\nconst tileCoordZ = document.getElementById('tileCoordZ');\r\nconst tileCoordX = document.getElementById('tileCoordX');\r\nconst tileCoordY = document.getElementById('tileCoordY');\r\n\r\nclass customMVT extends MVT {\r\n  constructor() {\r\n    super({featureClass: Feature});\r\n  }\r\n  readFeatures(source, options) {\r\n    options.extent = createXYZ().getTileCoordExtent([\r\n      parseInt(tileCoordZ.value),\r\n      parseInt(tileCoordX.value),\r\n      parseInt(tileCoordY.value),\r\n    ]);\r\n    return super.readFeatures(source, options);\r\n  }\r\n}\r\n\r\n// Set up map with Drag and Drop interaction\r\n\r\nconst dragAndDropInteraction = new DragAndDrop({\r\n  formatConstructors: [customMVT, GPX, GeoJSON, IGC, KML, TopoJSON],\r\n});\r\n\r\nconst map = new Map({\r\n  interactions: defaultInteractions().extend([dragAndDropInteraction]),\r\n  layers: [\r\n    new TileLayer({\r\n      source: new OSM(),\r\n    }),\r\n  ],\r\n  target: 'map',\r\n  view: new View({\r\n    center: [0, 0],\r\n    zoom: 2,\r\n  }),\r\n});\r\n\r\ndragAndDropInteraction.on('addfeatures', function (event) {\r\n  const vectorSource = new VectorSource({\r\n    features: event.features,\r\n  });\r\n  map.addLayer(\r\n    new VectorLayer({\r\n      source: vectorSource,\r\n    })\r\n  );\r\n  map.getView().fit(vectorSource.getExtent());\r\n});\r\n\r\nconst displayFeatureInfo = function (pixel) {\r\n  const features = [];\r\n  map.forEachFeatureAtPixel(pixel, function (feature) {\r\n    features.push(feature);\r\n  });\r\n  if (features.length > 0) {\r\n    const info = [];\r\n    let i, ii;\r\n    for (i = 0, ii = features.length; i < ii; ++i) {\r\n      const description =\r\n        features[i].get('name') ||\r\n        features[i].get('_name') ||\r\n        features[i].get('layer');\r\n      if (description) {\r\n        info.push(description);\r\n      }\r\n    }\r\n    document.getElementById('info').innerHTML = info.join(', ') || '&nbsp';\r\n  } else {\r\n    document.getElementById('info').innerHTML = '&nbsp;';\r\n  }\r\n};\r\n\r\nmap.on('pointermove', function (evt) {\r\n  if (evt.dragging) {\r\n    return;\r\n  }\r\n  const pixel = map.getEventPixel(evt.originalEvent);\r\n  displayFeatureInfo(pixel);\r\n});\r\n\r\nmap.on('click', function (evt) {\r\n  displayFeatureInfo(evt.pixel);\r\n});\r\n\r\n// Sample data download\r\n\r\nconst link = document.getElementById('download');\r\n\r\nfunction download(fullpath, filename) {\r\n  fetch(fullpath)\r\n    .then(function (response) {\r\n      return response.blob();\r\n    })\r\n    .then(function (blob) {\r\n      if (navigator.msSaveBlob) {\r\n        // link download attribuute does not work on MS browsers\r\n        navigator.msSaveBlob(blob, filename);\r\n      } else {\r\n        link.href = URL.createObjectURL(blob);\r\n        link.download = filename;\r\n        link.click();\r\n      }\r\n    });\r\n}\r\n\r\ndocument.getElementById('download-mvt').addEventListener('click', function () {\r\n  const fullpath =\r\n    'https://basemaps.arcgis.com/v1/arcgis/rest/services/World_Basemap/VectorTileServer/tile/' +\r\n    tileCoordZ.value +\r\n    '/' +\r\n    tileCoordY.value +\r\n    '/' +\r\n    tileCoordX.value +\r\n    '.pbf';\r\n  const filename =\r\n    tileCoordZ.value + '-' + tileCoordX.value + '-' + tileCoordY.value + '.mvt';\r\n  download(fullpath, filename);\r\n});\r\n"],"sourceRoot":""}