{"version":3,"sources":["webpack:///./geojson-vt.js"],"names":["replacer","key","value","geometry","let","type","rawType","length","tags","map","layers","source","target","view","center","zoom","fetch","then","response","json","const","tileIndex","geojsonvt","extent","debug","format","dataProjection","code","units","vectorSource","tileUrlFunction","tileCoord","JSON","stringify","tileLoadFunction","tile","url","parse","data","getTile","geojson","features","readFeatures","getTileGrid","getTileCoordExtent","featureProjection","getView","getProjection","setFeatures","vectorLayer","addLayer"],"mappings":"2FAAA,uEAYMA,EAAW,SAAUC,EAAKC,GAC9B,GAAIA,EAAMC,SAAU,CAClBC,IAAIC,EACEC,EAAUJ,EAAMG,KAClBF,EAAWD,EAAMC,SAsBrB,OApBgB,IAAZG,GACFD,EAAO,aACgB,GAAnBF,EAASI,SACXF,EAAO,QACPF,EAAWA,EAAS,KAED,IAAZG,GACTD,EAAO,kBACgB,GAAnBF,EAASI,SACXF,EAAO,aACPF,EAAWA,EAAS,KAED,IAAZG,IACTD,EAAO,UACHF,EAASI,OAAS,IACpBF,EAAO,eACPF,EAAW,CAACA,KAIT,CACL,KAAQ,UACR,SAAY,CACV,KAAQE,EACR,YAAeF,GAEjB,WAAcD,EAAMM,MAGtB,OAAON,GAILO,EAAM,IAAI,IAAI,CAClBC,OAAQ,CACN,IAAI,IAAU,CACZC,OAAQ,IAAI,OAGhBC,OAAQ,MACRC,KAAM,IAAI,IAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAKVC,MADY,kCAETC,MAAK,SAAUC,GACd,OAAOA,EAASC,UAEjBF,MAAK,SAAUE,GACdC,IAAMC,EAAYC,UAAUH,EAAM,CAChCI,OAAQ,KACRC,MAAO,IAEHC,EAAS,IAAI,IAAQ,CAEzBC,eAAgB,IAAI,IAAW,CAC7BC,KAAM,cACNC,MAAO,cACPL,OAAQ,CAAC,EAAG,EAAG,KAAM,UAGnBM,EAAe,IAAI,IAAiB,CACxCC,gBAAiB,SAAUC,GAEzB,OAAOC,KAAKC,UAAUF,IAExBG,iBAAkB,SAAUC,EAAMC,GAChChB,IAAMW,EAAYC,KAAKK,MAAMD,GACvBE,EAAOjB,EAAUkB,QACrBR,EAAU,GACVA,EAAU,GACVA,EAAU,IAENS,EAAUR,KAAKC,UACnB,CACE5B,KAAM,oBACNoC,SAAUH,EAAOA,EAAKG,SAAW,IAEnCzC,GAEIyC,EAAWhB,EAAOiB,aAAaF,EAAS,CAC5CjB,OAAQM,EAAac,cAAcC,mBAAmBb,GACtDc,kBAAmBpC,EAAIqC,UAAUC,kBAEnCZ,EAAKa,YAAYP,MAGfQ,EAAc,IAAI,IAAgB,CACtCtC,OAAQkB,IAEVpB,EAAIyC,SAASD,Q","file":"geojson-vt.js","sourcesContent":["import GeoJSON from '../src/ol/format/GeoJSON.js';\r\nimport Map from '../src/ol/Map.js';\r\nimport OSM from '../src/ol/source/OSM.js';\r\nimport Projection from '../src/ol/proj/Projection.js';\r\nimport VectorTileSource from '../src/ol/source/VectorTile.js';\r\nimport View from '../src/ol/View.js';\r\nimport {\r\n  Tile as TileLayer,\r\n  VectorTile as VectorTileLayer,\r\n} from '../src/ol/layer.js';\r\n\r\n// Converts geojson-vt data to GeoJSON\r\nconst replacer = function (key, value) {\r\n  if (value.geometry) {\r\n    let type;\r\n    const rawType = value.type;\r\n    let geometry = value.geometry;\r\n\r\n    if (rawType === 1) {\r\n      type = 'MultiPoint';\r\n      if (geometry.length == 1) {\r\n        type = 'Point';\r\n        geometry = geometry[0];\r\n      }\r\n    } else if (rawType === 2) {\r\n      type = 'MultiLineString';\r\n      if (geometry.length == 1) {\r\n        type = 'LineString';\r\n        geometry = geometry[0];\r\n      }\r\n    } else if (rawType === 3) {\r\n      type = 'Polygon';\r\n      if (geometry.length > 1) {\r\n        type = 'MultiPolygon';\r\n        geometry = [geometry];\r\n      }\r\n    }\r\n\r\n    return {\r\n      'type': 'Feature',\r\n      'geometry': {\r\n        'type': type,\r\n        'coordinates': geometry,\r\n      },\r\n      'properties': value.tags,\r\n    };\r\n  } else {\r\n    return value;\r\n  }\r\n};\r\n\r\nconst map = new Map({\r\n  layers: [\r\n    new TileLayer({\r\n      source: new OSM(),\r\n    }),\r\n  ],\r\n  target: 'map',\r\n  view: new View({\r\n    center: [0, 0],\r\n    zoom: 2,\r\n  }),\r\n});\r\n\r\nconst url = 'data/geojson/countries.geojson';\r\nfetch(url)\r\n  .then(function (response) {\r\n    return response.json();\r\n  })\r\n  .then(function (json) {\r\n    const tileIndex = geojsonvt(json, {\r\n      extent: 4096,\r\n      debug: 1,\r\n    });\r\n    const format = new GeoJSON({\r\n      // Data returned from geojson-vt is in tile pixel units\r\n      dataProjection: new Projection({\r\n        code: 'TILE_PIXELS',\r\n        units: 'tile-pixels',\r\n        extent: [0, 0, 4096, 4096],\r\n      }),\r\n    });\r\n    const vectorSource = new VectorTileSource({\r\n      tileUrlFunction: function (tileCoord) {\r\n        // Use the tile coordinate as a pseudo URL for caching purposes\r\n        return JSON.stringify(tileCoord);\r\n      },\r\n      tileLoadFunction: function (tile, url) {\r\n        const tileCoord = JSON.parse(url);\r\n        const data = tileIndex.getTile(\r\n          tileCoord[0],\r\n          tileCoord[1],\r\n          tileCoord[2]\r\n        );\r\n        const geojson = JSON.stringify(\r\n          {\r\n            type: 'FeatureCollection',\r\n            features: data ? data.features : [],\r\n          },\r\n          replacer\r\n        );\r\n        const features = format.readFeatures(geojson, {\r\n          extent: vectorSource.getTileGrid().getTileCoordExtent(tileCoord),\r\n          featureProjection: map.getView().getProjection(),\r\n        });\r\n        tile.setFeatures(features);\r\n      },\r\n    });\r\n    const vectorLayer = new VectorTileLayer({\r\n      source: vectorSource,\r\n    });\r\n    map.addLayer(vectorLayer);\r\n  });\r\n"],"sourceRoot":""}