{"version":3,"sources":["webpack:///./permalink.js"],"names":["zoom","center","rotation","window","location","hash","const","parts","replace","split","length","parseFloat","map","layers","source","target","view","shouldUpdate","getView","on","getCenter","getZoom","toFixed","getRotation","state","history","pushState","addEventListener","event","setCenter","setZoom","setRotation"],"mappings":"4FAAA,uCAMIA,EAAO,EACPC,EAAS,CAAC,EAAG,GACbC,EAAW,EAEf,GAA6B,KAAzBC,OAAOC,SAASC,KAAa,CAE/BC,IACMC,EADOJ,OAAOC,SAASC,KAAKG,QAAQ,QAAS,IAChCC,MAAM,KACJ,IAAjBF,EAAMG,SACRV,EAAOW,WAAWJ,EAAM,IACxBN,EAAS,CAACU,WAAWJ,EAAM,IAAKI,WAAWJ,EAAM,KACjDL,EAAWS,WAAWJ,EAAM,KAIhCD,IAAMM,EAAM,IAAI,IAAI,CAClBC,OAAQ,CACN,IAAI,IAAU,CACZC,OAAQ,IAAI,OAGhBC,OAAQ,MACRC,KAAM,IAAI,IAAK,CACbf,OAAQA,EACRD,KAAMA,EACNE,SAAUA,MAIVe,GAAe,EACbD,EAAOJ,EAAIM,UA0BjBN,EAAIO,GAAG,WAzBiB,WACtB,GAAKF,EAAL,CAMAX,IAAML,EAASe,EAAKI,YACdf,EACJ,QACAW,EAAKK,UAAUC,QAAQ,GACvB,IACArB,EAAO,GAAGqB,QAAQ,GAClB,IACArB,EAAO,GAAGqB,QAAQ,GAClB,IACAN,EAAKO,cACDC,EAAQ,CACZxB,KAAMgB,EAAKK,UACXpB,OAAQe,EAAKI,YACblB,SAAUc,EAAKO,eAEjBpB,OAAOsB,QAAQC,UAAUF,EAAO,MAAOnB,QAnBrCY,GAAe,KA0BnBd,OAAOwB,iBAAiB,YAAY,SAAUC,GACxB,OAAhBA,EAAMJ,QAGVZ,EAAIM,UAAUW,UAAUD,EAAMJ,MAAMvB,QACpCW,EAAIM,UAAUY,QAAQF,EAAMJ,MAAMxB,MAClCY,EAAIM,UAAUa,YAAYH,EAAMJ,MAAMtB,UACtCe,GAAe,Q","file":"permalink.js","sourcesContent":["import Map from '../src/ol/Map.js';\r\nimport OSM from '../src/ol/source/OSM.js';\r\nimport TileLayer from '../src/ol/layer/Tile.js';\r\nimport View from '../src/ol/View.js';\r\n\r\n// default zoom, center and rotation\r\nlet zoom = 2;\r\nlet center = [0, 0];\r\nlet rotation = 0;\r\n\r\nif (window.location.hash !== '') {\r\n  // try to restore center, zoom-level and rotation from the URL\r\n  const hash = window.location.hash.replace('#map=', '');\r\n  const parts = hash.split('/');\r\n  if (parts.length === 4) {\r\n    zoom = parseFloat(parts[0]);\r\n    center = [parseFloat(parts[1]), parseFloat(parts[2])];\r\n    rotation = parseFloat(parts[3]);\r\n  }\r\n}\r\n\r\nconst map = new Map({\r\n  layers: [\r\n    new TileLayer({\r\n      source: new OSM(),\r\n    }),\r\n  ],\r\n  target: 'map',\r\n  view: new View({\r\n    center: center,\r\n    zoom: zoom,\r\n    rotation: rotation,\r\n  }),\r\n});\r\n\r\nlet shouldUpdate = true;\r\nconst view = map.getView();\r\nconst updatePermalink = function () {\r\n  if (!shouldUpdate) {\r\n    // do not update the URL when the view was changed in the 'popstate' handler\r\n    shouldUpdate = true;\r\n    return;\r\n  }\r\n\r\n  const center = view.getCenter();\r\n  const hash =\r\n    '#map=' +\r\n    view.getZoom().toFixed(2) +\r\n    '/' +\r\n    center[0].toFixed(2) +\r\n    '/' +\r\n    center[1].toFixed(2) +\r\n    '/' +\r\n    view.getRotation();\r\n  const state = {\r\n    zoom: view.getZoom(),\r\n    center: view.getCenter(),\r\n    rotation: view.getRotation(),\r\n  };\r\n  window.history.pushState(state, 'map', hash);\r\n};\r\n\r\nmap.on('moveend', updatePermalink);\r\n\r\n// restore the view state when navigating through the history, see\r\n// https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate\r\nwindow.addEventListener('popstate', function (event) {\r\n  if (event.state === null) {\r\n    return;\r\n  }\r\n  map.getView().setCenter(event.state.center);\r\n  map.getView().setZoom(event.state.zoom);\r\n  map.getView().setRotation(event.state.rotation);\r\n  shouldUpdate = false;\r\n});\r\n"],"sourceRoot":""}