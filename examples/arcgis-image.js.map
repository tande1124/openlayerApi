{"version":3,"sources":["webpack:///../src/ol/source/ImageArcGISRest.js","webpack:///./arcgis-image.js"],"names":["opt_options","const","options","super","attributions","imageSmoothing","projection","resolutions","this","crossOrigin_","undefined","crossOrigin","hidpi_","hidpi","url_","url","imageLoadFunction_","imageLoadFunction","params_","params","image_","imageSize_","renderedRevision_","ratio_","ratio","getParams","getImageInternal","extent","resolution","pixelRatio","findNearestResolution","image","getRevision","getResolution","getPixelRatio","getExtent","centerX","slice","centerY","halfWidth","halfHeight","imageResolution","width","Math","ceil","height","getRequestUrl_","addEventListener","EventType","CHANGE","handleImageChange","bind","getImageLoadFunction","size","srid","getCode","split","pop","join","round","modifiedUrl","replace","getUrl","setImageLoadFunction","changed","setUrl","updateParams","Image","Tile","source","OSM","Map","layers","target","view","View","center","zoom"],"mappings":"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","file":"arcgis-image.js","sourcesContent":["/**\r\n * @module ol/source/ImageArcGISRest\r\n */\r\n\r\nimport EventType from '../events/EventType.js';\r\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\r\nimport ImageWrapper from '../Image.js';\r\nimport {appendParams} from '../uri.js';\r\nimport {assert} from '../asserts.js';\r\nimport {assign} from '../obj.js';\r\nimport {containsExtent, getHeight, getWidth} from '../extent.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting the image from\r\n * the remote server.\r\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given\r\n * a URL.\r\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\r\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service\r\n * defaults will be used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is\r\n * `IMAGE` by default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`, and `IMAGESR`\r\n * will be set dynamically. Set `LAYERS` to override the default service layer visibility. See\r\n * {@link http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#/Export_Map/02r3000000v7000000/}\r\n * for further reference.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\r\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport,\r\n * `2` means twice the size of the map viewport, and so on.\r\n * @property {Array<number>} [resolutions] Resolutions. If specified, requests will be made for\r\n * these resolutions only.\r\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The url\r\n * should include /MapServer or /ImageServer.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Source for data from ArcGIS Rest services providing single, untiled images.\r\n * Useful when underlying map service has labels.\r\n *\r\n * If underlying map service is not using labels,\r\n * take advantage of ol image caching and use\r\n * {@link module:ol/source/TileArcGISRest} data source.\r\n *\r\n * @fires module:ol/source/Image.ImageSourceEvent\r\n * @api\r\n */\r\nclass ImageArcGISRest extends ImageSource {\r\n  /**\r\n   * @param {Options=} opt_options Image ArcGIS Rest Options.\r\n   */\r\n  constructor(opt_options) {\r\n    const options = opt_options ? opt_options : {};\r\n\r\n    super({\r\n      attributions: options.attributions,\r\n      imageSmoothing: options.imageSmoothing,\r\n      projection: options.projection,\r\n      resolutions: options.resolutions,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {?string}\r\n     */\r\n    this.crossOrigin_ =\r\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|undefined}\r\n     */\r\n    this.url_ = options.url;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../Image.js\").LoadFunction}\r\n     */\r\n    this.imageLoadFunction_ =\r\n      options.imageLoadFunction !== undefined\r\n        ? options.imageLoadFunction\r\n        : defaultImageLoadFunction;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object}\r\n     */\r\n    this.params_ = options.params || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../Image.js\").default}\r\n     */\r\n    this.image_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.imageSize_ = [0, 0];\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedRevision_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\r\n  }\r\n\r\n  /**\r\n   * Get the user-provided params, i.e. those passed to the constructor through\r\n   * the \"params\" option, and possibly updated using the updateParams method.\r\n   * @return {Object} Params.\r\n   * @api\r\n   */\r\n  getParams() {\r\n    return this.params_;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {import(\"../Image.js\").default} Single image.\r\n   */\r\n  getImageInternal(extent, resolution, pixelRatio, projection) {\r\n    if (this.url_ === undefined) {\r\n      return null;\r\n    }\r\n\r\n    resolution = this.findNearestResolution(resolution);\r\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\r\n\r\n    const image = this.image_;\r\n    if (\r\n      image &&\r\n      this.renderedRevision_ == this.getRevision() &&\r\n      image.getResolution() == resolution &&\r\n      image.getPixelRatio() == pixelRatio &&\r\n      containsExtent(image.getExtent(), extent)\r\n    ) {\r\n      return image;\r\n    }\r\n\r\n    const params = {\r\n      'F': 'image',\r\n      'FORMAT': 'PNG32',\r\n      'TRANSPARENT': true,\r\n    };\r\n    assign(params, this.params_);\r\n\r\n    extent = extent.slice();\r\n    const centerX = (extent[0] + extent[2]) / 2;\r\n    const centerY = (extent[1] + extent[3]) / 2;\r\n    if (this.ratio_ != 1) {\r\n      const halfWidth = (this.ratio_ * getWidth(extent)) / 2;\r\n      const halfHeight = (this.ratio_ * getHeight(extent)) / 2;\r\n      extent[0] = centerX - halfWidth;\r\n      extent[1] = centerY - halfHeight;\r\n      extent[2] = centerX + halfWidth;\r\n      extent[3] = centerY + halfHeight;\r\n    }\r\n\r\n    const imageResolution = resolution / pixelRatio;\r\n\r\n    // Compute an integer width and height.\r\n    const width = Math.ceil(getWidth(extent) / imageResolution);\r\n    const height = Math.ceil(getHeight(extent) / imageResolution);\r\n\r\n    // Modify the extent to match the integer width and height.\r\n    extent[0] = centerX - (imageResolution * width) / 2;\r\n    extent[2] = centerX + (imageResolution * width) / 2;\r\n    extent[1] = centerY - (imageResolution * height) / 2;\r\n    extent[3] = centerY + (imageResolution * height) / 2;\r\n\r\n    this.imageSize_[0] = width;\r\n    this.imageSize_[1] = height;\r\n\r\n    const url = this.getRequestUrl_(\r\n      extent,\r\n      this.imageSize_,\r\n      pixelRatio,\r\n      projection,\r\n      params\r\n    );\r\n\r\n    this.image_ = new ImageWrapper(\r\n      extent,\r\n      resolution,\r\n      pixelRatio,\r\n      url,\r\n      this.crossOrigin_,\r\n      this.imageLoadFunction_\r\n    );\r\n\r\n    this.renderedRevision_ = this.getRevision();\r\n\r\n    this.image_.addEventListener(\r\n      EventType.CHANGE,\r\n      this.handleImageChange.bind(this)\r\n    );\r\n\r\n    return this.image_;\r\n  }\r\n\r\n  /**\r\n   * Return the image load function of the source.\r\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\r\n   * @api\r\n   */\r\n  getImageLoadFunction() {\r\n    return this.imageLoadFunction_;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {import(\"../size.js\").Size} size Size.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @param {Object} params Params.\r\n   * @return {string} Request URL.\r\n   * @private\r\n   */\r\n  getRequestUrl_(extent, size, pixelRatio, projection, params) {\r\n    // ArcGIS Server only wants the numeric portion of the projection ID.\r\n    const srid = projection.getCode().split(':').pop();\r\n\r\n    params['SIZE'] = size[0] + ',' + size[1];\r\n    params['BBOX'] = extent.join(',');\r\n    params['BBOXSR'] = srid;\r\n    params['IMAGESR'] = srid;\r\n    params['DPI'] = Math.round(90 * pixelRatio);\r\n\r\n    const url = this.url_;\r\n\r\n    const modifiedUrl = url\r\n      .replace(/MapServer\\/?$/, 'MapServer/export')\r\n      .replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\r\n    if (modifiedUrl == url) {\r\n      assert(false, 50); // `options.featureTypes` should be an Array\r\n    }\r\n    return appendParams(modifiedUrl, params);\r\n  }\r\n\r\n  /**\r\n   * Return the URL used for this ArcGIS source.\r\n   * @return {string|undefined} URL.\r\n   * @api\r\n   */\r\n  getUrl() {\r\n    return this.url_;\r\n  }\r\n\r\n  /**\r\n   * Set the image load function of the source.\r\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\r\n   * @api\r\n   */\r\n  setImageLoadFunction(imageLoadFunction) {\r\n    this.image_ = null;\r\n    this.imageLoadFunction_ = imageLoadFunction;\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the URL to use for requests.\r\n   * @param {string|undefined} url URL.\r\n   * @api\r\n   */\r\n  setUrl(url) {\r\n    if (url != this.url_) {\r\n      this.url_ = url;\r\n      this.image_ = null;\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the user-provided params.\r\n   * @param {Object} params Params.\r\n   * @api\r\n   */\r\n  updateParams(params) {\r\n    assign(this.params_, params);\r\n    this.image_ = null;\r\n    this.changed();\r\n  }\r\n}\r\n\r\nexport default ImageArcGISRest;\r\n","import Map from '../src/ol/Map.js';\r\nimport View from '../src/ol/View.js';\r\nimport {ImageArcGISRest, OSM} from '../src/ol/source.js';\r\nimport {Image as ImageLayer, Tile as TileLayer} from '../src/ol/layer.js';\r\n\r\nconst url =\r\n  'https://sampleserver1.arcgisonline.com/ArcGIS/rest/services/' +\r\n  'Specialty/ESRI_StateCityHighway_USA/MapServer';\r\n\r\nconst layers = [\r\n  new TileLayer({\r\n    source: new OSM(),\r\n  }),\r\n  new ImageLayer({\r\n    source: new ImageArcGISRest({\r\n      ratio: 1,\r\n      params: {},\r\n      url: url,\r\n    }),\r\n  }),\r\n];\r\nconst map = new Map({\r\n  layers: layers,\r\n  target: 'map',\r\n  view: new View({\r\n    center: [-10997148, 4569099],\r\n    zoom: 4,\r\n  }),\r\n});\r\n"],"sourceRoot":""}