{"version":3,"sources":["webpack:///./igc.js"],"names":["colors","styleCache","vectorSource","igcUrls","get","url","callback","const","client","XMLHttpRequest","open","onload","responseText","send","igcFormat","i","length","data","features","readFeatures","featureProjection","addFeatures","time","start","Infinity","stop","duration","on","event","geometry","feature","getGeometry","Math","min","getFirstCoordinate","max","getLastCoordinate","vectorLayer","source","style","color","stroke","width","map","layers","attributions","target","view","center","zoom","point","line","displaySnap","coordinate","closestFeature","getClosestFeatureToCoordinate","info","document","getElementById","innerHTML","closestPoint","getClosestPoint","setCoordinates","date","Date","toUTCString","coordinates","render","evt","dragging","getEventCoordinate","originalEvent","image","radius","fill","vectorContext","setStyle","drawGeometry","featureOverlay","addEventListener","value","parseInt","this","m","forEachFeature","getCoordinateAtM","highlight","undefined","set","getSource","addFeature"],"mappings":"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","file":"igc.js","sourcesContent":["import Feature from '../src/ol/Feature.js';\r\nimport IGC from '../src/ol/format/IGC.js';\r\nimport Map from '../src/ol/Map.js';\r\nimport OSM, {ATTRIBUTION} from '../src/ol/source/OSM.js';\r\nimport VectorSource from '../src/ol/source/Vector.js';\r\nimport View from '../src/ol/View.js';\r\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\r\nimport {LineString, Point} from '../src/ol/geom.js';\r\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\r\nimport {getVectorContext} from '../src/ol/render.js';\r\n\r\nconst colors = {\r\n  'Clement Latour': 'rgba(0, 0, 255, 0.7)',\r\n  'Damien de Baesnt': 'rgba(0, 215, 255, 0.7)',\r\n  'Sylvain Dhonneur': 'rgba(0, 165, 255, 0.7)',\r\n  'Tom Payne': 'rgba(0, 255, 255, 0.7)',\r\n  'Ulrich Prinz': 'rgba(0, 215, 255, 0.7)',\r\n};\r\n\r\nconst styleCache = {};\r\nconst styleFunction = function (feature) {\r\n  const color = colors[feature.get('PLT')];\r\n  let style = styleCache[color];\r\n  if (!style) {\r\n    style = new Style({\r\n      stroke: new Stroke({\r\n        color: color,\r\n        width: 3,\r\n      }),\r\n    });\r\n    styleCache[color] = style;\r\n  }\r\n  return style;\r\n};\r\n\r\nconst vectorSource = new VectorSource();\r\n\r\nconst igcUrls = [\r\n  'data/igc/Clement-Latour.igc',\r\n  'data/igc/Damien-de-Baenst.igc',\r\n  'data/igc/Sylvain-Dhonneur.igc',\r\n  'data/igc/Tom-Payne.igc',\r\n  'data/igc/Ulrich-Prinz.igc',\r\n];\r\n\r\nfunction get(url, callback) {\r\n  const client = new XMLHttpRequest();\r\n  client.open('GET', url);\r\n  client.onload = function () {\r\n    callback(client.responseText);\r\n  };\r\n  client.send();\r\n}\r\n\r\nconst igcFormat = new IGC();\r\nfor (let i = 0; i < igcUrls.length; ++i) {\r\n  get(igcUrls[i], function (data) {\r\n    const features = igcFormat.readFeatures(data, {\r\n      featureProjection: 'EPSG:3857',\r\n    });\r\n    vectorSource.addFeatures(features);\r\n  });\r\n}\r\n\r\nconst time = {\r\n  start: Infinity,\r\n  stop: -Infinity,\r\n  duration: 0,\r\n};\r\nvectorSource.on('addfeature', function (event) {\r\n  const geometry = event.feature.getGeometry();\r\n  time.start = Math.min(time.start, geometry.getFirstCoordinate()[2]);\r\n  time.stop = Math.max(time.stop, geometry.getLastCoordinate()[2]);\r\n  time.duration = time.stop - time.start;\r\n});\r\n\r\nconst vectorLayer = new VectorLayer({\r\n  source: vectorSource,\r\n  style: styleFunction,\r\n});\r\n\r\nconst map = new Map({\r\n  layers: [\r\n    new TileLayer({\r\n      source: new OSM({\r\n        attributions: [\r\n          'All maps Â© <a href=\"https://www.opencyclemap.org/\">OpenCycleMap</a>',\r\n          ATTRIBUTION,\r\n        ],\r\n        url:\r\n          'https://{a-c}.tile.thunderforest.com/cycle/{z}/{x}/{y}.png' +\r\n          '?apikey=0e6fc415256d4fbb9b5166a718591d71',\r\n      }),\r\n    }),\r\n    vectorLayer,\r\n  ],\r\n  target: 'map',\r\n  view: new View({\r\n    center: [703365.7089403362, 5714629.865071137],\r\n    zoom: 9,\r\n  }),\r\n});\r\n\r\nlet point = null;\r\nlet line = null;\r\nconst displaySnap = function (coordinate) {\r\n  const closestFeature = vectorSource.getClosestFeatureToCoordinate(coordinate);\r\n  const info = document.getElementById('info');\r\n  if (closestFeature === null) {\r\n    point = null;\r\n    line = null;\r\n    info.innerHTML = '&nbsp;';\r\n  } else {\r\n    const geometry = closestFeature.getGeometry();\r\n    const closestPoint = geometry.getClosestPoint(coordinate);\r\n    if (point === null) {\r\n      point = new Point(closestPoint);\r\n    } else {\r\n      point.setCoordinates(closestPoint);\r\n    }\r\n    const date = new Date(closestPoint[2] * 1000);\r\n    info.innerHTML =\r\n      closestFeature.get('PLT') + ' (' + date.toUTCString() + ')';\r\n    const coordinates = [coordinate, [closestPoint[0], closestPoint[1]]];\r\n    if (line === null) {\r\n      line = new LineString(coordinates);\r\n    } else {\r\n      line.setCoordinates(coordinates);\r\n    }\r\n  }\r\n  map.render();\r\n};\r\n\r\nmap.on('pointermove', function (evt) {\r\n  if (evt.dragging) {\r\n    return;\r\n  }\r\n  const coordinate = map.getEventCoordinate(evt.originalEvent);\r\n  displaySnap(coordinate);\r\n});\r\n\r\nmap.on('click', function (evt) {\r\n  displaySnap(evt.coordinate);\r\n});\r\n\r\nconst stroke = new Stroke({\r\n  color: 'rgba(255,0,0,0.9)',\r\n  width: 1,\r\n});\r\nconst style = new Style({\r\n  stroke: stroke,\r\n  image: new CircleStyle({\r\n    radius: 5,\r\n    fill: null,\r\n    stroke: stroke,\r\n  }),\r\n});\r\nvectorLayer.on('postrender', function (evt) {\r\n  const vectorContext = getVectorContext(evt);\r\n  vectorContext.setStyle(style);\r\n  if (point !== null) {\r\n    vectorContext.drawGeometry(point);\r\n  }\r\n  if (line !== null) {\r\n    vectorContext.drawGeometry(line);\r\n  }\r\n});\r\n\r\nconst featureOverlay = new VectorLayer({\r\n  source: new VectorSource(),\r\n  map: map,\r\n  style: new Style({\r\n    image: new CircleStyle({\r\n      radius: 5,\r\n      fill: new Fill({\r\n        color: 'rgba(255,0,0,0.9)',\r\n      }),\r\n    }),\r\n  }),\r\n});\r\n\r\ndocument.getElementById('time').addEventListener('input', function () {\r\n  const value = parseInt(this.value, 10) / 100;\r\n  const m = time.start + time.duration * value;\r\n  vectorSource.forEachFeature(function (feature) {\r\n    const geometry = /** @type {import(\"../src/ol/geom/LineString.js\").default} */ (feature.getGeometry());\r\n    const coordinate = geometry.getCoordinateAtM(m, true);\r\n    let highlight = feature.get('highlight');\r\n    if (highlight === undefined) {\r\n      highlight = new Feature(new Point(coordinate));\r\n      feature.set('highlight', highlight);\r\n      featureOverlay.getSource().addFeature(highlight);\r\n    } else {\r\n      highlight.getGeometry().setCoordinates(coordinate);\r\n    }\r\n  });\r\n  map.render();\r\n});\r\n"],"sourceRoot":""}