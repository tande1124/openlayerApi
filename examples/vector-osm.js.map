{"version":3,"sources":["webpack:///../src/ol/format/OSMXML.js","webpack:///./vector-osm.js"],"names":["NAMESPACE_URIS","WAY_PARSERS","node","objectStack","length","ndrefs","push","getAttribute","readTag","PARSERS","const","options","state","id","coordinates","parseFloat","nodes","values","tags","NODE_PARSERS","geometry","Point","feature","Feature","setId","setProperties","features","ways","super","this","dataProjection","readFeaturesFromNode","opt_options","getReadOptions","localName","j","flatCoordinates","i","ii","point","let","Polygon","GeometryLayout","XY","LineString","map","styles","Style","stroke","Stroke","color","width","fill","Fill","zIndex","image","Circle","radius","vectorSource","Vector","format","loader","extent","resolution","projection","epsg4326Extent","client","XMLHttpRequest","open","addEventListener","readFeatures","responseText","featureProjection","getView","getProjection","addFeatures","query","Math","max","min","send","strategy","vector","source","style","key","value","get","undefined","regexp","RegExp","test","raster","Tile","XYZ","attributions","url","maxZoom","Map","layers","target","document","getElementById","view","View","center","zoom"],"mappings":"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","file":"vector-osm.js","sourcesContent":["/**\r\n * @module ol/format/OSMXML\r\n */\r\n// FIXME add typedef for stack state objects\r\nimport Feature from '../Feature.js';\r\nimport GeometryLayout from '../geom/GeometryLayout.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport Point from '../geom/Point.js';\r\nimport Polygon from '../geom/Polygon.js';\r\nimport XMLFeature from './XMLFeature.js';\r\nimport {extend} from '../array.js';\r\nimport {get as getProjection} from '../proj.js';\r\nimport {isEmpty} from '../obj.js';\r\nimport {makeStructureNS, pushParseAndPop} from '../xml.js';\r\nimport {transformGeometryWithOptions} from './Feature.js';\r\n\r\n/**\r\n * @const\r\n * @type {Array<null>}\r\n */\r\nconst NAMESPACE_URIS = [null];\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst WAY_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'nd': readNd,\r\n  'tag': readTag,\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'node': readNode,\r\n  'way': readWay,\r\n});\r\n\r\n/**\r\n * @classdesc\r\n * Feature format for reading data in the\r\n * [OSMXML format](http://wiki.openstreetmap.org/wiki/OSM_XML).\r\n *\r\n * @api\r\n */\r\nclass OSMXML extends XMLFeature {\r\n  constructor() {\r\n    super();\r\n\r\n    /**\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     */\r\n    this.dataProjection = getProjection('EPSG:4326');\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @param {Element} node Node.\r\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\r\n   * @return {Array<import(\"../Feature.js\").default>} Features.\r\n   */\r\n  readFeaturesFromNode(node, opt_options) {\r\n    const options = this.getReadOptions(node, opt_options);\r\n    if (node.localName == 'osm') {\r\n      const state = pushParseAndPop(\r\n        {\r\n          nodes: {},\r\n          ways: [],\r\n          features: [],\r\n        },\r\n        PARSERS,\r\n        node,\r\n        [options]\r\n      );\r\n      // parse nodes in ways\r\n      for (let j = 0; j < state.ways.length; j++) {\r\n        const values = /** @type {Object} */ (state.ways[j]);\r\n        /** @type {Array<number>} */\r\n        const flatCoordinates = [];\r\n        for (let i = 0, ii = values.ndrefs.length; i < ii; i++) {\r\n          const point = state.nodes[values.ndrefs[i]];\r\n          extend(flatCoordinates, point);\r\n        }\r\n        let geometry;\r\n        if (values.ndrefs[0] == values.ndrefs[values.ndrefs.length - 1]) {\r\n          // closed way\r\n          geometry = new Polygon(flatCoordinates, GeometryLayout.XY, [\r\n            flatCoordinates.length,\r\n          ]);\r\n        } else {\r\n          geometry = new LineString(flatCoordinates, GeometryLayout.XY);\r\n        }\r\n        transformGeometryWithOptions(geometry, false, options);\r\n        const feature = new Feature(geometry);\r\n        feature.setId(values.id);\r\n        feature.setProperties(values.tags, true);\r\n        state.features.push(feature);\r\n      }\r\n      if (state.features) {\r\n        return state.features;\r\n      }\r\n    }\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst NODE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'tag': readTag,\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction readNode(node, objectStack) {\r\n  const options = /** @type {import(\"./Feature.js\").ReadOptions} */ (objectStack[0]);\r\n  const state = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  const id = node.getAttribute('id');\r\n  /** @type {import(\"../coordinate.js\").Coordinate} */\r\n  const coordinates = [\r\n    parseFloat(node.getAttribute('lon')),\r\n    parseFloat(node.getAttribute('lat')),\r\n  ];\r\n  state.nodes[id] = coordinates;\r\n\r\n  const values = pushParseAndPop(\r\n    {\r\n      tags: {},\r\n    },\r\n    NODE_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  if (!isEmpty(values.tags)) {\r\n    const geometry = new Point(coordinates);\r\n    transformGeometryWithOptions(geometry, false, options);\r\n    const feature = new Feature(geometry);\r\n    feature.setId(id);\r\n    feature.setProperties(values.tags, true);\r\n    state.features.push(feature);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction readWay(node, objectStack) {\r\n  const id = node.getAttribute('id');\r\n  const values = pushParseAndPop(\r\n    {\r\n      id: id,\r\n      ndrefs: [],\r\n      tags: {},\r\n    },\r\n    WAY_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  const state = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  state.ways.push(values);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction readNd(node, objectStack) {\r\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  values.ndrefs.push(node.getAttribute('ref'));\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction readTag(node, objectStack) {\r\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  values.tags[node.getAttribute('k')] = node.getAttribute('v');\r\n}\r\n\r\nexport default OSMXML;\r\n","import Map from '../src/ol/Map.js';\r\nimport OSMXML from '../src/ol/format/OSMXML.js';\r\nimport VectorSource from '../src/ol/source/Vector.js';\r\nimport View from '../src/ol/View.js';\r\nimport XYZ from '../src/ol/source/XYZ.js';\r\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\r\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\r\nimport {bbox as bboxStrategy} from '../src/ol/loadingstrategy.js';\r\nimport {transformExtent} from '../src/ol/proj.js';\r\n\r\nlet map = null;\r\n\r\nconst styles = {\r\n  'amenity': {\r\n    'parking': new Style({\r\n      stroke: new Stroke({\r\n        color: 'rgba(170, 170, 170, 1.0)',\r\n        width: 1,\r\n      }),\r\n      fill: new Fill({\r\n        color: 'rgba(170, 170, 170, 0.3)',\r\n      }),\r\n    }),\r\n  },\r\n  'building': {\r\n    '.*': new Style({\r\n      zIndex: 100,\r\n      stroke: new Stroke({\r\n        color: 'rgba(246, 99, 79, 1.0)',\r\n        width: 1,\r\n      }),\r\n      fill: new Fill({\r\n        color: 'rgba(246, 99, 79, 0.3)',\r\n      }),\r\n    }),\r\n  },\r\n  'highway': {\r\n    'service': new Style({\r\n      stroke: new Stroke({\r\n        color: 'rgba(255, 255, 255, 1.0)',\r\n        width: 2,\r\n      }),\r\n    }),\r\n    '.*': new Style({\r\n      stroke: new Stroke({\r\n        color: 'rgba(255, 255, 255, 1.0)',\r\n        width: 3,\r\n      }),\r\n    }),\r\n  },\r\n  'landuse': {\r\n    'forest|grass|allotments': new Style({\r\n      stroke: new Stroke({\r\n        color: 'rgba(140, 208, 95, 1.0)',\r\n        width: 1,\r\n      }),\r\n      fill: new Fill({\r\n        color: 'rgba(140, 208, 95, 0.3)',\r\n      }),\r\n    }),\r\n  },\r\n  'natural': {\r\n    'tree': new Style({\r\n      image: new CircleStyle({\r\n        radius: 2,\r\n        fill: new Fill({\r\n          color: 'rgba(140, 208, 95, 1.0)',\r\n        }),\r\n        stroke: null,\r\n      }),\r\n    }),\r\n  },\r\n};\r\n\r\nconst vectorSource = new VectorSource({\r\n  format: new OSMXML(),\r\n  loader: function (extent, resolution, projection) {\r\n    const epsg4326Extent = transformExtent(extent, projection, 'EPSG:4326');\r\n    const client = new XMLHttpRequest();\r\n    client.open('POST', 'https://overpass-api.de/api/interpreter');\r\n    client.addEventListener('load', function () {\r\n      const features = new OSMXML().readFeatures(client.responseText, {\r\n        featureProjection: map.getView().getProjection(),\r\n      });\r\n      vectorSource.addFeatures(features);\r\n    });\r\n    const query =\r\n      '(node(' +\r\n      epsg4326Extent[1] +\r\n      ',' +\r\n      Math.max(epsg4326Extent[0], -180) +\r\n      ',' +\r\n      epsg4326Extent[3] +\r\n      ',' +\r\n      Math.min(epsg4326Extent[2], 180) +\r\n      ');rel(bn)->.foo;way(bn);node(w)->.foo;rel(bw););out meta;';\r\n    client.send(query);\r\n  },\r\n  strategy: bboxStrategy,\r\n});\r\n\r\nconst vector = new VectorLayer({\r\n  source: vectorSource,\r\n  style: function (feature) {\r\n    for (const key in styles) {\r\n      const value = feature.get(key);\r\n      if (value !== undefined) {\r\n        for (const regexp in styles[key]) {\r\n          if (new RegExp(regexp).test(value)) {\r\n            return styles[key][regexp];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  },\r\n});\r\n\r\nconst key = 'get_your_own_D6rA4zTHduk6KOKTXzGB';\r\nconst attributions =\r\n  '<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">&copy; MapTiler</a> ' +\r\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>';\r\n\r\nconst raster = new TileLayer({\r\n  source: new XYZ({\r\n    attributions: attributions,\r\n    url: 'https://api.maptiler.com/tiles/satellite/{z}/{x}/{y}.jpg?key=' + key,\r\n    maxZoom: 20,\r\n  }),\r\n});\r\n\r\nmap = new Map({\r\n  layers: [raster, vector],\r\n  target: document.getElementById('map'),\r\n  view: new View({\r\n    center: [739218, 5906096],\r\n    maxZoom: 19,\r\n    zoom: 17,\r\n  }),\r\n});\r\n"],"sourceRoot":""}