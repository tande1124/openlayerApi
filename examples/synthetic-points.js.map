{"version":3,"sources":["webpack:///./synthetic-points.js"],"names":["features","Array","e","i","Math","random","const","styles","image","radius","fill","color","stroke","width","vectorSource","wrapX","vector","source","style","feature","get","map","layers","target","document","getElementById","view","center","zoom","point","line","displaySnap","coordinate","closestFeature","getClosestFeatureToCoordinate","closestPoint","getGeometry","getClosestPoint","setCoordinates","render","on","evt","dragging","getEventCoordinate","originalEvent","vectorContext","setStyle","drawGeometry","pixel","getEventPixel","hit","hasFeatureAtPixel","getTarget","cursor"],"mappings":"4FAAA,OAYA,IAZA,kGAUMA,EAAW,IAAIC,MADP,KAERC,EAAI,KACDC,EAAI,EAAGA,EAHF,MAGeA,EAC3BH,EAASG,GAAK,IAAI,IAAQ,CACxB,SAAY,IAAI,IAAM,CACpB,EAAID,EAAIE,KAAKC,SAAWH,EACxB,EAAIA,EAAIE,KAAKC,SAAWH,IAE1B,EAAKC,EACL,KAAQA,EAAI,EAAI,GAAK,KAIzBG,IAAMC,EAAS,CACb,GAAM,IAAI,IAAM,CACdC,MAAO,IAAI,IAAY,CACrBC,OAAQ,EACRC,KAAM,IAAI,IAAK,CAACC,MAAO,YACvBC,OAAQ,IAAI,IAAO,CAACD,MAAO,UAAWE,MAAO,QAGjD,GAAM,IAAI,IAAM,CACdL,MAAO,IAAI,IAAY,CACrBC,OAAQ,GACRC,KAAM,IAAI,IAAK,CAACC,MAAO,YACvBC,OAAQ,IAAI,IAAO,CAACD,MAAO,UAAWE,MAAO,SAK7CC,EAAe,IAAI,IAAa,CACpCd,SAAUA,EACVe,OAAO,IAEHC,EAAS,IAAI,IAAY,CAC7BC,OAAQH,EACRI,MAAO,SAAUC,GACf,OAAOZ,EAAOY,EAAQC,IAAI,YAIxBC,EAAM,IAAI,IAAI,CAClBC,OAAQ,CAACN,GACTO,OAAQC,SAASC,eAAe,OAChCC,KAAM,IAAI,IAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAINC,EAAQ,KACRC,EAAO,KACLC,EAAc,SAAUC,GAC5B1B,IAAM2B,EAAiBnB,EAAaoB,8BAA8BF,GAClE,GAAuB,OAAnBC,EACFJ,EAAQ,KACRC,EAAO,SACF,CACLxB,IACM6B,EADWF,EAAeG,cACFC,gBAAgBL,GAChC,OAAVH,EACFA,EAAQ,IAAI,IAAMM,GAElBN,EAAMS,eAAeH,GAEV,OAATL,EACFA,EAAO,IAAI,IAAW,CAACE,EAAYG,IAEnCL,EAAKQ,eAAe,CAACN,EAAYG,IAGrCd,EAAIkB,UAGNlB,EAAImB,GAAG,eAAe,SAAUC,GAC9B,IAAIA,EAAIC,SAAR,CAGApC,IAAM0B,EAAaX,EAAIsB,mBAAmBF,EAAIG,eAC9Cb,EAAYC,OAGdX,EAAImB,GAAG,SAAS,SAAUC,GACxBV,EAAYU,EAAIT,eAGlB1B,IAAMM,EAAS,IAAI,IAAO,CACxBD,MAAO,sBACPE,MAAO,IAEHK,EAAQ,IAAI,IAAM,CACtBN,OAAQA,EACRJ,MAAO,IAAI,IAAY,CACrBC,OAAQ,GACRG,OAAQA,MAIZI,EAAOwB,GAAG,cAAc,SAAUC,GAChCnC,IAAMuC,EAAgB,YAAiBJ,GACvCI,EAAcC,SAAS5B,GACT,OAAVW,GACFgB,EAAcE,aAAalB,GAEhB,OAATC,GACFe,EAAcE,aAAajB,MAI/BT,EAAImB,GAAG,eAAe,SAAUC,GAC9B,IAAIA,EAAIC,SAAR,CAGApC,IAAM0C,EAAQ3B,EAAI4B,cAAcR,EAAIG,eAC9BM,EAAM7B,EAAI8B,kBAAkBH,GAEhC3B,EAAI+B,YAAYlC,MAAMmC,OADpBH,EAC6B,UAEA,S","file":"synthetic-points.js","sourcesContent":["import Feature from '../src/ol/Feature.js';\r\nimport Map from '../src/ol/Map.js';\r\nimport VectorLayer from '../src/ol/layer/Vector.js';\r\nimport VectorSource from '../src/ol/source/Vector.js';\r\nimport View from '../src/ol/View.js';\r\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\r\nimport {LineString, Point} from '../src/ol/geom.js';\r\nimport {getVectorContext} from '../src/ol/render.js';\r\n\r\nconst count = 20000;\r\nconst features = new Array(count);\r\nconst e = 18000000;\r\nfor (let i = 0; i < count; ++i) {\r\n  features[i] = new Feature({\r\n    'geometry': new Point([\r\n      2 * e * Math.random() - e,\r\n      2 * e * Math.random() - e,\r\n    ]),\r\n    'i': i,\r\n    'size': i % 2 ? 10 : 20,\r\n  });\r\n}\r\n\r\nconst styles = {\r\n  '10': new Style({\r\n    image: new CircleStyle({\r\n      radius: 5,\r\n      fill: new Fill({color: '#666666'}),\r\n      stroke: new Stroke({color: '#bada55', width: 1}),\r\n    }),\r\n  }),\r\n  '20': new Style({\r\n    image: new CircleStyle({\r\n      radius: 10,\r\n      fill: new Fill({color: '#666666'}),\r\n      stroke: new Stroke({color: '#bada55', width: 1}),\r\n    }),\r\n  }),\r\n};\r\n\r\nconst vectorSource = new VectorSource({\r\n  features: features,\r\n  wrapX: false,\r\n});\r\nconst vector = new VectorLayer({\r\n  source: vectorSource,\r\n  style: function (feature) {\r\n    return styles[feature.get('size')];\r\n  },\r\n});\r\n\r\nconst map = new Map({\r\n  layers: [vector],\r\n  target: document.getElementById('map'),\r\n  view: new View({\r\n    center: [0, 0],\r\n    zoom: 2,\r\n  }),\r\n});\r\n\r\nlet point = null;\r\nlet line = null;\r\nconst displaySnap = function (coordinate) {\r\n  const closestFeature = vectorSource.getClosestFeatureToCoordinate(coordinate);\r\n  if (closestFeature === null) {\r\n    point = null;\r\n    line = null;\r\n  } else {\r\n    const geometry = closestFeature.getGeometry();\r\n    const closestPoint = geometry.getClosestPoint(coordinate);\r\n    if (point === null) {\r\n      point = new Point(closestPoint);\r\n    } else {\r\n      point.setCoordinates(closestPoint);\r\n    }\r\n    if (line === null) {\r\n      line = new LineString([coordinate, closestPoint]);\r\n    } else {\r\n      line.setCoordinates([coordinate, closestPoint]);\r\n    }\r\n  }\r\n  map.render();\r\n};\r\n\r\nmap.on('pointermove', function (evt) {\r\n  if (evt.dragging) {\r\n    return;\r\n  }\r\n  const coordinate = map.getEventCoordinate(evt.originalEvent);\r\n  displaySnap(coordinate);\r\n});\r\n\r\nmap.on('click', function (evt) {\r\n  displaySnap(evt.coordinate);\r\n});\r\n\r\nconst stroke = new Stroke({\r\n  color: 'rgba(255,255,0,0.9)',\r\n  width: 3,\r\n});\r\nconst style = new Style({\r\n  stroke: stroke,\r\n  image: new CircleStyle({\r\n    radius: 10,\r\n    stroke: stroke,\r\n  }),\r\n});\r\n\r\nvector.on('postrender', function (evt) {\r\n  const vectorContext = getVectorContext(evt);\r\n  vectorContext.setStyle(style);\r\n  if (point !== null) {\r\n    vectorContext.drawGeometry(point);\r\n  }\r\n  if (line !== null) {\r\n    vectorContext.drawGeometry(line);\r\n  }\r\n});\r\n\r\nmap.on('pointermove', function (evt) {\r\n  if (evt.dragging) {\r\n    return;\r\n  }\r\n  const pixel = map.getEventPixel(evt.originalEvent);\r\n  const hit = map.hasFeatureAtPixel(pixel);\r\n  if (hit) {\r\n    map.getTarget().style.cursor = 'pointer';\r\n  } else {\r\n    map.getTarget().style.cursor = '';\r\n  }\r\n});\r\n"],"sourceRoot":""}