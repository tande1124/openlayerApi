{"version":3,"sources":["webpack:///./canvas-gradient-pattern.js"],"names":["grad","canvas","document","createElement","context","getContext","pixelRatio","gradient","createLinearGradient","addColorStop","pattern","width","height","fillStyle","fillRect","beginPath","arc","Math","PI","fill","createPattern","style","stroke","color","vectorLayer","source","url","format","feature","const","id","getId","setColor","layers","target","view","center","zoom"],"mappings":"2FAAA,WAkBQA,EAlBR,6EASMC,EAASC,SAASC,cAAc,UAChCC,EAAUH,EAAOI,WAAW,MAI5BC,EAAa,IAGbC,IACEP,EAAOI,EAAQI,qBAAqB,EAAG,EAAG,IAAMF,EAAY,IAC7DG,aAAa,EAAG,OACrBT,EAAKS,aAAa,EAAI,EAAG,UACzBT,EAAKS,aAAa,EAAI,EAAG,UACzBT,EAAKS,aAAa,GAAO,SACzBT,EAAKS,aAAa,EAAI,EAAG,QACzBT,EAAKS,aAAa,EAAI,EAAG,QACzBT,EAAKS,aAAa,EAAG,UACdT,GAIHU,GACJT,EAAOU,MAAQ,EAAIL,EACnBL,EAAOW,OAAS,EAAIN,EAEpBF,EAAQS,UAAY,QACpBT,EAAQU,SAAS,EAAG,EAAGb,EAAOU,MAAOV,EAAOW,QAE5CR,EAAQS,UAAY,yBACpBT,EAAQW,YACRX,EAAQY,IAAI,EAAIV,EAAY,EAAIA,EAAY,EAAIA,EAAY,EAAG,EAAIW,KAAKC,IACxEd,EAAQe,OAERf,EAAQS,UAAY,kBACpBT,EAAQW,YACRX,EAAQY,IAAI,EAAIV,EAAY,EAAIA,EAAY,IAAMA,EAAY,EAAG,EAAIW,KAAKC,IAC1Ed,EAAQe,OACDf,EAAQgB,cAAcnB,EAAQ,WAIjCkB,EAAO,IAAI,IACXE,EAAQ,IAAI,IAAM,CACtBF,KAAMA,EACNG,OAAQ,IAAI,IAAO,CACjBC,MAAO,OACPZ,MAAO,MAkBLa,EAAc,IAAI,IAAY,CAClCC,OAAQ,IAAI,IAAa,CACvBC,IAAK,iCACLC,OAAQ,IAAI,MAEdN,MAZsB,SAAUO,GAChCC,IAAMC,EAAKF,EAAQG,QAEnB,OADAZ,EAAKa,SAASF,EAAK,IAAMvB,EAAWG,GAC7BW,KAaG,IAAI,IAAI,CAClBY,OAAQ,CAACT,GACTU,OAAQ,MACRC,KAAM,IAAI,IAAK,CACbC,OAAQ,YAAW,CAAC,GAAI,KACxBC,KAAM,Q","file":"canvas-gradient-pattern.js","sourcesContent":["import GeoJSON from '../src/ol/format/GeoJSON.js';\r\nimport Map from '../src/ol/Map.js';\r\nimport VectorLayer from '../src/ol/layer/Vector.js';\r\nimport VectorSource from '../src/ol/source/Vector.js';\r\nimport View from '../src/ol/View.js';\r\nimport {DEVICE_PIXEL_RATIO} from '../src/ol/has.js';\r\nimport {Fill, Stroke, Style} from '../src/ol/style.js';\r\nimport {fromLonLat} from '../src/ol/proj.js';\r\n\r\nconst canvas = document.createElement('canvas');\r\nconst context = canvas.getContext('2d');\r\n\r\n// Gradient and pattern are in canvas pixel space, so we adjust for the\r\n// renderer's pixel ratio\r\nconst pixelRatio = DEVICE_PIXEL_RATIO;\r\n\r\n// Generate a rainbow gradient\r\nconst gradient = (function () {\r\n  const grad = context.createLinearGradient(0, 0, 512 * pixelRatio, 0);\r\n  grad.addColorStop(0, 'red');\r\n  grad.addColorStop(1 / 6, 'orange');\r\n  grad.addColorStop(2 / 6, 'yellow');\r\n  grad.addColorStop(3 / 6, 'green');\r\n  grad.addColorStop(4 / 6, 'aqua');\r\n  grad.addColorStop(5 / 6, 'blue');\r\n  grad.addColorStop(1, 'purple');\r\n  return grad;\r\n})();\r\n\r\n// Generate a canvasPattern with two circles on white background\r\nconst pattern = (function () {\r\n  canvas.width = 8 * pixelRatio;\r\n  canvas.height = 8 * pixelRatio;\r\n  // white background\r\n  context.fillStyle = 'white';\r\n  context.fillRect(0, 0, canvas.width, canvas.height);\r\n  // outer circle\r\n  context.fillStyle = 'rgba(102, 0, 102, 0.5)';\r\n  context.beginPath();\r\n  context.arc(4 * pixelRatio, 4 * pixelRatio, 3 * pixelRatio, 0, 2 * Math.PI);\r\n  context.fill();\r\n  // inner circle\r\n  context.fillStyle = 'rgb(55, 0, 170)';\r\n  context.beginPath();\r\n  context.arc(4 * pixelRatio, 4 * pixelRatio, 1.5 * pixelRatio, 0, 2 * Math.PI);\r\n  context.fill();\r\n  return context.createPattern(canvas, 'repeat');\r\n})();\r\n\r\n// Generate style for gradient or pattern fill\r\nconst fill = new Fill();\r\nconst style = new Style({\r\n  fill: fill,\r\n  stroke: new Stroke({\r\n    color: '#333',\r\n    width: 2,\r\n  }),\r\n});\r\n\r\n/**\r\n * The styling function for the vector layer, will return an array of styles\r\n * which either contains the aboove gradient or pattern.\r\n *\r\n * @param {import(\"../src/ol/Feature.js\").default} feature The feature to style.\r\n * @return {Style} The style to use for the feature.\r\n */\r\nconst getStackedStyle = function (feature) {\r\n  const id = feature.getId();\r\n  fill.setColor(id > 'J' ? gradient : pattern);\r\n  return style;\r\n};\r\n\r\n// Create a vector layer that makes use of the style function above…\r\nconst vectorLayer = new VectorLayer({\r\n  source: new VectorSource({\r\n    url: 'data/geojson/countries.geojson',\r\n    format: new GeoJSON(),\r\n  }),\r\n  style: getStackedStyle,\r\n});\r\n\r\n// … finally create a map with that layer.\r\nconst map = new Map({\r\n  layers: [vectorLayer],\r\n  target: 'map',\r\n  view: new View({\r\n    center: fromLonLat([16, 48]),\r\n    zoom: 3,\r\n  }),\r\n});\r\n"],"sourceRoot":""}