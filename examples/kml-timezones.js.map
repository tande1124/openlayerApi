{"version":3,"sources":["webpack:///./kml-timezones.js"],"names":["vector","source","url","format","extractStyles","style","feature","let","offset","match","get","parseInt","const","date","Date","local","getTime","getTimezoneOffset","delta","Math","abs","getHours","getMinutes","opacity","fill","color","stroke","raster","layer","map","layers","target","view","center","zoom","info","$","tooltip","animation","trigger","displayFeatureInfo","pixel","css","left","top","forEachFeatureAtPixel","attr","on","evt","dragging","getEventPixel","originalEvent"],"mappings":"2FAAA,wFA4CMA,EAAS,IAAI,IAAY,CAC7BC,OAAQ,IAAI,IAAa,CACvBC,IAAK,yBACLC,OAAQ,IAAI,IAAI,CACdC,eAAe,MAGnBC,MApCoB,SAAUC,GAC9BC,IAAIC,EAAS,EAEPC,EADOH,EAAQI,IAAI,QACND,MAAM,yBACrBA,IAGFD,EAAS,GAFKG,SAASF,EAAM,GAAI,IACjBE,SAASF,EAAM,GAAI,KAGrCG,IAAMC,EAAO,IAAIC,KACXC,EAAQ,IAAID,KAChBD,EAAKG,UAAkD,KAArCH,EAAKI,oBAAsBT,IAG3CU,EAAQC,KAAKC,IAAI,GAAKL,EAAMM,WAAaN,EAAMO,aAAe,IAC9DJ,EAAQ,KACVA,EAAQ,GAAKA,GAEfN,IAAMW,EAAU,KAAQ,EAAIL,EAAQ,IACpC,OAAO,IAAI,IAAM,CACfM,KAAM,IAAI,IAAK,CACbC,MAAO,CAAC,IAAM,IAAM,GAAMF,KAE5BG,OAAQ,IAAI,IAAO,CACjBD,MAAO,iBAePE,EAAS,IAAI,IAAU,CAC3B1B,OAAQ,IAAI,IAAO,CACjB2B,MAAO,YAILC,EAAM,IAAI,IAAI,CAClBC,OAAQ,CAACH,EAAQ3B,GACjB+B,OAAQ,MACRC,KAAM,IAAI,IAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAIJC,EAAOC,EAAE,SACfD,EAAKE,QAAQ,CACXC,WAAW,EACXC,QAAS,WAGX3B,IAAM4B,EAAqB,SAAUC,GACnCN,EAAKO,IAAI,CACPC,KAAMF,EAAM,GAAK,KACjBG,IAAKH,EAAM,GAAK,GAAK,OAEvB7B,IAAMN,EAAUuB,EAAIgB,sBAAsBJ,GAAO,SAAUnC,GACzD,OAAOA,KAELA,EACF6B,EACGE,QAAQ,QACRS,KAAK,sBAAuBxC,EAAQI,IAAI,SACxC2B,QAAQ,YACRA,QAAQ,QAEXF,EAAKE,QAAQ,SAIjBR,EAAIkB,GAAG,eAAe,SAAUC,GAC1BA,EAAIC,SACNd,EAAKE,QAAQ,QAGfG,EAAmBX,EAAIqB,cAAcF,EAAIG,mBAG3CtB,EAAIkB,GAAG,SAAS,SAAUC,GACxBR,EAAmBQ,EAAIP,Y","file":"kml-timezones.js","sourcesContent":["import KML from '../src/ol/format/KML.js';\r\nimport Map from '../src/ol/Map.js';\r\nimport Stamen from '../src/ol/source/Stamen.js';\r\nimport VectorSource from '../src/ol/source/Vector.js';\r\nimport View from '../src/ol/View.js';\r\nimport {Fill, Stroke, Style} from '../src/ol/style.js';\r\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\r\n\r\n/*\r\n * Compute the style of the feature.  Here we want the opacity of polygons to\r\n * be based on the offset from local noon.  For example, a timezone where it is\r\n * currently noon would have an opacity of 0.75.  And a timezone where it is\r\n * currently midnight would have an opacity of 0.  This doesn't account for\r\n * daylight savings, so don't use it to plan your vacation.\r\n */\r\nconst styleFunction = function (feature) {\r\n  let offset = 0;\r\n  const name = feature.get('name'); // e.g. GMT -08:30\r\n  const match = name.match(/([\\-+]\\d{2}):(\\d{2})$/);\r\n  if (match) {\r\n    const hours = parseInt(match[1], 10);\r\n    const minutes = parseInt(match[2], 10);\r\n    offset = 60 * hours + minutes;\r\n  }\r\n  const date = new Date();\r\n  const local = new Date(\r\n    date.getTime() + (date.getTimezoneOffset() + offset) * 60000\r\n  );\r\n  // offset from local noon (in hours)\r\n  let delta = Math.abs(12 - local.getHours() + local.getMinutes() / 60);\r\n  if (delta > 12) {\r\n    delta = 24 - delta;\r\n  }\r\n  const opacity = 0.75 * (1 - delta / 12);\r\n  return new Style({\r\n    fill: new Fill({\r\n      color: [0xff, 0xff, 0x33, opacity],\r\n    }),\r\n    stroke: new Stroke({\r\n      color: '#ffffff',\r\n    }),\r\n  });\r\n};\r\n\r\nconst vector = new VectorLayer({\r\n  source: new VectorSource({\r\n    url: 'data/kml/timezones.kml',\r\n    format: new KML({\r\n      extractStyles: false,\r\n    }),\r\n  }),\r\n  style: styleFunction,\r\n});\r\n\r\nconst raster = new TileLayer({\r\n  source: new Stamen({\r\n    layer: 'toner',\r\n  }),\r\n});\r\n\r\nconst map = new Map({\r\n  layers: [raster, vector],\r\n  target: 'map',\r\n  view: new View({\r\n    center: [0, 0],\r\n    zoom: 2,\r\n  }),\r\n});\r\n\r\nconst info = $('#info');\r\ninfo.tooltip({\r\n  animation: false,\r\n  trigger: 'manual',\r\n});\r\n\r\nconst displayFeatureInfo = function (pixel) {\r\n  info.css({\r\n    left: pixel[0] + 'px',\r\n    top: pixel[1] - 15 + 'px',\r\n  });\r\n  const feature = map.forEachFeatureAtPixel(pixel, function (feature) {\r\n    return feature;\r\n  });\r\n  if (feature) {\r\n    info\r\n      .tooltip('hide')\r\n      .attr('data-original-title', feature.get('name'))\r\n      .tooltip('fixTitle')\r\n      .tooltip('show');\r\n  } else {\r\n    info.tooltip('hide');\r\n  }\r\n};\r\n\r\nmap.on('pointermove', function (evt) {\r\n  if (evt.dragging) {\r\n    info.tooltip('hide');\r\n    return;\r\n  }\r\n  displayFeatureInfo(map.getEventPixel(evt.originalEvent));\r\n});\r\n\r\nmap.on('click', function (evt) {\r\n  displayFeatureInfo(evt.pixel);\r\n});\r\n"],"sourceRoot":""}