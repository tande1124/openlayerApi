{"version":3,"sources":["webpack:///./print-to-scale.js"],"names":["defs","const","proj27700","setExtent","raster","fetch","then","response","text","result","read","options","layer","attributions","Date","getFullYear","crossOrigin","projection","wrapX","setSource","map","layers","controls","attributionOptions","collapsible","target","view","center","zoom","scaleLine","bar","minWidth","addControl","dims","a0","a1","a2","a3","a4","a5","exportOptions","filter","element","className","indexOf","exportButton","document","getElementById","addEventListener","disabled","body","style","cursor","format","value","resolution","scale","dim","width","Math","round","height","viewResolution","getView","getResolution","scaleResolution","getProjection","getCenter","once","domtoimage","toJpeg","getViewport","dataUrl","pdf","jsPDF","undefined","addImage","save","setDpi","getTargetElement","updateSize","setResolution"],"mappings":"4FAAA,0FAUA,IAAMA,KACJ,aACA,oKAMF,YAAS,KAETC,IAAMC,EAAY,YAAc,cAChCA,EAAUC,UAAU,CAAC,EAAG,EAAG,IAAQ,OAEnCF,IAAMG,EAAS,IAAI,IAInBC,MADE,sGAECC,MAAK,SAAUC,GACd,OAAOA,EAASC,UAEjBF,MAAK,SAAUE,GACdP,IAAMQ,GAAS,IAAI,KAAmBC,KAAKF,GACrCG,EAAU,YAAwBF,EAAQ,CAC9CG,MAAO,mBAETD,EAAQE,aACN,0DACA,IAAIC,MAAOC,cACbJ,EAAQK,YAAc,GACtBL,EAAQM,WAAaf,EACrBS,EAAQO,OAAQ,EAChBd,EAAOe,UAAU,IAAI,IAAKR,OAG9BV,IAAMmB,EAAM,IAAI,IAAI,CAClBC,OAAQ,CAACjB,GACTkB,SAAU,YAAgB,CACxBC,mBAAoB,CAACC,aAAa,KAEpCC,OAAQ,MACRC,KAAM,IAAI,IAAK,CACbC,OAAQ,CAAC,OAAQ,QACjBV,WAAYf,EACZ0B,KAAM,MAIJC,EAAY,IAAI,IAAU,CAACC,KAAK,EAAMtB,MAAM,EAAMuB,SAAU,MAClEX,EAAIY,WAAWH,GAEf5B,IAAMgC,EAAO,CACXC,GAAI,CAAC,KAAM,KACXC,GAAI,CAAC,IAAK,KACVC,GAAI,CAAC,IAAK,KACVC,GAAI,CAAC,IAAK,KACVC,GAAI,CAAC,IAAK,KACVC,GAAI,CAAC,IAAK,MAKNC,EAAgB,CACpBC,OAAQ,SAAUC,GAChBzC,IAAM0C,EAAYD,EAAQC,WAAa,GACvC,OACuC,IAArCA,EAAUC,QAAQ,eAClBD,EAAUC,QAAQ,aAAe,GAChCD,EAAUC,QAAQ,mBAAqB,GACtCD,EAAUC,QAAQ,sBAKpBC,EAAeC,SAASC,eAAe,cAE7CF,EAAaG,iBACX,SACA,WACEH,EAAaI,UAAW,EACxBH,SAASI,KAAKC,MAAMC,OAAS,WAE7BnD,IAAMoD,EAASP,SAASC,eAAe,UAAUO,MAC3CC,EAAaT,SAASC,eAAe,cAAcO,MACnDE,EAAQV,SAASC,eAAe,SAASO,MACzCG,EAAMxB,EAAKoB,GACXK,EAAQC,KAAKC,MAAOH,EAAI,GAAKF,EAAc,MAC3CM,EAASF,KAAKC,MAAOH,EAAI,GAAKF,EAAc,MAC5CO,EAAiB1C,EAAI2C,UAAUC,gBAC/BC,EACJT,EACA,YACEpC,EAAI2C,UAAUG,gBACdX,EAAa,KACbnC,EAAI2C,UAAUI,aAGlB/C,EAAIgD,KAAK,kBAAkB,WACzB5B,EAAckB,MAAQA,EACtBlB,EAAcqB,OAASA,EACvBQ,WACGC,OAAOlD,EAAImD,cAAe/B,GAC1BlC,MAAK,SAAUkE,GACdvE,IAAMwE,EAAM,IAAIC,MAAM,iBAAaC,EAAWtB,GAC9CoB,EAAIG,SAASJ,EAAS,OAAQ,EAAG,EAAGf,EAAI,GAAIA,EAAI,IAChDgB,EAAII,KAAK,WAEThD,EAAUiD,SACV1D,EAAI2D,mBAAmB5B,MAAMO,MAAQ,GACrCtC,EAAI2D,mBAAmB5B,MAAMU,OAAS,GACtCzC,EAAI4D,aACJ5D,EAAI2C,UAAUkB,cAAcnB,GAC5BjB,EAAaI,UAAW,EACxBH,SAASI,KAAKC,MAAMC,OAAS,aAKnCvB,EAAUiD,OAAOvB,GACjBnC,EAAI2D,mBAAmB5B,MAAMO,MAAQA,EAAQ,KAC7CtC,EAAI2D,mBAAmB5B,MAAMU,OAASA,EAAS,KAC/CzC,EAAI4D,aACJ5D,EAAI2C,UAAUkB,cAAchB,MAE9B,K","file":"print-to-scale.js","sourcesContent":["import Map from '../src/ol/Map.js';\r\nimport TileLayer from '../src/ol/layer/Tile.js';\r\nimport View from '../src/ol/View.js';\r\nimport WMTS, {optionsFromCapabilities} from '../src/ol/source/WMTS.js';\r\nimport WMTSCapabilities from '../src/ol/format/WMTSCapabilities.js';\r\nimport proj4 from 'proj4';\r\nimport {ScaleLine, defaults as defaultControls} from '../src/ol/control.js';\r\nimport {getPointResolution, get as getProjection} from '../src/ol/proj.js';\r\nimport {register} from '../src/ol/proj/proj4.js';\r\n\r\nproj4.defs(\r\n  'EPSG:27700',\r\n  '+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 ' +\r\n    '+x_0=400000 +y_0=-100000 +ellps=airy ' +\r\n    '+towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489 ' +\r\n    '+units=m +no_defs'\r\n);\r\n\r\nregister(proj4);\r\n\r\nconst proj27700 = getProjection('EPSG:27700');\r\nproj27700.setExtent([0, 0, 700000, 1300000]);\r\n\r\nconst raster = new TileLayer();\r\n\r\nconst url =\r\n  'https://tiles.arcgis.com/tiles/qHLhLQrcvEnxjtPr/arcgis/rest/services/OS_Open_Raster/MapServer/WMTS';\r\nfetch(url)\r\n  .then(function (response) {\r\n    return response.text();\r\n  })\r\n  .then(function (text) {\r\n    const result = new WMTSCapabilities().read(text);\r\n    const options = optionsFromCapabilities(result, {\r\n      layer: 'OS_Open_Raster',\r\n    });\r\n    options.attributions =\r\n      'Contains OS data Â© Crown Copyright and database right ' +\r\n      new Date().getFullYear();\r\n    options.crossOrigin = '';\r\n    options.projection = proj27700;\r\n    options.wrapX = false;\r\n    raster.setSource(new WMTS(options));\r\n  });\r\n\r\nconst map = new Map({\r\n  layers: [raster],\r\n  controls: defaultControls({\r\n    attributionOptions: {collapsible: false},\r\n  }),\r\n  target: 'map',\r\n  view: new View({\r\n    center: [373500, 436500],\r\n    projection: proj27700,\r\n    zoom: 7,\r\n  }),\r\n});\r\n\r\nconst scaleLine = new ScaleLine({bar: true, text: true, minWidth: 125});\r\nmap.addControl(scaleLine);\r\n\r\nconst dims = {\r\n  a0: [1189, 841],\r\n  a1: [841, 594],\r\n  a2: [594, 420],\r\n  a3: [420, 297],\r\n  a4: [297, 210],\r\n  a5: [210, 148],\r\n};\r\n\r\n// export options for html-to-image.\r\n// See: https://github.com/bubkoo/html-to-image#options\r\nconst exportOptions = {\r\n  filter: function (element) {\r\n    const className = element.className || '';\r\n    return (\r\n      className.indexOf('ol-control') === -1 ||\r\n      className.indexOf('ol-scale') > -1 ||\r\n      (className.indexOf('ol-attribution') > -1 &&\r\n        className.indexOf('ol-uncollapsible'))\r\n    );\r\n  },\r\n};\r\n\r\nconst exportButton = document.getElementById('export-pdf');\r\n\r\nexportButton.addEventListener(\r\n  'click',\r\n  function () {\r\n    exportButton.disabled = true;\r\n    document.body.style.cursor = 'progress';\r\n\r\n    const format = document.getElementById('format').value;\r\n    const resolution = document.getElementById('resolution').value;\r\n    const scale = document.getElementById('scale').value;\r\n    const dim = dims[format];\r\n    const width = Math.round((dim[0] * resolution) / 25.4);\r\n    const height = Math.round((dim[1] * resolution) / 25.4);\r\n    const viewResolution = map.getView().getResolution();\r\n    const scaleResolution =\r\n      scale /\r\n      getPointResolution(\r\n        map.getView().getProjection(),\r\n        resolution / 25.4,\r\n        map.getView().getCenter()\r\n      );\r\n\r\n    map.once('rendercomplete', function () {\r\n      exportOptions.width = width;\r\n      exportOptions.height = height;\r\n      domtoimage\r\n        .toJpeg(map.getViewport(), exportOptions)\r\n        .then(function (dataUrl) {\r\n          const pdf = new jsPDF('landscape', undefined, format);\r\n          pdf.addImage(dataUrl, 'JPEG', 0, 0, dim[0], dim[1]);\r\n          pdf.save('map.pdf');\r\n          // Reset original map size\r\n          scaleLine.setDpi();\r\n          map.getTargetElement().style.width = '';\r\n          map.getTargetElement().style.height = '';\r\n          map.updateSize();\r\n          map.getView().setResolution(viewResolution);\r\n          exportButton.disabled = false;\r\n          document.body.style.cursor = 'auto';\r\n        });\r\n    });\r\n\r\n    // Set print size\r\n    scaleLine.setDpi(resolution);\r\n    map.getTargetElement().style.width = width + 'px';\r\n    map.getTargetElement().style.height = height + 'px';\r\n    map.updateSize();\r\n    map.getView().setResolution(scaleResolution);\r\n  },\r\n  false\r\n);\r\n"],"sourceRoot":""}