{"version":3,"sources":["webpack:///./magnify.js"],"names":["imagery","source","attributions","url","maxZoom","crossOrigin","container","document","getElementById","map","layers","target","view","center","zoom","radius","addEventListener","evt","which","Math","min","render","preventDefault","max","let","mousePosition","event","getEventPixel","on","const","pixel","offset","half","sqrt","pow","context","centerX","centerY","originX","originY","size","round","sourceData","getImageData","data","dest","createImageData","destData","j","i","dI","dJ","sourceI","sourceJ","destOffset","sourceOffset","beginPath","arc","PI","lineWidth","strokeStyle","putImageData","stroke","restore"],"mappings":"2FAAA,uDAYMA,EAAU,IAAI,IAAU,CAC5BC,OAAQ,IAAI,IAAI,CACdC,aALF,4LAMEC,IAAK,iGACLC,QAAS,GACTC,YAAa,OAIXC,EAAYC,SAASC,eAAe,OAEpCC,EAAM,IAAI,IAAI,CAClBC,OAAQ,CAACV,GACTW,OAAQL,EACRM,KAAM,IAAI,IAAK,CACbC,OAAQ,YAAW,EAAE,IAAK,OAC1BC,KAAM,MAINC,EAAS,GACbR,SAASS,iBAAiB,WAAW,SAAUC,GAC3B,KAAdA,EAAIC,OACNH,EAASI,KAAKC,IAAIL,EAAS,EAAG,KAC9BN,EAAIY,SACJJ,EAAIK,kBACmB,KAAdL,EAAIC,QACbH,EAASI,KAAKI,IAAIR,EAAS,EAAG,IAC9BN,EAAIY,SACJJ,EAAIK,qBAKRE,IAAIC,EAAgB,KAEpBnB,EAAUU,iBAAiB,aAAa,SAAUU,GAChDD,EAAgBhB,EAAIkB,cAAcD,GAClCjB,EAAIY,YAGNf,EAAUU,iBAAiB,YAAY,WACrCS,EAAgB,KAChBhB,EAAIY,YAINrB,EAAQ4B,GAAG,cAAc,SAAUF,GACjC,GAAID,EAAe,CAkBjB,IAjBAI,IAAMC,EAAQ,YAAeJ,EAAOD,GAC9BM,EAAS,YAAeL,EAAO,CACnCD,EAAc,GAAKV,EACnBU,EAAc,KAEVO,EAAOb,KAAKc,KAChBd,KAAKe,IAAIH,EAAO,GAAKD,EAAM,GAAI,GAAKX,KAAKe,IAAIH,EAAO,GAAKD,EAAM,GAAI,IAE/DK,EAAUT,EAAMS,QAChBC,EAAUN,EAAM,GAChBO,EAAUP,EAAM,GAChBQ,EAAUF,EAAUJ,EACpBO,EAAUF,EAAUL,EACpBQ,EAAOrB,KAAKsB,MAAM,EAAIT,EAAO,GAC7BU,EAAaP,EAAQQ,aAAaL,EAASC,EAASC,EAAMA,GAAMI,KAChEC,EAAOV,EAAQW,gBAAgBN,EAAMA,GACrCO,EAAWF,EAAKD,KACbI,EAAI,EAAGA,EAAIR,IAAQQ,EAC1B,IAAKxB,IAAIyB,EAAI,EAAGA,EAAIT,IAAQS,EAAG,CAC7BpB,IAAMqB,EAAKD,EAAIjB,EACTmB,EAAKH,EAAIhB,EAEXoB,EAAUH,EACVI,EAAUL,EAFD7B,KAAKc,KAAKiB,EAAKA,EAAKC,EAAKA,GAG3BnB,IACToB,EAAUjC,KAAKsB,MAAMT,EAAOkB,EAAK,GACjCG,EAAUlC,KAAKsB,MAAMT,EAAOmB,EAAK,IAEnCtB,IAAMyB,EAA8B,GAAhBN,EAAIR,EAAOS,GACzBM,EAA4C,GAA5BF,EAAUb,EAAOY,GACvCL,EAASO,GAAcZ,EAAWa,GAClCR,EAASO,EAAa,GAAKZ,EAAWa,EAAe,GACrDR,EAASO,EAAa,GAAKZ,EAAWa,EAAe,GACrDR,EAASO,EAAa,GAAKZ,EAAWa,EAAe,GAGzDpB,EAAQqB,YACRrB,EAAQsB,IAAIrB,EAASC,EAASL,EAAM,EAAG,EAAIb,KAAKuC,IAChDvB,EAAQwB,UAAa,EAAI3B,EAAQjB,EACjCoB,EAAQyB,YAAc,wBACtBzB,EAAQ0B,aAAahB,EAAMP,EAASC,GACpCJ,EAAQ2B,SACR3B,EAAQ4B,gB","file":"magnify.js","sourcesContent":["import Map from '../src/ol/Map.js';\r\nimport TileLayer from '../src/ol/layer/Tile.js';\r\nimport View from '../src/ol/View.js';\r\nimport XYZ from '../src/ol/source/XYZ.js';\r\nimport {fromLonLat} from '../src/ol/proj.js';\r\nimport {getRenderPixel} from '../src/ol/render.js';\r\n\r\nconst key = 'get_your_own_D6rA4zTHduk6KOKTXzGB';\r\nconst attributions =\r\n  '<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">&copy; MapTiler</a> ' +\r\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>';\r\n\r\nconst imagery = new TileLayer({\r\n  source: new XYZ({\r\n    attributions: attributions,\r\n    url: 'https://api.maptiler.com/tiles/satellite/{z}/{x}/{y}.jpg?key=' + key,\r\n    maxZoom: 20,\r\n    crossOrigin: '',\r\n  }),\r\n});\r\n\r\nconst container = document.getElementById('map');\r\n\r\nconst map = new Map({\r\n  layers: [imagery],\r\n  target: container,\r\n  view: new View({\r\n    center: fromLonLat([-109, 46.5]),\r\n    zoom: 6,\r\n  }),\r\n});\r\n\r\nlet radius = 75;\r\ndocument.addEventListener('keydown', function (evt) {\r\n  if (evt.which === 38) {\r\n    radius = Math.min(radius + 5, 150);\r\n    map.render();\r\n    evt.preventDefault();\r\n  } else if (evt.which === 40) {\r\n    radius = Math.max(radius - 5, 25);\r\n    map.render();\r\n    evt.preventDefault();\r\n  }\r\n});\r\n\r\n// get the pixel position with every move\r\nlet mousePosition = null;\r\n\r\ncontainer.addEventListener('mousemove', function (event) {\r\n  mousePosition = map.getEventPixel(event);\r\n  map.render();\r\n});\r\n\r\ncontainer.addEventListener('mouseout', function () {\r\n  mousePosition = null;\r\n  map.render();\r\n});\r\n\r\n// after rendering the layer, show an oversampled version around the pointer\r\nimagery.on('postrender', function (event) {\r\n  if (mousePosition) {\r\n    const pixel = getRenderPixel(event, mousePosition);\r\n    const offset = getRenderPixel(event, [\r\n      mousePosition[0] + radius,\r\n      mousePosition[1],\r\n    ]);\r\n    const half = Math.sqrt(\r\n      Math.pow(offset[0] - pixel[0], 2) + Math.pow(offset[1] - pixel[1], 2)\r\n    );\r\n    const context = event.context;\r\n    const centerX = pixel[0];\r\n    const centerY = pixel[1];\r\n    const originX = centerX - half;\r\n    const originY = centerY - half;\r\n    const size = Math.round(2 * half + 1);\r\n    const sourceData = context.getImageData(originX, originY, size, size).data;\r\n    const dest = context.createImageData(size, size);\r\n    const destData = dest.data;\r\n    for (let j = 0; j < size; ++j) {\r\n      for (let i = 0; i < size; ++i) {\r\n        const dI = i - half;\r\n        const dJ = j - half;\r\n        const dist = Math.sqrt(dI * dI + dJ * dJ);\r\n        let sourceI = i;\r\n        let sourceJ = j;\r\n        if (dist < half) {\r\n          sourceI = Math.round(half + dI / 2);\r\n          sourceJ = Math.round(half + dJ / 2);\r\n        }\r\n        const destOffset = (j * size + i) * 4;\r\n        const sourceOffset = (sourceJ * size + sourceI) * 4;\r\n        destData[destOffset] = sourceData[sourceOffset];\r\n        destData[destOffset + 1] = sourceData[sourceOffset + 1];\r\n        destData[destOffset + 2] = sourceData[sourceOffset + 2];\r\n        destData[destOffset + 3] = sourceData[sourceOffset + 3];\r\n      }\r\n    }\r\n    context.beginPath();\r\n    context.arc(centerX, centerY, half, 0, 2 * Math.PI);\r\n    context.lineWidth = (3 * half) / radius;\r\n    context.strokeStyle = 'rgba(255,255,255,0.5)';\r\n    context.putImageData(dest, originX, originY);\r\n    context.stroke();\r\n    context.restore();\r\n  }\r\n});\r\n"],"sourceRoot":""}