{"version":3,"sources":["webpack:///./snap.js"],"names":["raster","source","vector","style","fill","color","stroke","width","image","radius","map","layers","target","view","center","zoom","ExampleModify","init","this","select","addInteraction","modify","features","getFeatures","setEvents","const","selectedFeatures","on","forEach","each","remove","setActive","active","optionsForm","document","getElementById","ExampleDraw","Point","LineString","Polygon","Circle","getSource","type","getActive","activeType","elements","value","onchange","e","getAttribute","snap"],"mappings":"4FAAA,yHAOMA,EAAS,IAAI,IAAU,CAC3BC,OAAQ,IAAI,MAGRC,EAAS,IAAI,IAAY,CAC7BD,OAAQ,IAAI,IACZE,MAAO,IAAI,IAAM,CACfC,KAAM,IAAI,IAAK,CACbC,MAAO,6BAETC,OAAQ,IAAI,IAAO,CACjBD,MAAO,UACPE,MAAO,IAETC,MAAO,IAAI,IAAY,CACrBC,OAAQ,EACRL,KAAM,IAAI,IAAK,CACbC,MAAO,kBAMTK,EAAM,IAAI,IAAI,CAClBC,OAAQ,CAACX,EAAQE,GACjBU,OAAQ,MACRC,KAAM,IAAI,IAAK,CACbC,OAAQ,EAAE,KAAU,MACpBC,KAAM,MAIJC,EAAgB,CACpBC,KAAM,WACJC,KAAKC,OAAS,IAAI,IAClBT,EAAIU,eAAeF,KAAKC,QAExBD,KAAKG,OAAS,IAAI,IAAO,CACvBC,SAAUJ,KAAKC,OAAOI,gBAExBb,EAAIU,eAAeF,KAAKG,QAExBH,KAAKM,aAEPA,UAAW,WACTC,IAAMC,EAAmBR,KAAKC,OAAOI,cAErCL,KAAKC,OAAOQ,GAAG,iBAAiB,WAC9BD,EAAiBE,SAAQ,SAAUC,GACjCH,EAAiBI,OAAOD,UAI9BE,UAAW,SAAUC,GACnBd,KAAKC,OAAOY,UAAUC,GACtBd,KAAKG,OAAOU,UAAUC,KAG1BhB,EAAcC,OAEdQ,IAAMQ,EAAcC,SAASC,eAAe,gBAEtCC,EAAc,CAClBnB,KAAM,WACJP,EAAIU,eAAeF,KAAKmB,OACxBnB,KAAKmB,MAAMN,WAAU,GACrBrB,EAAIU,eAAeF,KAAKoB,YACxBpB,KAAKoB,WAAWP,WAAU,GAC1BrB,EAAIU,eAAeF,KAAKqB,SACxBrB,KAAKqB,QAAQR,WAAU,GACvBrB,EAAIU,eAAeF,KAAKsB,QACxBtB,KAAKsB,OAAOT,WAAU,IAExBM,MAAO,IAAI,IAAK,CACdpC,OAAQC,EAAOuC,YACfC,KAAM,UAERJ,WAAY,IAAI,IAAK,CACnBrC,OAAQC,EAAOuC,YACfC,KAAM,eAERH,QAAS,IAAI,IAAK,CAChBtC,OAAQC,EAAOuC,YACfC,KAAM,YAERF,OAAQ,IAAI,IAAK,CACfvC,OAAQC,EAAOuC,YACfC,KAAM,WAERC,UAAW,WACT,QAAOzB,KAAK0B,YAAa1B,KAAKA,KAAK0B,YAAYD,aAEjDZ,UAAW,SAAUC,GACnBP,IAAMiB,EAAOT,EAAYY,SAAS,aAAaC,MAC3Cd,GACFd,KAAK0B,YAAc1B,KAAKA,KAAK0B,YAAYb,WAAU,GACnDb,KAAKwB,GAAMX,WAAU,GACrBb,KAAK0B,WAAaF,IAElBxB,KAAK0B,YAAc1B,KAAKA,KAAK0B,YAAYb,WAAU,GACnDb,KAAK0B,WAAa,QAIxBR,EAAYnB,OAMZgB,EAAYc,SAAW,SAAUC,GAC/BvB,IAAMiB,EAAOM,EAAEpC,OAAOqC,aAAa,QAC7BH,EAAQE,EAAEpC,OAAOkC,MACX,aAARJ,EACFN,EAAYO,aAAeP,EAAYL,WAAU,GAChC,eAARW,IACI,UAATI,GACFV,EAAYL,WAAU,GACtBf,EAAce,WAAU,IACN,QAATe,IACTV,EAAYL,WAAU,GACtBf,EAAce,WAAU,MAK9BK,EAAYL,WAAU,GACtBf,EAAce,WAAU,GAKxBN,IAAMyB,EAAO,IAAI,IAAK,CACpBjD,OAAQC,EAAOuC,cAEjB/B,EAAIU,eAAe8B,K","file":"snap.js","sourcesContent":["import Map from '../src/ol/Map.js';\r\nimport View from '../src/ol/View.js';\r\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\r\nimport {Draw, Modify, Select, Snap} from '../src/ol/interaction.js';\r\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\r\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\r\n\r\nconst raster = new TileLayer({\r\n  source: new OSM(),\r\n});\r\n\r\nconst vector = new VectorLayer({\r\n  source: new VectorSource(),\r\n  style: new Style({\r\n    fill: new Fill({\r\n      color: 'rgba(255, 255, 255, 0.2)',\r\n    }),\r\n    stroke: new Stroke({\r\n      color: '#ffcc33',\r\n      width: 2,\r\n    }),\r\n    image: new CircleStyle({\r\n      radius: 7,\r\n      fill: new Fill({\r\n        color: '#ffcc33',\r\n      }),\r\n    }),\r\n  }),\r\n});\r\n\r\nconst map = new Map({\r\n  layers: [raster, vector],\r\n  target: 'map',\r\n  view: new View({\r\n    center: [-11000000, 4600000],\r\n    zoom: 4,\r\n  }),\r\n});\r\n\r\nconst ExampleModify = {\r\n  init: function () {\r\n    this.select = new Select();\r\n    map.addInteraction(this.select);\r\n\r\n    this.modify = new Modify({\r\n      features: this.select.getFeatures(),\r\n    });\r\n    map.addInteraction(this.modify);\r\n\r\n    this.setEvents();\r\n  },\r\n  setEvents: function () {\r\n    const selectedFeatures = this.select.getFeatures();\r\n\r\n    this.select.on('change:active', function () {\r\n      selectedFeatures.forEach(function (each) {\r\n        selectedFeatures.remove(each);\r\n      });\r\n    });\r\n  },\r\n  setActive: function (active) {\r\n    this.select.setActive(active);\r\n    this.modify.setActive(active);\r\n  },\r\n};\r\nExampleModify.init();\r\n\r\nconst optionsForm = document.getElementById('options-form');\r\n\r\nconst ExampleDraw = {\r\n  init: function () {\r\n    map.addInteraction(this.Point);\r\n    this.Point.setActive(false);\r\n    map.addInteraction(this.LineString);\r\n    this.LineString.setActive(false);\r\n    map.addInteraction(this.Polygon);\r\n    this.Polygon.setActive(false);\r\n    map.addInteraction(this.Circle);\r\n    this.Circle.setActive(false);\r\n  },\r\n  Point: new Draw({\r\n    source: vector.getSource(),\r\n    type: 'Point',\r\n  }),\r\n  LineString: new Draw({\r\n    source: vector.getSource(),\r\n    type: 'LineString',\r\n  }),\r\n  Polygon: new Draw({\r\n    source: vector.getSource(),\r\n    type: 'Polygon',\r\n  }),\r\n  Circle: new Draw({\r\n    source: vector.getSource(),\r\n    type: 'Circle',\r\n  }),\r\n  getActive: function () {\r\n    return this.activeType ? this[this.activeType].getActive() : false;\r\n  },\r\n  setActive: function (active) {\r\n    const type = optionsForm.elements['draw-type'].value;\r\n    if (active) {\r\n      this.activeType && this[this.activeType].setActive(false);\r\n      this[type].setActive(true);\r\n      this.activeType = type;\r\n    } else {\r\n      this.activeType && this[this.activeType].setActive(false);\r\n      this.activeType = null;\r\n    }\r\n  },\r\n};\r\nExampleDraw.init();\r\n\r\n/**\r\n * Let user change the geometry type.\r\n * @param {Event} e Change event.\r\n */\r\noptionsForm.onchange = function (e) {\r\n  const type = e.target.getAttribute('name');\r\n  const value = e.target.value;\r\n  if (type == 'draw-type') {\r\n    ExampleDraw.getActive() && ExampleDraw.setActive(true);\r\n  } else if (type == 'interaction') {\r\n    if (value == 'modify') {\r\n      ExampleDraw.setActive(false);\r\n      ExampleModify.setActive(true);\r\n    } else if (value == 'draw') {\r\n      ExampleDraw.setActive(true);\r\n      ExampleModify.setActive(false);\r\n    }\r\n  }\r\n};\r\n\r\nExampleDraw.setActive(true);\r\nExampleModify.setActive(false);\r\n\r\n// The snap interaction must be added after the Modify and Draw interactions\r\n// in order for its map browser event handlers to be fired first. Its handlers\r\n// are responsible of doing the snapping.\r\nconst snap = new Snap({\r\n  source: vector.getSource(),\r\n});\r\nmap.addInteraction(snap);\r\n"],"sourceRoot":""}