{"version":3,"sources":["webpack:///./export-map.js"],"names":["map","layers","source","url","format","opacity","target","view","center","zoom","document","getElementById","addEventListener","once","const","mapCanvas","createElement","size","getSize","width","height","mapContext","getContext","Array","prototype","forEach","call","querySelectorAll","canvas","parentNode","style","globalAlpha","Number","matrix","transform","match","split","CanvasRenderingContext2D","setTransform","apply","drawImage","navigator","msSaveBlob","msToBlob","link","href","toDataURL","click","renderSync"],"mappings":"2FAAA,+DAMMA,EAAM,IAAI,IAAI,CAClBC,OAAQ,CACN,IAAI,IAAU,CACZC,OAAQ,IAAI,MAEd,IAAI,IAAY,CACdA,OAAQ,IAAI,IAAa,CACvBC,IAAK,iCACLC,OAAQ,IAAI,MAEdC,QAAS,MAGbC,OAAQ,MACRC,KAAM,IAAI,IAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAIVC,SAASC,eAAe,cAAcC,iBAAiB,SAAS,WAC9DZ,EAAIa,KAAK,kBAAkB,WACzBC,IAAMC,EAAYL,SAASM,cAAc,UACnCC,EAAOjB,EAAIkB,UACjBH,EAAUI,MAAQF,EAAK,GACvBF,EAAUK,OAASH,EAAK,GACxBH,IAAMO,EAAaN,EAAUO,WAAW,MAsBxC,GArBAC,MAAMC,UAAUC,QAAQC,KACtBhB,SAASiB,iBAAiB,qBAC1B,SAAUC,GACR,GAAIA,EAAOT,MAAQ,EAAG,CACpBL,IAAMT,EAAUuB,EAAOC,WAAWC,MAAMzB,QACxCgB,EAAWU,YAA0B,KAAZ1B,EAAiB,EAAI2B,OAAO3B,GACrDS,IAEMmB,EAFYL,EAAOE,MAAMI,UAG5BC,MAAM,wBAAwB,GAC9BC,MAAM,KACNpC,IAAIgC,QAEPK,yBAAyBb,UAAUc,aAAaC,MAC9ClB,EACAY,GAEFZ,EAAWmB,UAAUZ,EAAQ,EAAG,OAIlCa,UAAUC,WAEZD,UAAUC,WAAW3B,EAAU4B,WAAY,eACtC,CACL7B,IAAM8B,EAAOlC,SAASC,eAAe,kBACrCiC,EAAKC,KAAO9B,EAAU+B,YACtBF,EAAKG,YAGT/C,EAAIgD,kB","file":"export-map.js","sourcesContent":["import GeoJSON from '../src/ol/format/GeoJSON.js';\r\nimport Map from '../src/ol/Map.js';\r\nimport View from '../src/ol/View.js';\r\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\r\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\r\n\r\nconst map = new Map({\r\n  layers: [\r\n    new TileLayer({\r\n      source: new OSM(),\r\n    }),\r\n    new VectorLayer({\r\n      source: new VectorSource({\r\n        url: 'data/geojson/countries.geojson',\r\n        format: new GeoJSON(),\r\n      }),\r\n      opacity: 0.5,\r\n    }),\r\n  ],\r\n  target: 'map',\r\n  view: new View({\r\n    center: [0, 0],\r\n    zoom: 2,\r\n  }),\r\n});\r\n\r\ndocument.getElementById('export-png').addEventListener('click', function () {\r\n  map.once('rendercomplete', function () {\r\n    const mapCanvas = document.createElement('canvas');\r\n    const size = map.getSize();\r\n    mapCanvas.width = size[0];\r\n    mapCanvas.height = size[1];\r\n    const mapContext = mapCanvas.getContext('2d');\r\n    Array.prototype.forEach.call(\r\n      document.querySelectorAll('.ol-layer canvas'),\r\n      function (canvas) {\r\n        if (canvas.width > 0) {\r\n          const opacity = canvas.parentNode.style.opacity;\r\n          mapContext.globalAlpha = opacity === '' ? 1 : Number(opacity);\r\n          const transform = canvas.style.transform;\r\n          // Get the transform parameters from the style's transform matrix\r\n          const matrix = transform\r\n            .match(/^matrix\\(([^\\(]*)\\)$/)[1]\r\n            .split(',')\r\n            .map(Number);\r\n          // Apply the transform to the export map context\r\n          CanvasRenderingContext2D.prototype.setTransform.apply(\r\n            mapContext,\r\n            matrix\r\n          );\r\n          mapContext.drawImage(canvas, 0, 0);\r\n        }\r\n      }\r\n    );\r\n    if (navigator.msSaveBlob) {\r\n      // link download attribuute does not work on MS browsers\r\n      navigator.msSaveBlob(mapCanvas.msToBlob(), 'map.png');\r\n    } else {\r\n      const link = document.getElementById('image-download');\r\n      link.href = mapCanvas.toDataURL();\r\n      link.click();\r\n    }\r\n  });\r\n  map.renderSync();\r\n});\r\n"],"sourceRoot":""}