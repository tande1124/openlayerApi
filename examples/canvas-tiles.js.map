{"version":3,"sources":["webpack:///../src/ol/source/TileDebug.js","webpack:///./canvas-tiles.js"],"names":["tileCoord","tileSize","text","super","TileState","LOADED","this","tileSize_","text_","canvas_","getImage","const","context","strokeStyle","strokeRect","fillStyle","textAlign","textBaseline","font","lineWidth","strokeText","fillText","canvas","load","opt_options","options","opaque","projection","tileGrid","wrapX","undefined","zDirection","getTile","z","x","y","tileCoordKey","tileCache","containsKey","get","getTileSize","textTileCoord","getTileCoordForTileUrlFunction","tile","set","Map","layers","source","OSM","target","view","View","center","zoom"],"mappings":"mLAWM,EAAwB,YAM5B,WAAYA,EAAWC,EAAUC,GAC/BC,OAAM,KAAAH,EAAWI,EAAA,EAAUC,QAM3BC,KAAKC,UAAYN,EAMjBK,KAAKE,MAAQN,EAMbI,KAAKG,QAAU,K,8FAOjB,EAAF,UAAEC,SAAA,WACE,GAAIJ,KAAKG,QACP,OAAOH,KAAKG,QAEZE,IAAMV,EAAWK,KAAKC,UAChBK,EAAU,YAAsBX,EAAS,GAAIA,EAAS,IAyB5D,OAvBAW,EAAQC,YAAc,OACtBD,EAAQE,WAAW,GAAK,GAAKb,EAAS,GAAK,GAAKA,EAAS,GAAK,IAE9DW,EAAQG,UAAY,OACpBH,EAAQC,YAAc,QACtBD,EAAQI,UAAY,SACpBJ,EAAQK,aAAe,SACvBL,EAAQM,KAAO,kBACfN,EAAQO,UAAY,EACpBP,EAAQQ,WACNd,KAAKE,MACLP,EAAS,GAAK,EACdA,EAAS,GAAK,EACdA,EAAS,IAEXW,EAAQS,SACNf,KAAKE,MACLP,EAAS,GAAK,EACdA,EAAS,GAAK,EACdA,EAAS,IAGXK,KAAKG,QAAUG,EAAQU,OAChBV,EAAQU,QAInB,EAAF,UAAEC,KAAA,a,EAlE4B,CAAJ,KA8IX,EApDY,YAIzB,WAAYC,GAIVb,IAAMc,EAAUD,GAAe,GAE/BrB,OAAM,MACJuB,QAAQ,EACRC,WAAYF,EAAQE,WACpBC,SAAUH,EAAQG,SAClBC,WAAyBC,IAAlBL,EAAQI,OAAsBJ,EAAQI,MAC7CE,WAAYN,EAAQM,a,8FAUxB,EAAF,UAAEC,QAAA,SAAQC,EAAGC,EAAGC,GACZxB,IAAMyB,EAAe,YAAUH,EAAGC,EAAGC,GACrC,GAAI7B,KAAK+B,UAAUC,YAAYF,GAC7B,OAAoC9B,KAAK+B,UAAUE,IAAIH,GAEvDzB,IAGIT,EAHED,EAAW,YAAOK,KAAKsB,SAASY,YAAYP,IAC5CjC,EAAY,CAACiC,EAAGC,EAAGC,GACnBM,EAAgBnC,KAAKoC,+BAA+B1C,GAGxDE,EADEuC,EAEA,KACAA,EAAc,GACd,MACAA,EAAc,GACd,MACAA,EAAc,GAET,OAET9B,IAAMgC,EAAO,IAAI,EAAY3C,EAAWC,EAAUC,GAElD,OADAI,KAAK+B,UAAUO,IAAIR,EAAcO,GAC1BA,G,EA/Cc,CAAH,KChGZ,IAAIE,EAAA,EAAI,CAClBC,OAAQ,CACN,IAAI,IAAU,CACZC,OAAQ,IAAIC,EAAA,IAEd,IAAI,IAAU,CACZD,OAAQ,IAAI,KAGhBE,OAAQ,MACRC,KAAM,IAAIC,EAAA,EAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,Q","file":"canvas-tiles.js","sourcesContent":["/**\r\n * @module ol/source/TileDebug\r\n */\r\n\r\nimport Tile from '../Tile.js';\r\nimport TileState from '../TileState.js';\r\nimport XYZ from './XYZ.js';\r\nimport {createCanvasContext2D} from '../dom.js';\r\nimport {getKeyZXY} from '../tilecoord.js';\r\nimport {toSize} from '../size.js';\r\n\r\nclass LabeledTile extends Tile {\r\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\r\n   * @param {string} text Text.\r\n   */\r\n  constructor(tileCoord, tileSize, text) {\r\n    super(tileCoord, TileState.LOADED);\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.tileSize_ = tileSize;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.text_ = text;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLCanvasElement}\r\n     */\r\n    this.canvas_ = null;\r\n  }\r\n\r\n  /**\r\n   * Get the image element for this tile.\r\n   * @return {HTMLCanvasElement} Image.\r\n   */\r\n  getImage() {\r\n    if (this.canvas_) {\r\n      return this.canvas_;\r\n    } else {\r\n      const tileSize = this.tileSize_;\r\n      const context = createCanvasContext2D(tileSize[0], tileSize[1]);\r\n\r\n      context.strokeStyle = 'grey';\r\n      context.strokeRect(0.5, 0.5, tileSize[0] + 0.5, tileSize[1] + 0.5);\r\n\r\n      context.fillStyle = 'grey';\r\n      context.strokeStyle = 'white';\r\n      context.textAlign = 'center';\r\n      context.textBaseline = 'middle';\r\n      context.font = '24px sans-serif';\r\n      context.lineWidth = 4;\r\n      context.strokeText(\r\n        this.text_,\r\n        tileSize[0] / 2,\r\n        tileSize[1] / 2,\r\n        tileSize[0]\r\n      );\r\n      context.fillText(\r\n        this.text_,\r\n        tileSize[0] / 2,\r\n        tileSize[1] / 2,\r\n        tileSize[0]\r\n      );\r\n\r\n      this.canvas_ = context.canvas;\r\n      return context.canvas;\r\n    }\r\n  }\r\n\r\n  load() {}\r\n}\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Optional projection.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\r\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\r\n * @property {number} [zDirection=0] Set to `1` when debugging `VectorTile` sources with\r\n * a default configuration. Indicates which resolution should be used by a renderer if\r\n * the view resolution does not match any resolution of the tile source. If 0, the nearest\r\n * resolution will be used. If 1, the nearest lower resolution will be used. If -1, the\r\n * nearest higher resolution will be used.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A pseudo tile source, which does not fetch tiles from a server, but renders\r\n * a grid outline for the tile grid/projection along with the coordinates for\r\n * each tile. See examples/canvas-tiles for an example.\r\n *\r\n * Uses Canvas context2d, so requires Canvas support.\r\n * @api\r\n */\r\nclass TileDebug extends XYZ {\r\n  /**\r\n   * @param {Options=} opt_options Debug tile options.\r\n   */\r\n  constructor(opt_options) {\r\n    /**\r\n     * @type {Options}\r\n     */\r\n    const options = opt_options || {};\r\n\r\n    super({\r\n      opaque: false,\r\n      projection: options.projection,\r\n      tileGrid: options.tileGrid,\r\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\r\n      zDirection: options.zDirection,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @return {!LabeledTile} Tile.\r\n   */\r\n  getTile(z, x, y) {\r\n    const tileCoordKey = getKeyZXY(z, x, y);\r\n    if (this.tileCache.containsKey(tileCoordKey)) {\r\n      return /** @type {!LabeledTile} */ (this.tileCache.get(tileCoordKey));\r\n    } else {\r\n      const tileSize = toSize(this.tileGrid.getTileSize(z));\r\n      const tileCoord = [z, x, y];\r\n      const textTileCoord = this.getTileCoordForTileUrlFunction(tileCoord);\r\n      let text;\r\n      if (textTileCoord) {\r\n        text =\r\n          'z:' +\r\n          textTileCoord[0] +\r\n          ' x:' +\r\n          textTileCoord[1] +\r\n          ' y:' +\r\n          textTileCoord[2];\r\n      } else {\r\n        text = 'none';\r\n      }\r\n      const tile = new LabeledTile(tileCoord, tileSize, text);\r\n      this.tileCache.set(tileCoordKey, tile);\r\n      return tile;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TileDebug;\r\n","import Map from '../src/ol/Map.js';\r\nimport TileLayer from '../src/ol/layer/Tile.js';\r\nimport View from '../src/ol/View.js';\r\nimport {OSM, TileDebug} from '../src/ol/source.js';\r\n\r\nconst map = new Map({\r\n  layers: [\r\n    new TileLayer({\r\n      source: new OSM(),\r\n    }),\r\n    new TileLayer({\r\n      source: new TileDebug(),\r\n    }),\r\n  ],\r\n  target: 'map',\r\n  view: new View({\r\n    center: [0, 0],\r\n    zoom: 1,\r\n  }),\r\n});\r\n"],"sourceRoot":""}