{"version":3,"sources":["webpack:///../node_modules/chaikin-smooth/index.js","webpack:///./chaikin.js","webpack:///../node_modules/vec2-copy/index.js"],"names":["copy","module","exports","input","output","Array","isArray","length","push","i","p0","p1","p0x","p0y","p1x","p1y","Q","R","const","vectorSource","map","layers","source","opacity","target","view","center","zoom","shallSmoothen","document","getElementById","numIterations","draw","type","addInteraction","on","event","checked","geometry","feature","getGeometry","smoothened","path","Math","min","max","makeSmooth","getCoordinates","parseInt","value","setCoordinates","out","a"],"mappings":"8EAAA,IAAIA,EAAO,EAAQ,KAEnBC,EAAOC,QAAU,SAASC,EAAOC,GACxBC,MAAMC,QAAQF,KACfA,EAAS,IAETD,EAAMI,OAAO,GACbH,EAAOI,KAAKR,EAAK,CAAC,EAAG,GAAIG,EAAM,KACnC,IAAK,IAAIM,EAAE,EAAGA,EAAEN,EAAMI,OAAO,EAAGE,IAAK,CACjC,IAAIC,EAAKP,EAAMM,GACXE,EAAKR,EAAMM,EAAE,GACbG,EAAMF,EAAG,GACTG,EAAMH,EAAG,GACTI,EAAMH,EAAG,GACTI,EAAMJ,EAAG,GAETK,EAAI,CAAE,IAAOJ,EAAM,IAAOE,EAAK,IAAOD,EAAM,IAAOE,GACnDE,EAAI,CAAE,IAAOL,EAAM,IAAOE,EAAK,IAAOD,EAAM,IAAOE,GACvDX,EAAOI,KAAKQ,GACZZ,EAAOI,KAAKS,GAIhB,OAFId,EAAMI,OAAS,GACfH,EAAOI,KAAKR,EAAK,CAAC,EAAG,GAAIG,EAAOA,EAAMI,OAAO,KAC1CH,I,iCCvBX,iFAiBAc,IAAMC,EAAe,IAAI,IAAa,IAEhCC,EAAM,IAAI,IAAI,CAClBC,OAAQ,CACN,IAAI,IAAU,CACZC,OAAQ,IAAI,IACZC,QAAS,KAEX,IAAI,IAAY,CACdD,OAAQH,KAGZK,OAAQ,MACRC,KAAM,IAAI,IAAK,CACbC,OAAQ,CAAC,YAAa,aACtBC,KAAM,MAIJC,EAAgBC,SAASC,eAAe,kBACxCC,EAAgBF,SAASC,eAAe,cAExCE,EAAO,IAAI,IAAK,CACpBV,OAAQH,EACRc,KAAM,eAERb,EAAIc,eAAeF,GACnBA,EAAKG,GAAG,WAAW,SAAUC,GAC3B,GAAKR,EAAcS,QAAnB,CAGAnB,IACMoB,EADOF,EAAMG,QACGC,cAEhBC,EA3CR,SAAoBC,EAAMX,GAExB,IADAA,EAAgBY,KAAKC,IAAID,KAAKE,IAAId,EAAe,GAAI,IAC9CA,EAAgB,GACrBW,EAAO,IAAOA,GACdX,IAEF,OAAOW,EAqCYI,CADJR,EAASS,iBACcC,SAASjB,EAAckB,MAAO,KAAO,GAC3EX,EAASY,eAAeT,Q,kBCpD1BxC,EAAOC,QAAU,SAAkBiD,EAAKC,GAGpC,OAFAD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACJD,K","file":"chaikin.js","sourcesContent":["var copy = require('vec2-copy')\n\nmodule.exports = function(input, output) {\n    if (!Array.isArray(output))\n        output = []\n\n    if (input.length>0)\n        output.push(copy([0, 0], input[0]))\n    for (var i=0; i<input.length-1; i++) {\n        var p0 = input[i]\n        var p1 = input[i+1]\n        var p0x = p0[0],\n            p0y = p0[1],\n            p1x = p1[0],\n            p1y = p1[1]\n\n        var Q = [ 0.75 * p0x + 0.25 * p1x, 0.75 * p0y + 0.25 * p1y ]\n        var R = [ 0.25 * p0x + 0.75 * p1x, 0.25 * p0y + 0.75 * p1y ]\n        output.push(Q)\n        output.push(R)\n    }\n    if (input.length > 1)\n        output.push(copy([0, 0], input[ input.length-1 ]))\n    return output\n}","import Draw from '../src/ol/interaction/Draw.js';\r\nimport Map from '../src/ol/Map.js';\r\nimport View from '../src/ol/View.js';\r\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\r\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\r\n\r\nimport smooth from 'chaikin-smooth';\r\n\r\nfunction makeSmooth(path, numIterations) {\r\n  numIterations = Math.min(Math.max(numIterations, 1), 10);\r\n  while (numIterations > 0) {\r\n    path = smooth(path);\r\n    numIterations--;\r\n  }\r\n  return path;\r\n}\r\n\r\nconst vectorSource = new VectorSource({});\r\n\r\nconst map = new Map({\r\n  layers: [\r\n    new TileLayer({\r\n      source: new OSM(),\r\n      opacity: 0.5,\r\n    }),\r\n    new VectorLayer({\r\n      source: vectorSource,\r\n    }),\r\n  ],\r\n  target: 'map',\r\n  view: new View({\r\n    center: [1078373.595, 6871994.591],\r\n    zoom: 5,\r\n  }),\r\n});\r\n\r\nconst shallSmoothen = document.getElementById('shall-smoothen');\r\nconst numIterations = document.getElementById('iterations');\r\n\r\nconst draw = new Draw({\r\n  source: vectorSource,\r\n  type: 'LineString',\r\n});\r\nmap.addInteraction(draw);\r\ndraw.on('drawend', function (event) {\r\n  if (!shallSmoothen.checked) {\r\n    return;\r\n  }\r\n  const feat = event.feature;\r\n  const geometry = feat.getGeometry();\r\n  const coords = geometry.getCoordinates();\r\n  const smoothened = makeSmooth(coords, parseInt(numIterations.value, 10) || 5);\r\n  geometry.setCoordinates(smoothened);\r\n});\r\n","module.exports = function vec2Copy(out, a) {\n    out[0] = a[0]\n    out[1] = a[1]\n    return out\n}"],"sourceRoot":""}