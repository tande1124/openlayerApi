{"version":3,"sources":["webpack:///./hit-tolerance-priority.js"],"names":["map","target","view","center","resolution","resolutions","vectorLayer","source","features","geometry","color","style","feature","image","radius","fill","get","stroke","width","addLayer","const","highlightFeature","NaN","setStyle","getSource","addFeature","on","e","forEachFeatureAtPixel","pixel","setGeometry","getGeometry","clone","hitTolerance"],"mappings":"2FAAA,yFASMA,EAAM,IAAI,IAAI,CAClBC,OAAQ,MACRC,KAAM,IAAI,IAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,WAAY,EACZC,YAAa,CAAC,OAIZC,EAAc,IAAI,IAAY,CAClCC,OAAQ,IAAI,IAAa,CACvBC,SAAU,CACR,IAAI,IAAQ,CACVC,SAAU,IAAI,IAAM,CAAC,EAAG,IACxBC,MAAO,UAET,IAAI,IAAQ,CACVD,SAAU,IAAI,IAAM,EAAE,GAAI,IAC1BC,MAAO,YAET,IAAI,IAAQ,CACVD,SAAU,IAAI,IAAM,EAAE,IAAK,KAC3BC,MAAO,WAET,IAAI,IAAQ,CACVD,SAAU,IAAI,IAAM,EAAE,GAAI,KAC1BC,MAAO,YAIbC,MAAO,SAACC,GACN,OAAO,IAAI,IAAM,CACfC,MAAO,IAAI,IAAY,CACrBC,OAAQ,EACRC,KAAM,IAAI,IAAK,CACbL,MAAOE,EAAQI,IAAI,WAErBC,OAAQ,IAAI,IAAO,CACjBP,MAAO,OACPQ,MAAO,WAMjBlB,EAAImB,SAASb,GAEbc,IAAMC,EAAmB,IAAI,IAAQ,IAAI,IAAM,CAACC,IAAKA,OACrDD,EAAiBE,SACf,IAAI,IAAM,CACRV,MAAO,IAAI,IAAY,CACrBC,OAAQ,EACRG,OAAQ,IAAI,IAAO,CACjBP,MAAO,QACPQ,MAAO,SAKfZ,EAAYkB,YAAYC,WAAWJ,GACnCrB,EAAI0B,GAAG,eAAe,SAACC,GACT3B,EAAI4B,sBACdD,EAAEE,OACF,SAACjB,GAEC,OADAS,EAAiBS,YAAYlB,EAAQmB,cAAcC,UAC5C,IAET,CACEC,aAAc,MAIhBZ,EAAiBS,YAAY,IAAI,IAAM,CAACR,IAAKA,Y","file":"hit-tolerance-priority.js","sourcesContent":["import CircleStyle from '../src/ol/style/Circle.js';\r\nimport Feature from '../src/ol/Feature.js';\r\nimport Map from '../src/ol/Map.js';\r\nimport VectorLayer from '../src/ol/layer/Vector.js';\r\nimport VectorSource from '../src/ol/source/Vector.js';\r\nimport View from '../src/ol/View.js';\r\nimport {Fill, Stroke, Style} from '../src/ol/style.js';\r\nimport {Point} from '../src/ol/geom.js';\r\n\r\nconst map = new Map({\r\n  target: 'map',\r\n  view: new View({\r\n    center: [0, 0],\r\n    resolution: 1,\r\n    resolutions: [1],\r\n  }),\r\n});\r\n\r\nconst vectorLayer = new VectorLayer({\r\n  source: new VectorSource({\r\n    features: [\r\n      new Feature({\r\n        geometry: new Point([0, 0]),\r\n        color: 'white',\r\n      }),\r\n      new Feature({\r\n        geometry: new Point([-10, 0]),\r\n        color: 'fuchsia',\r\n      }),\r\n      new Feature({\r\n        geometry: new Point([-10, -10]),\r\n        color: 'orange',\r\n      }),\r\n      new Feature({\r\n        geometry: new Point([-10, 10]),\r\n        color: 'cyan',\r\n      }),\r\n    ],\r\n  }),\r\n  style: (feature) => {\r\n    return new Style({\r\n      image: new CircleStyle({\r\n        radius: 5,\r\n        fill: new Fill({\r\n          color: feature.get('color'),\r\n        }),\r\n        stroke: new Stroke({\r\n          color: 'gray',\r\n          width: 1,\r\n        }),\r\n      }),\r\n    });\r\n  },\r\n});\r\nmap.addLayer(vectorLayer);\r\n\r\nconst highlightFeature = new Feature(new Point([NaN, NaN]));\r\nhighlightFeature.setStyle(\r\n  new Style({\r\n    image: new CircleStyle({\r\n      radius: 5,\r\n      stroke: new Stroke({\r\n        color: 'black',\r\n        width: 2,\r\n      }),\r\n    }),\r\n  })\r\n);\r\nvectorLayer.getSource().addFeature(highlightFeature);\r\nmap.on('pointermove', (e) => {\r\n  const hit = map.forEachFeatureAtPixel(\r\n    e.pixel,\r\n    (feature) => {\r\n      highlightFeature.setGeometry(feature.getGeometry().clone());\r\n      return true;\r\n    },\r\n    {\r\n      hitTolerance: 10,\r\n    }\r\n  );\r\n  if (!hit) {\r\n    highlightFeature.setGeometry(new Point([NaN, NaN]));\r\n  }\r\n});\r\n"],"sourceRoot":""}