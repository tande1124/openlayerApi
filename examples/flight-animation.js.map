{"version":3,"sources":["webpack:///./flight-animation.js"],"names":["tileLayer","source","layer","map","layers","target","view","center","zoom","style","stroke","color","width","flightsSource","wrapX","attributions","loader","fetch","then","response","json","const","flightsData","flights","i","length","flight","from","to","arcLine","arc","GreatCircle","x","y","Arc","offset","geometries","line","coords","transform","addLater","geometry","finished","on","animateFlights","flightsLayer","feature","get","addLayer","event","vectorContext","frameState","setStyle","features","getFeatures","getGeometry","getCoordinates","elapsedPoints","time","set","maxIndex","Math","min","currentLine","slice","drawGeometry","render","timeout","window","setTimeout","Date","getTime","addFeature"],"mappings":"2FAAA,gGAUMA,EAAY,IAAI,IAAU,CAC9BC,OAAQ,IAAI,IAAO,CACjBC,MAAO,YAILC,EAAM,IAAI,IAAI,CAClBC,OAAQ,CAACJ,GACTK,OAAQ,MACRC,KAAM,IAAI,IAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAIJC,EAAQ,IAAI,IAAM,CACtBC,OAAQ,IAAI,IAAO,CACjBC,MAAO,UACPC,MAAO,MAILC,EAAgB,IAAI,IAAa,CACrCC,OAAO,EACPC,aACE,6EAEFC,OAAQ,WAENC,MADY,iCAETC,MAAK,SAAUC,GACd,OAAOA,EAASC,UAEjBF,MAAK,SAAUE,GAEd,IADAC,IAAMC,EAAcF,EAAKG,QAChBC,EAAI,EAAGA,EAAIF,EAAYG,OAAQD,IAAK,CAC3CH,IAAMK,EAASJ,EAAYE,GACrBG,EAAOD,EAAO,GACdE,EAAKF,EAAO,GAQZG,EALe,IAAIC,IAAIC,YAC3B,CAACC,EAAGL,EAAK,GAAIM,EAAGN,EAAK,IACrB,CAACK,EAAGJ,EAAG,GAAIK,EAAGL,EAAG,KAGUM,IAAI,IAAK,CAACC,OAAQ,KAC/C,GAAkC,IAA9BN,EAAQO,WAAWX,OAAc,CACnCJ,IAAMgB,EAAO,IAAI,IAAWR,EAAQO,WAAW,GAAGE,QAClDD,EAAKE,UAAU,YAAa,aAQ5BC,EANgB,IAAI,IAAQ,CAC1BC,SAAUJ,EACVK,UAAU,IAIU,GAAJlB,IAGtBxB,EAAU2C,GAAG,aAAcC,SAK7BC,EAAe,IAAI,IAAY,CACnC5C,OAAQY,EACRJ,MAAO,SAAUqC,GAGf,OAAIA,EAAQC,IAAI,YACPtC,EAEA,QAKbN,EAAI6C,SAASH,GAGb,SAASD,EAAeK,GACtB5B,IAAM6B,EAAgB,YAAiBD,GACjCE,EAAaF,EAAME,WACzBD,EAAcE,SAAS3C,GAGvB,IADAY,IAAMgC,EAAWxC,EAAcyC,cACtB9B,EAAI,EAAGA,EAAI6B,EAAS5B,OAAQD,IAAK,CACxCH,IAAMyB,EAAUO,EAAS7B,GACzB,IAAKsB,EAAQC,IAAI,YAAa,CAE5B1B,IAAMiB,EAASQ,EAAQS,cAAcC,iBAE/BC,EAbQ,IAYMN,EAAWO,KAAOZ,EAAQC,IAAI,UAG9CU,GAAiBnB,EAAOb,QAC1BqB,EAAQa,IAAI,YAAY,GAG1BtC,IAAMuC,EAAWC,KAAKC,IAAIL,EAAenB,EAAOb,QAC1CsC,EAAc,IAAI,IAAWzB,EAAO0B,MAAM,EAAGJ,IAGnDV,EAAce,aAAaF,IAI/B5D,EAAI+D,SAGN,SAAS1B,EAASM,EAASqB,GACzBC,OAAOC,YAAW,WAChBvB,EAAQa,IAAI,SAAS,IAAIW,MAAOC,WAChC1D,EAAc2D,WAAW1B,KACxBqB,M","file":"flight-animation.js","sourcesContent":["import Feature from '../src/ol/Feature.js';\r\nimport LineString from '../src/ol/geom/LineString.js';\r\nimport Map from '../src/ol/Map.js';\r\nimport Stamen from '../src/ol/source/Stamen.js';\r\nimport VectorSource from '../src/ol/source/Vector.js';\r\nimport View from '../src/ol/View.js';\r\nimport {Stroke, Style} from '../src/ol/style.js';\r\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\r\nimport {getVectorContext} from '../src/ol/render.js';\r\n\r\nconst tileLayer = new TileLayer({\r\n  source: new Stamen({\r\n    layer: 'toner',\r\n  }),\r\n});\r\n\r\nconst map = new Map({\r\n  layers: [tileLayer],\r\n  target: 'map',\r\n  view: new View({\r\n    center: [0, 0],\r\n    zoom: 2,\r\n  }),\r\n});\r\n\r\nconst style = new Style({\r\n  stroke: new Stroke({\r\n    color: '#EAE911',\r\n    width: 2,\r\n  }),\r\n});\r\n\r\nconst flightsSource = new VectorSource({\r\n  wrapX: false,\r\n  attributions:\r\n    'Flight data by ' +\r\n    '<a href=\"http://openflights.org/data.html\">OpenFlights</a>,',\r\n  loader: function () {\r\n    const url = 'data/openflights/flights.json';\r\n    fetch(url)\r\n      .then(function (response) {\r\n        return response.json();\r\n      })\r\n      .then(function (json) {\r\n        const flightsData = json.flights;\r\n        for (let i = 0; i < flightsData.length; i++) {\r\n          const flight = flightsData[i];\r\n          const from = flight[0];\r\n          const to = flight[1];\r\n\r\n          // create an arc circle between the two locations\r\n          const arcGenerator = new arc.GreatCircle(\r\n            {x: from[1], y: from[0]},\r\n            {x: to[1], y: to[0]}\r\n          );\r\n\r\n          const arcLine = arcGenerator.Arc(100, {offset: 10});\r\n          if (arcLine.geometries.length === 1) {\r\n            const line = new LineString(arcLine.geometries[0].coords);\r\n            line.transform('EPSG:4326', 'EPSG:3857');\r\n\r\n            const feature = new Feature({\r\n              geometry: line,\r\n              finished: false,\r\n            });\r\n            // add the feature with a delay so that the animation\r\n            // for all features does not start at the same time\r\n            addLater(feature, i * 50);\r\n          }\r\n        }\r\n        tileLayer.on('postrender', animateFlights);\r\n      });\r\n  },\r\n});\r\n\r\nconst flightsLayer = new VectorLayer({\r\n  source: flightsSource,\r\n  style: function (feature) {\r\n    // if the animation is still active for a feature, do not\r\n    // render the feature with the layer style\r\n    if (feature.get('finished')) {\r\n      return style;\r\n    } else {\r\n      return null;\r\n    }\r\n  },\r\n});\r\n\r\nmap.addLayer(flightsLayer);\r\n\r\nconst pointsPerMs = 0.1;\r\nfunction animateFlights(event) {\r\n  const vectorContext = getVectorContext(event);\r\n  const frameState = event.frameState;\r\n  vectorContext.setStyle(style);\r\n\r\n  const features = flightsSource.getFeatures();\r\n  for (let i = 0; i < features.length; i++) {\r\n    const feature = features[i];\r\n    if (!feature.get('finished')) {\r\n      // only draw the lines for which the animation has not finished yet\r\n      const coords = feature.getGeometry().getCoordinates();\r\n      const elapsedTime = frameState.time - feature.get('start');\r\n      const elapsedPoints = elapsedTime * pointsPerMs;\r\n\r\n      if (elapsedPoints >= coords.length) {\r\n        feature.set('finished', true);\r\n      }\r\n\r\n      const maxIndex = Math.min(elapsedPoints, coords.length);\r\n      const currentLine = new LineString(coords.slice(0, maxIndex));\r\n\r\n      // directly draw the line with the vector context\r\n      vectorContext.drawGeometry(currentLine);\r\n    }\r\n  }\r\n  // tell OpenLayers to continue the animation\r\n  map.render();\r\n}\r\n\r\nfunction addLater(feature, timeout) {\r\n  window.setTimeout(function () {\r\n    feature.set('start', new Date().getTime());\r\n    flightsSource.addFeature(feature);\r\n  }, timeout);\r\n}\r\n"],"sourceRoot":""}