{"version":3,"sources":["webpack:///./reprojection.js"],"names":["defs","const","proj27700","setExtent","layers","source","url","crossOrigin","params","projection","attributions","parser","fetch","then","response","text","result","read","options","layer","matrixSet","wrapX","setSource","Date","getFullYear","startResolution","getExtent","resolutions","Array","i","ii","length","Math","pow","serverType","tileGrid","extent","tileSize","map","target","view","center","zoom","baseLayerSelect","document","getElementById","overlayLayerSelect","viewProjSelect","renderEdgesCheckbox","renderEdges","updateViewProjection","newProj","value","newProjExtent","newView","undefined","setView","isGlobal","onchange","updateRenderEdgesOnLayer","getSource","setRenderReprojectionEdges","setOpacity","getLayers","setAt","checked","forEach"],"mappings":"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","file":"reprojection.js","sourcesContent":["import Map from '../src/ol/Map.js';\r\nimport TileGrid from '../src/ol/tilegrid/TileGrid.js';\r\nimport TileLayer from '../src/ol/layer/Tile.js';\r\nimport View from '../src/ol/View.js';\r\nimport WMTS, {optionsFromCapabilities} from '../src/ol/source/WMTS.js';\r\nimport WMTSCapabilities from '../src/ol/format/WMTSCapabilities.js';\r\nimport proj4 from 'proj4';\r\nimport {OSM, TileImage, TileWMS} from '../src/ol/source.js';\r\nimport {getCenter, getWidth} from '../src/ol/extent.js';\r\nimport {get as getProjection, transformExtent} from '../src/ol/proj.js';\r\nimport {register} from '../src/ol/proj/proj4.js';\r\n\r\nproj4.defs(\r\n  'EPSG:27700',\r\n  '+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 ' +\r\n    '+x_0=400000 +y_0=-100000 +ellps=airy ' +\r\n    '+towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489 ' +\r\n    '+units=m +no_defs'\r\n);\r\nproj4.defs(\r\n  'EPSG:23032',\r\n  '+proj=utm +zone=32 +ellps=intl ' +\r\n    '+towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs'\r\n);\r\nproj4.defs(\r\n  'EPSG:5479',\r\n  '+proj=lcc +lat_1=-76.66666666666667 +lat_2=' +\r\n    '-79.33333333333333 +lat_0=-78 +lon_0=163 +x_0=7000000 +y_0=5000000 ' +\r\n    '+ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs'\r\n);\r\nproj4.defs(\r\n  'EPSG:21781',\r\n  '+proj=somerc +lat_0=46.95240555555556 ' +\r\n    '+lon_0=7.439583333333333 +k_0=1 +x_0=600000 +y_0=200000 +ellps=bessel ' +\r\n    '+towgs84=674.4,15.1,405.3,0,0,0,0 +units=m +no_defs'\r\n);\r\nproj4.defs(\r\n  'EPSG:3413',\r\n  '+proj=stere +lat_0=90 +lat_ts=70 +lon_0=-45 +k=1 ' +\r\n    '+x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs'\r\n);\r\nproj4.defs(\r\n  'EPSG:2163',\r\n  '+proj=laea +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0 ' +\r\n    '+a=6370997 +b=6370997 +units=m +no_defs'\r\n);\r\nproj4.defs(\r\n  'ESRI:54009',\r\n  '+proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 ' + '+units=m +no_defs'\r\n);\r\nregister(proj4);\r\n\r\nconst proj27700 = getProjection('EPSG:27700');\r\nproj27700.setExtent([-650000, -150000, 1350000, 1450000]);\r\n\r\nconst proj23032 = getProjection('EPSG:23032');\r\nproj23032.setExtent([-1206118.71, 4021309.92, 1295389.0, 8051813.28]);\r\n\r\nconst proj5479 = getProjection('EPSG:5479');\r\nproj5479.setExtent([6825737.53, 4189159.8, 9633741.96, 5782472.71]);\r\n\r\nconst proj21781 = getProjection('EPSG:21781');\r\nproj21781.setExtent([485071.54, 75346.36, 828515.78, 299941.84]);\r\n\r\nconst proj3413 = getProjection('EPSG:3413');\r\nproj3413.setExtent([-4194304, -4194304, 4194304, 4194304]);\r\n\r\nconst proj2163 = getProjection('EPSG:2163');\r\nproj2163.setExtent([-8040784.5135, -2577524.921, 3668901.4484, 4785105.1096]);\r\n\r\nconst proj54009 = getProjection('ESRI:54009');\r\nproj54009.setExtent([-18e6, -9e6, 18e6, 9e6]);\r\n\r\nconst layers = {};\r\n\r\nlayers['osm'] = new TileLayer({\r\n  source: new OSM(),\r\n});\r\n\r\nlayers['wms4326'] = new TileLayer({\r\n  source: new TileWMS({\r\n    url: 'https://ahocevar.com/geoserver/wms',\r\n    crossOrigin: '',\r\n    params: {\r\n      'LAYERS': 'ne:NE1_HR_LC_SR_W_DR',\r\n      'TILED': true,\r\n    },\r\n    projection: 'EPSG:4326',\r\n  }),\r\n});\r\n\r\nlayers['wms21781'] = new TileLayer({\r\n  source: new TileWMS({\r\n    attributions:\r\n      '© <a href=\"https://shop.swisstopo.admin.ch/en/products/maps/national/lk1000\"' +\r\n      'target=\"_blank\">Pixelmap 1:1000000 / geo.admin.ch</a>',\r\n    crossOrigin: 'anonymous',\r\n    params: {\r\n      'LAYERS': 'ch.swisstopo.pixelkarte-farbe-pk1000.noscale',\r\n      'FORMAT': 'image/jpeg',\r\n    },\r\n    url: 'https://wms.geo.admin.ch/',\r\n    projection: 'EPSG:21781',\r\n  }),\r\n});\r\n\r\nconst parser = new WMTSCapabilities();\r\n\r\nlayers['wmts3413'] = new TileLayer();\r\nconst urlA =\r\n  'https://map1.vis.earthdata.nasa.gov/wmts-arctic/' +\r\n  'wmts.cgi?SERVICE=WMTS&request=GetCapabilities';\r\nfetch(urlA)\r\n  .then(function (response) {\r\n    return response.text();\r\n  })\r\n  .then(function (text) {\r\n    const result = parser.read(text);\r\n    const options = optionsFromCapabilities(result, {\r\n      layer: 'OSM_Land_Mask',\r\n      matrixSet: 'EPSG3413_250m',\r\n    });\r\n    options.crossOrigin = '';\r\n    options.projection = 'EPSG:3413';\r\n    options.wrapX = false;\r\n    layers['wmts3413'].setSource(new WMTS(options));\r\n  });\r\n\r\nlayers['bng'] = new TileLayer();\r\nconst urlB =\r\n  'https://tiles.arcgis.com/tiles/qHLhLQrcvEnxjtPr/arcgis/rest/services/OS_Open_Raster/MapServer/WMTS';\r\nfetch(urlB)\r\n  .then(function (response) {\r\n    return response.text();\r\n  })\r\n  .then(function (text) {\r\n    const result = parser.read(text);\r\n    const options = optionsFromCapabilities(result, {\r\n      layer: 'OS_Open_Raster',\r\n    });\r\n    options.attributions =\r\n      'Contains OS data © Crown Copyright and database right ' +\r\n      new Date().getFullYear();\r\n    options.crossOrigin = '';\r\n    options.projection = 'EPSG:27700';\r\n    options.wrapX = false;\r\n    layers['bng'].setSource(new WMTS(options));\r\n  });\r\n\r\nconst startResolution = getWidth(getProjection('EPSG:3857').getExtent()) / 256;\r\nconst resolutions = new Array(22);\r\nfor (let i = 0, ii = resolutions.length; i < ii; ++i) {\r\n  resolutions[i] = startResolution / Math.pow(2, i);\r\n}\r\n\r\nlayers['states'] = new TileLayer({\r\n  source: new TileWMS({\r\n    url: 'https://ahocevar.com/geoserver/wms',\r\n    crossOrigin: '',\r\n    params: {'LAYERS': 'topp:states'},\r\n    serverType: 'geoserver',\r\n    tileGrid: new TileGrid({\r\n      extent: [-13884991, 2870341, -7455066, 6338219],\r\n      resolutions: resolutions,\r\n      tileSize: [512, 256],\r\n    }),\r\n    projection: 'EPSG:3857',\r\n  }),\r\n});\r\n\r\nconst map = new Map({\r\n  layers: [layers['osm'], layers['bng']],\r\n  target: 'map',\r\n  view: new View({\r\n    projection: 'EPSG:3857',\r\n    center: [0, 0],\r\n    zoom: 2,\r\n  }),\r\n});\r\n\r\nconst baseLayerSelect = document.getElementById('base-layer');\r\nconst overlayLayerSelect = document.getElementById('overlay-layer');\r\nconst viewProjSelect = document.getElementById('view-projection');\r\nconst renderEdgesCheckbox = document.getElementById('render-edges');\r\nlet renderEdges = false;\r\n\r\nfunction updateViewProjection() {\r\n  const newProj = getProjection(viewProjSelect.value);\r\n  const newProjExtent = newProj.getExtent();\r\n  const newView = new View({\r\n    projection: newProj,\r\n    center: getCenter(newProjExtent || [0, 0, 0, 0]),\r\n    zoom: 0,\r\n    extent: newProjExtent || undefined,\r\n  });\r\n  map.setView(newView);\r\n\r\n  // Example how to prevent double occurrence of map by limiting layer extent\r\n  if (newProj.isGlobal()) {\r\n    layers['bng'].setExtent(\r\n      transformExtent(proj27700.getExtent(), proj27700, newProj, 2)\r\n    );\r\n  } else {\r\n    layers['bng'].setExtent(undefined);\r\n  }\r\n}\r\n\r\n/**\r\n * Handle change event.\r\n */\r\nviewProjSelect.onchange = function () {\r\n  updateViewProjection();\r\n};\r\n\r\nupdateViewProjection();\r\n\r\nconst updateRenderEdgesOnLayer = function (layer) {\r\n  if (layer instanceof TileLayer) {\r\n    const source = layer.getSource();\r\n    if (source instanceof TileImage) {\r\n      source.setRenderReprojectionEdges(renderEdges);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Handle change event.\r\n */\r\nbaseLayerSelect.onchange = function () {\r\n  const layer = layers[baseLayerSelect.value];\r\n  if (layer) {\r\n    layer.setOpacity(1);\r\n    updateRenderEdgesOnLayer(layer);\r\n    map.getLayers().setAt(0, layer);\r\n  }\r\n};\r\n\r\n/**\r\n * Handle change event.\r\n */\r\noverlayLayerSelect.onchange = function () {\r\n  const layer = layers[overlayLayerSelect.value];\r\n  if (layer) {\r\n    layer.setOpacity(0.7);\r\n    updateRenderEdgesOnLayer(layer);\r\n    map.getLayers().setAt(1, layer);\r\n  }\r\n};\r\n\r\n/**\r\n * Handle change event.\r\n */\r\nrenderEdgesCheckbox.onchange = function () {\r\n  renderEdges = renderEdgesCheckbox.checked;\r\n  map.getLayers().forEach(function (layer) {\r\n    updateRenderEdgesOnLayer(layer);\r\n  });\r\n};\r\n"],"sourceRoot":""}