{"version":3,"sources":["webpack:///./earthquake-clusters.js"],"names":["maxFeatureCount","earthquakeFill","color","earthquakeStroke","width","textFill","textStroke","invisibleFill","createEarthquakeStyle","feature","const","name","get","radius","parseFloat","substr","geometry","getGeometry","image","radius1","radius2","points","angle","Math","PI","fill","stroke","let","currentResolution","vector","source","distance","url","format","extractStyles","style","resolution","features","getSource","getFeatures","i","length","jj","originalFeatures","extent","j","getExtent","max","set","calculateClusterInfo","size","min","text","toString","raster","layer","layers","interactions","extend","condition","evt","type","originalFeature","styles","push","target","view","center","zoom"],"mappings":"2FAAA,WA0DIA,EA1DJ,sIAmBMC,EAAiB,IAAI,IAAK,CAC9BC,MAAO,2BAEHC,EAAmB,IAAI,IAAO,CAClCD,MAAO,yBACPE,MAAO,IAEHC,EAAW,IAAI,IAAK,CACxBH,MAAO,SAEHI,EAAa,IAAI,IAAO,CAC5BJ,MAAO,qBACPE,MAAO,IAEHG,EAAgB,IAAI,IAAK,CAC7BL,MAAO,8BAGT,SAASM,EAAsBC,GAI7BC,IAAMC,EAAOF,EAAQG,IAAI,QAEnBC,EAAS,EAAI,IADDC,WAAWH,EAAKI,OAAO,IACJ,GAErC,OAAO,IAAI,IAAM,CACfC,SAAUP,EAAQQ,cAClBC,MAAO,IAAI,IAAa,CACtBC,QAASN,EACTO,QAAS,EACTC,OAAQ,EACRC,MAAOC,KAAKC,GACZC,KAAMxB,EACNyB,OAAQvB,MAMdwB,IAmBIC,EAnBAC,EAAS,KAkEbA,EAAS,IAAI,IAAY,CACvBC,OAAQ,IAAI,IAAQ,CAClBC,SAAU,GACVD,OAAQ,IAAI,IAAa,CACvBE,IAAK,qCACLC,OAAQ,IAAI,IAAI,CACdC,eAAe,QAIrBC,MAxDF,SAAuB1B,EAAS2B,GAC1BA,GAAcR,KApBS,SAAUQ,GACrCpC,EAAkB,EAGlB,IAFAU,IACID,EAASI,EADPwB,EAAWR,EAAOS,YAAYC,cAE3BC,EAAIH,EAASI,OAAS,EAAGD,GAAK,IAAKA,EAAG,CAE7C9B,IAEOgC,EAFDC,GADNlC,EAAU4B,EAASG,IACc5B,IAAI,YAC/BgC,EAAS,cACXC,OAAA,EACJ,IAAKA,EAAI,EAAGH,EAAKC,EAAiBF,OAAQI,EAAIH,IAAMG,EAClD,YAAOD,EAAQD,EAAiBE,GAAG5B,cAAc6B,aAEnD9C,EAAkBuB,KAAKwB,IAAI/C,EAAiB0C,GAC5C7B,EAAU,KAAQ,YAAS+B,GAAU,YAAUA,IAAYR,EAC3D3B,EAAQuC,IAAI,SAAUnC,IAOtBoC,CAAqBb,GACrBR,EAAoBQ,GAGtB1B,IAAMwC,EAAOzC,EAAQG,IAAI,YAAY6B,OAmBrC,OAlBIS,EAAO,EACD,IAAI,IAAM,CAChBhC,MAAO,IAAI,IAAY,CACrBL,OAAQJ,EAAQG,IAAI,UACpBa,KAAM,IAAI,IAAK,CACbvB,MAAO,CAAC,IAAK,IAAK,EAAGqB,KAAK4B,IAAI,GAAK,GAAMD,EAAOlD,QAGpDoD,KAAM,IAAI,IAAK,CACbA,KAAMF,EAAKG,WACX5B,KAAMpB,EACNqB,OAAQpB,MAKJE,EADgBC,EAAQG,IAAI,YAAY,OAqCpDF,IAAM4C,EAAS,IAAI,IAAU,CAC3BxB,OAAQ,IAAI,IAAO,CACjByB,MAAO,YAIC,IAAI,IAAI,CAClBC,OAAQ,CAACF,EAAQzB,GACjB4B,aAAc,cAAsBC,OAAO,CACzC,IAAI,IAAO,CACTC,UAAW,SAAUC,GACnB,MAAmB,eAAZA,EAAIC,MAAqC,eAAZD,EAAIC,MAE1C1B,MA5CN,SAA6B1B,GAW3B,IAVAC,IASIoD,EATEC,EAAS,CACb,IAAI,IAAM,CACR7C,MAAO,IAAI,IAAY,CACrBL,OAAQJ,EAAQG,IAAI,UACpBa,KAAMlB,OAINoC,EAAmBlC,EAAQG,IAAI,YAE5B4B,EAAIG,EAAiBF,OAAS,EAAGD,GAAK,IAAKA,EAClDsB,EAAkBnB,EAAiBH,GACnCuB,EAAOC,KAAKxD,EAAsBsD,IAEpC,OAAOC,OAgCPE,OAAQ,MACRC,KAAM,IAAI,IAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,Q","file":"earthquake-clusters.js","sourcesContent":["import KML from '../src/ol/format/KML.js';\r\nimport Map from '../src/ol/Map.js';\r\nimport View from '../src/ol/View.js';\r\nimport {\r\n  Circle as CircleStyle,\r\n  Fill,\r\n  RegularShape,\r\n  Stroke,\r\n  Style,\r\n  Text,\r\n} from '../src/ol/style.js';\r\nimport {Cluster, Stamen, Vector as VectorSource} from '../src/ol/source.js';\r\nimport {\r\n  Select,\r\n  defaults as defaultInteractions,\r\n} from '../src/ol/interaction.js';\r\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\r\nimport {createEmpty, extend, getHeight, getWidth} from '../src/ol/extent.js';\r\n\r\nconst earthquakeFill = new Fill({\r\n  color: 'rgba(255, 153, 0, 0.8)',\r\n});\r\nconst earthquakeStroke = new Stroke({\r\n  color: 'rgba(255, 204, 0, 0.2)',\r\n  width: 1,\r\n});\r\nconst textFill = new Fill({\r\n  color: '#fff',\r\n});\r\nconst textStroke = new Stroke({\r\n  color: 'rgba(0, 0, 0, 0.6)',\r\n  width: 3,\r\n});\r\nconst invisibleFill = new Fill({\r\n  color: 'rgba(255, 255, 255, 0.01)',\r\n});\r\n\r\nfunction createEarthquakeStyle(feature) {\r\n  // 2012_Earthquakes_Mag5.kml stores the magnitude of each earthquake in a\r\n  // standards-violating <magnitude> tag in each Placemark.  We extract it\r\n  // from the Placemark's name instead.\r\n  const name = feature.get('name');\r\n  const magnitude = parseFloat(name.substr(2));\r\n  const radius = 5 + 20 * (magnitude - 5);\r\n\r\n  return new Style({\r\n    geometry: feature.getGeometry(),\r\n    image: new RegularShape({\r\n      radius1: radius,\r\n      radius2: 3,\r\n      points: 5,\r\n      angle: Math.PI,\r\n      fill: earthquakeFill,\r\n      stroke: earthquakeStroke,\r\n    }),\r\n  });\r\n}\r\n\r\nlet maxFeatureCount;\r\nlet vector = null;\r\nconst calculateClusterInfo = function (resolution) {\r\n  maxFeatureCount = 0;\r\n  const features = vector.getSource().getFeatures();\r\n  let feature, radius;\r\n  for (let i = features.length - 1; i >= 0; --i) {\r\n    feature = features[i];\r\n    const originalFeatures = feature.get('features');\r\n    const extent = createEmpty();\r\n    let j, jj;\r\n    for (j = 0, jj = originalFeatures.length; j < jj; ++j) {\r\n      extend(extent, originalFeatures[j].getGeometry().getExtent());\r\n    }\r\n    maxFeatureCount = Math.max(maxFeatureCount, jj);\r\n    radius = (0.25 * (getWidth(extent) + getHeight(extent))) / resolution;\r\n    feature.set('radius', radius);\r\n  }\r\n};\r\n\r\nlet currentResolution;\r\nfunction styleFunction(feature, resolution) {\r\n  if (resolution != currentResolution) {\r\n    calculateClusterInfo(resolution);\r\n    currentResolution = resolution;\r\n  }\r\n  let style;\r\n  const size = feature.get('features').length;\r\n  if (size > 1) {\r\n    style = new Style({\r\n      image: new CircleStyle({\r\n        radius: feature.get('radius'),\r\n        fill: new Fill({\r\n          color: [255, 153, 0, Math.min(0.8, 0.4 + size / maxFeatureCount)],\r\n        }),\r\n      }),\r\n      text: new Text({\r\n        text: size.toString(),\r\n        fill: textFill,\r\n        stroke: textStroke,\r\n      }),\r\n    });\r\n  } else {\r\n    const originalFeature = feature.get('features')[0];\r\n    style = createEarthquakeStyle(originalFeature);\r\n  }\r\n  return style;\r\n}\r\n\r\nfunction selectStyleFunction(feature) {\r\n  const styles = [\r\n    new Style({\r\n      image: new CircleStyle({\r\n        radius: feature.get('radius'),\r\n        fill: invisibleFill,\r\n      }),\r\n    }),\r\n  ];\r\n  const originalFeatures = feature.get('features');\r\n  let originalFeature;\r\n  for (let i = originalFeatures.length - 1; i >= 0; --i) {\r\n    originalFeature = originalFeatures[i];\r\n    styles.push(createEarthquakeStyle(originalFeature));\r\n  }\r\n  return styles;\r\n}\r\n\r\nvector = new VectorLayer({\r\n  source: new Cluster({\r\n    distance: 40,\r\n    source: new VectorSource({\r\n      url: 'data/kml/2012_Earthquakes_Mag5.kml',\r\n      format: new KML({\r\n        extractStyles: false,\r\n      }),\r\n    }),\r\n  }),\r\n  style: styleFunction,\r\n});\r\n\r\nconst raster = new TileLayer({\r\n  source: new Stamen({\r\n    layer: 'toner',\r\n  }),\r\n});\r\n\r\nconst map = new Map({\r\n  layers: [raster, vector],\r\n  interactions: defaultInteractions().extend([\r\n    new Select({\r\n      condition: function (evt) {\r\n        return evt.type == 'pointermove' || evt.type == 'singleclick';\r\n      },\r\n      style: selectStyleFunction,\r\n    }),\r\n  ]),\r\n  target: 'map',\r\n  view: new View({\r\n    center: [0, 0],\r\n    zoom: 2,\r\n  }),\r\n});\r\n"],"sourceRoot":""}