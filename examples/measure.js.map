{"version":3,"sources":["webpack:///./measure.js"],"names":["sketch","helpTooltipElement","helpTooltip","measureTooltipElement","measureTooltip","raster","source","vector","style","fill","color","stroke","width","image","radius","map","layers","target","view","center","zoom","on","evt","dragging","let","helpMsg","const","geom","getGeometry","innerHTML","setPosition","coordinate","classList","remove","getViewport","addEventListener","add","draw","typeSelect","document","getElementById","addInteraction","listener","type","value","lineDash","createMeasureTooltip","parentNode","removeChild","createElement","className","element","offset","positioning","addOverlay","createHelpTooltip","feature","tooltipCoord","output","line","length","polygon","area","Math","round","getInteriorPoint","getCoordinates","getLastCoordinate","setOffset","onchange","removeInteraction"],"mappings":"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","file":"measure.js","sourcesContent":["import Draw from '../src/ol/interaction/Draw.js';\r\nimport Map from '../src/ol/Map.js';\r\nimport Overlay from '../src/ol/Overlay.js';\r\nimport View from '../src/ol/View.js';\r\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\r\nimport {LineString, Polygon} from '../src/ol/geom.js';\r\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\r\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\r\nimport {getArea, getLength} from '../src/ol/sphere.js';\r\nimport {unByKey} from '../src/ol/Observable.js';\r\n\r\nconst raster = new TileLayer({\r\n  source: new OSM(),\r\n});\r\n\r\nconst source = new VectorSource();\r\n\r\nconst vector = new VectorLayer({\r\n  source: source,\r\n  style: new Style({\r\n    fill: new Fill({\r\n      color: 'rgba(255, 255, 255, 0.2)',\r\n    }),\r\n    stroke: new Stroke({\r\n      color: '#ffcc33',\r\n      width: 2,\r\n    }),\r\n    image: new CircleStyle({\r\n      radius: 7,\r\n      fill: new Fill({\r\n        color: '#ffcc33',\r\n      }),\r\n    }),\r\n  }),\r\n});\r\n\r\n/**\r\n * Currently drawn feature.\r\n * @type {import(\"../src/ol/Feature.js\").default}\r\n */\r\nlet sketch;\r\n\r\n/**\r\n * The help tooltip element.\r\n * @type {HTMLElement}\r\n */\r\nlet helpTooltipElement;\r\n\r\n/**\r\n * Overlay to show the help messages.\r\n * @type {Overlay}\r\n */\r\nlet helpTooltip;\r\n\r\n/**\r\n * The measure tooltip element.\r\n * @type {HTMLElement}\r\n */\r\nlet measureTooltipElement;\r\n\r\n/**\r\n * Overlay to show the measurement.\r\n * @type {Overlay}\r\n */\r\nlet measureTooltip;\r\n\r\n/**\r\n * Message to show when the user is drawing a polygon.\r\n * @type {string}\r\n */\r\nconst continuePolygonMsg = 'Click to continue drawing the polygon';\r\n\r\n/**\r\n * Message to show when the user is drawing a line.\r\n * @type {string}\r\n */\r\nconst continueLineMsg = 'Click to continue drawing the line';\r\n\r\n/**\r\n * Handle pointer move.\r\n * @param {import(\"../src/ol/MapBrowserEvent\").default} evt The event.\r\n */\r\nconst pointerMoveHandler = function (evt) {\r\n  if (evt.dragging) {\r\n    return;\r\n  }\r\n  /** @type {string} */\r\n  let helpMsg = 'Click to start drawing';\r\n\r\n  if (sketch) {\r\n    const geom = sketch.getGeometry();\r\n    if (geom instanceof Polygon) {\r\n      helpMsg = continuePolygonMsg;\r\n    } else if (geom instanceof LineString) {\r\n      helpMsg = continueLineMsg;\r\n    }\r\n  }\r\n\r\n  helpTooltipElement.innerHTML = helpMsg;\r\n  helpTooltip.setPosition(evt.coordinate);\r\n\r\n  helpTooltipElement.classList.remove('hidden');\r\n};\r\n\r\nconst map = new Map({\r\n  layers: [raster, vector],\r\n  target: 'map',\r\n  view: new View({\r\n    center: [-11000000, 4600000],\r\n    zoom: 15,\r\n  }),\r\n});\r\n\r\nmap.on('pointermove', pointerMoveHandler);\r\n\r\nmap.getViewport().addEventListener('mouseout', function () {\r\n  helpTooltipElement.classList.add('hidden');\r\n});\r\n\r\nconst typeSelect = document.getElementById('type');\r\n\r\nlet draw; // global so we can remove it later\r\n\r\n/**\r\n * Format length output.\r\n * @param {LineString} line The line.\r\n * @return {string} The formatted length.\r\n */\r\nconst formatLength = function (line) {\r\n  const length = getLength(line);\r\n  let output;\r\n  if (length > 100) {\r\n    output = Math.round((length / 1000) * 100) / 100 + ' ' + 'km';\r\n  } else {\r\n    output = Math.round(length * 100) / 100 + ' ' + 'm';\r\n  }\r\n  return output;\r\n};\r\n\r\n/**\r\n * Format area output.\r\n * @param {Polygon} polygon The polygon.\r\n * @return {string} Formatted area.\r\n */\r\nconst formatArea = function (polygon) {\r\n  const area = getArea(polygon);\r\n  let output;\r\n  if (area > 10000) {\r\n    output = Math.round((area / 1000000) * 100) / 100 + ' ' + 'km<sup>2</sup>';\r\n  } else {\r\n    output = Math.round(area * 100) / 100 + ' ' + 'm<sup>2</sup>';\r\n  }\r\n  return output;\r\n};\r\n\r\nfunction addInteraction() {\r\n  const type = typeSelect.value == 'area' ? 'Polygon' : 'LineString';\r\n  draw = new Draw({\r\n    source: source,\r\n    type: type,\r\n    style: new Style({\r\n      fill: new Fill({\r\n        color: 'rgba(255, 255, 255, 0.2)',\r\n      }),\r\n      stroke: new Stroke({\r\n        color: 'rgba(0, 0, 0, 0.5)',\r\n        lineDash: [10, 10],\r\n        width: 2,\r\n      }),\r\n      image: new CircleStyle({\r\n        radius: 5,\r\n        stroke: new Stroke({\r\n          color: 'rgba(0, 0, 0, 0.7)',\r\n        }),\r\n        fill: new Fill({\r\n          color: 'rgba(255, 255, 255, 0.2)',\r\n        }),\r\n      }),\r\n    }),\r\n  });\r\n  map.addInteraction(draw);\r\n\r\n  createMeasureTooltip();\r\n  createHelpTooltip();\r\n\r\n  let listener;\r\n  draw.on('drawstart', function (evt) {\r\n    // set sketch\r\n    sketch = evt.feature;\r\n\r\n    /** @type {import(\"../src/ol/coordinate.js\").Coordinate|undefined} */\r\n    let tooltipCoord = evt.coordinate;\r\n\r\n    listener = sketch.getGeometry().on('change', function (evt) {\r\n      const geom = evt.target;\r\n      let output;\r\n      if (geom instanceof Polygon) {\r\n        output = formatArea(geom);\r\n        tooltipCoord = geom.getInteriorPoint().getCoordinates();\r\n      } else if (geom instanceof LineString) {\r\n        output = formatLength(geom);\r\n        tooltipCoord = geom.getLastCoordinate();\r\n      }\r\n      measureTooltipElement.innerHTML = output;\r\n      measureTooltip.setPosition(tooltipCoord);\r\n    });\r\n  });\r\n\r\n  draw.on('drawend', function () {\r\n    measureTooltipElement.className = 'ol-tooltip ol-tooltip-static';\r\n    measureTooltip.setOffset([0, -7]);\r\n    // unset sketch\r\n    sketch = null;\r\n    // unset tooltip so that a new one can be created\r\n    measureTooltipElement = null;\r\n    createMeasureTooltip();\r\n    unByKey(listener);\r\n  });\r\n}\r\n\r\n/**\r\n * Creates a new help tooltip\r\n */\r\nfunction createHelpTooltip() {\r\n  if (helpTooltipElement) {\r\n    helpTooltipElement.parentNode.removeChild(helpTooltipElement);\r\n  }\r\n  helpTooltipElement = document.createElement('div');\r\n  helpTooltipElement.className = 'ol-tooltip hidden';\r\n  helpTooltip = new Overlay({\r\n    element: helpTooltipElement,\r\n    offset: [15, 0],\r\n    positioning: 'center-left',\r\n  });\r\n  map.addOverlay(helpTooltip);\r\n}\r\n\r\n/**\r\n * Creates a new measure tooltip\r\n */\r\nfunction createMeasureTooltip() {\r\n  if (measureTooltipElement) {\r\n    measureTooltipElement.parentNode.removeChild(measureTooltipElement);\r\n  }\r\n  measureTooltipElement = document.createElement('div');\r\n  measureTooltipElement.className = 'ol-tooltip ol-tooltip-measure';\r\n  measureTooltip = new Overlay({\r\n    element: measureTooltipElement,\r\n    offset: [0, -15],\r\n    positioning: 'bottom-center',\r\n  });\r\n  map.addOverlay(measureTooltip);\r\n}\r\n\r\n/**\r\n * Let user change the geometry type.\r\n */\r\ntypeSelect.onchange = function () {\r\n  map.removeInteraction(draw);\r\n  addInteraction();\r\n};\r\n\r\naddInteraction();\r\n"],"sourceRoot":""}