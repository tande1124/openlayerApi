{"version":3,"sources":["webpack:///./vector-esri.js"],"names":["esrijsonFormat","styleCache","fill","color","stroke","width","vectorSource","loader","extent","resolution","projection","const","url","serviceUrl","encodeURIComponent","$","ajax","dataType","success","response","error","alert","message","details","join","features","readFeatures","featureProjection","length","addFeatures","strategy","tileSize","vector","source","style","feature","classify","get","raster","attributions","map","layers","target","document","getElementById","view","center","zoom","displayFeatureInfo","pixel","forEachFeatureAtPixel","push","i","ii","info","innerHTML","getTarget","cursor","on","evt","dragging","getEventPixel","originalEvent"],"mappings":"4FAAA,iHAgBMA,EAAiB,IAAI,IAErBC,EAAa,CACjB,UAAa,IAAI,IAAM,CACrBC,KAAM,IAAI,IAAK,CACbC,MAAO,6BAETC,OAAQ,IAAI,IAAO,CACjBD,MAAO,qBACPE,MAAO,OAGX,IAAO,IAAI,IAAM,CACfH,KAAM,IAAI,IAAK,CACbC,MAAO,yBAETC,OAAQ,IAAI,IAAO,CACjBD,MAAO,2BACPE,MAAO,OAGX,IAAO,IAAI,IAAM,CACfH,KAAM,IAAI,IAAK,CACbC,MAAO,0BAETC,OAAQ,IAAI,IAAO,CACjBD,MAAO,2BACPE,MAAO,MAGX,OAAU,IAAI,IAAM,CAClBH,KAAM,IAAI,IAAK,CACbC,MAAO,2BAETC,OAAQ,IAAI,IAAO,CACjBD,MAAO,2BACPE,MAAO,QAKPC,EAAe,IAAI,IAAa,CACpCC,OAAQ,SAAUC,EAAQC,EAAYC,GACpCC,IAAMC,EACJC,iLAIAC,mBACE,WACEN,EAAO,GACP,WACAA,EAAO,GACP,WACAA,EAAO,GACP,WACAA,EAAO,GACP,wCAbJK,0EAiBFE,EAAEC,KAAK,CACLJ,IAAKA,EACLK,SAAU,QACVC,QAAS,SAAUC,GACjB,GAAIA,EAASC,MACXC,MACEF,EAASC,MAAME,QAAU,KAAOH,EAASC,MAAMG,QAAQC,KAAK,WAEzD,CAELb,IAAMc,EAAWzB,EAAe0B,aAAaP,EAAU,CACrDQ,kBAAmBjB,IAEjBe,EAASG,OAAS,GACpBtB,EAAauB,YAAYJ,QAMnCK,SAAU,YACR,YAAU,CACRC,SAAU,SAKVC,EAAS,IAAI,IAAY,CAC7BC,OAAQ3B,EACR4B,MAAO,SAAUC,GACfxB,IAAMyB,EAAWD,EAAQE,IAAI,cAC7B,OAAOpC,EAAWmC,MAIhBE,EAAS,IAAI,IAAU,CAC3BL,OAAQ,IAAI,IAAI,CACdM,aACE,+GAEF3B,IACE,qGAKA4B,EAAM,IAAI,IAAI,CAClBC,OAAQ,CAACH,EAAQN,GACjBU,OAAQC,SAASC,eAAe,OAChCC,KAAM,IAAI,IAAK,CACbC,OAAQ,YAAW,EAAE,QAAS,UAC9BC,KAAM,MAIJC,EAAqB,SAAUC,GACnCtC,IAAMc,EAAW,GAIjB,GAHAe,EAAIU,sBAAsBD,GAAO,SAAUd,GACzCV,EAAS0B,KAAKhB,MAEZV,EAASG,OAAS,EAAG,CACvBjB,IACIyC,EAAGC,EADDC,EAAO,GAEb,IAAKF,EAAI,EAAGC,EAAK5B,EAASG,OAAQwB,EAAIC,IAAMD,EAC1CE,EAAKH,KAAK1B,EAAS2B,GAAGf,IAAI,eAE5BM,SAASC,eAAe,QAAQW,UAAYD,EAAK9B,KAAK,OAAS,YAC/DgB,EAAIgB,YAAYtB,MAAMuB,OAAS,eAE/Bd,SAASC,eAAe,QAAQW,UAAY,SAC5Cf,EAAIgB,YAAYtB,MAAMuB,OAAS,IAInCjB,EAAIkB,GAAG,eAAe,SAAUC,GAC9B,IAAIA,EAAIC,SAAR,CAGAjD,IAAMsC,EAAQT,EAAIqB,cAAcF,EAAIG,eACpCd,EAAmBC,OAGrBT,EAAIkB,GAAG,SAAS,SAAUC,GACxBX,EAAmBW,EAAIV,Y","file":"vector-esri.js","sourcesContent":["import EsriJSON from '../src/ol/format/EsriJSON.js';\r\nimport Map from '../src/ol/Map.js';\r\nimport VectorSource from '../src/ol/source/Vector.js';\r\nimport View from '../src/ol/View.js';\r\nimport XYZ from '../src/ol/source/XYZ.js';\r\nimport {Fill, Stroke, Style} from '../src/ol/style.js';\r\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\r\nimport {createXYZ} from '../src/ol/tilegrid.js';\r\nimport {fromLonLat} from '../src/ol/proj.js';\r\nimport {tile as tileStrategy} from '../src/ol/loadingstrategy.js';\r\n\r\nconst serviceUrl =\r\n  'https://sampleserver3.arcgisonline.com/ArcGIS/rest/services/' +\r\n  'Petroleum/KSFields/FeatureServer/';\r\nconst layer = '0';\r\n\r\nconst esrijsonFormat = new EsriJSON();\r\n\r\nconst styleCache = {\r\n  'ABANDONED': new Style({\r\n    fill: new Fill({\r\n      color: 'rgba(225, 225, 225, 255)',\r\n    }),\r\n    stroke: new Stroke({\r\n      color: 'rgba(0, 0, 0, 255)',\r\n      width: 0.4,\r\n    }),\r\n  }),\r\n  'GAS': new Style({\r\n    fill: new Fill({\r\n      color: 'rgba(255, 0, 0, 255)',\r\n    }),\r\n    stroke: new Stroke({\r\n      color: 'rgba(110, 110, 110, 255)',\r\n      width: 0.4,\r\n    }),\r\n  }),\r\n  'OIL': new Style({\r\n    fill: new Fill({\r\n      color: 'rgba(56, 168, 0, 255)',\r\n    }),\r\n    stroke: new Stroke({\r\n      color: 'rgba(110, 110, 110, 255)',\r\n      width: 0,\r\n    }),\r\n  }),\r\n  'OILGAS': new Style({\r\n    fill: new Fill({\r\n      color: 'rgba(168, 112, 0, 255)',\r\n    }),\r\n    stroke: new Stroke({\r\n      color: 'rgba(110, 110, 110, 255)',\r\n      width: 0.4,\r\n    }),\r\n  }),\r\n};\r\n\r\nconst vectorSource = new VectorSource({\r\n  loader: function (extent, resolution, projection) {\r\n    const url =\r\n      serviceUrl +\r\n      layer +\r\n      '/query/?f=json&' +\r\n      'returnGeometry=true&spatialRel=esriSpatialRelIntersects&geometry=' +\r\n      encodeURIComponent(\r\n        '{\"xmin\":' +\r\n          extent[0] +\r\n          ',\"ymin\":' +\r\n          extent[1] +\r\n          ',\"xmax\":' +\r\n          extent[2] +\r\n          ',\"ymax\":' +\r\n          extent[3] +\r\n          ',\"spatialReference\":{\"wkid\":102100}}'\r\n      ) +\r\n      '&geometryType=esriGeometryEnvelope&inSR=102100&outFields=*' +\r\n      '&outSR=102100';\r\n    $.ajax({\r\n      url: url,\r\n      dataType: 'jsonp',\r\n      success: function (response) {\r\n        if (response.error) {\r\n          alert(\r\n            response.error.message + '\\n' + response.error.details.join('\\n')\r\n          );\r\n        } else {\r\n          // dataProjection will be read from document\r\n          const features = esrijsonFormat.readFeatures(response, {\r\n            featureProjection: projection,\r\n          });\r\n          if (features.length > 0) {\r\n            vectorSource.addFeatures(features);\r\n          }\r\n        }\r\n      },\r\n    });\r\n  },\r\n  strategy: tileStrategy(\r\n    createXYZ({\r\n      tileSize: 512,\r\n    })\r\n  ),\r\n});\r\n\r\nconst vector = new VectorLayer({\r\n  source: vectorSource,\r\n  style: function (feature) {\r\n    const classify = feature.get('activeprod');\r\n    return styleCache[classify];\r\n  },\r\n});\r\n\r\nconst raster = new TileLayer({\r\n  source: new XYZ({\r\n    attributions:\r\n      'Tiles Â© <a href=\"https://services.arcgisonline.com/ArcGIS/' +\r\n      'rest/services/World_Topo_Map/MapServer\">ArcGIS</a>',\r\n    url:\r\n      'https://server.arcgisonline.com/ArcGIS/rest/services/' +\r\n      'World_Topo_Map/MapServer/tile/{z}/{y}/{x}',\r\n  }),\r\n});\r\n\r\nconst map = new Map({\r\n  layers: [raster, vector],\r\n  target: document.getElementById('map'),\r\n  view: new View({\r\n    center: fromLonLat([-97.6114, 38.8403]),\r\n    zoom: 7,\r\n  }),\r\n});\r\n\r\nconst displayFeatureInfo = function (pixel) {\r\n  const features = [];\r\n  map.forEachFeatureAtPixel(pixel, function (feature) {\r\n    features.push(feature);\r\n  });\r\n  if (features.length > 0) {\r\n    const info = [];\r\n    let i, ii;\r\n    for (i = 0, ii = features.length; i < ii; ++i) {\r\n      info.push(features[i].get('field_name'));\r\n    }\r\n    document.getElementById('info').innerHTML = info.join(', ') || '(unknown)';\r\n    map.getTarget().style.cursor = 'pointer';\r\n  } else {\r\n    document.getElementById('info').innerHTML = '&nbsp;';\r\n    map.getTarget().style.cursor = '';\r\n  }\r\n};\r\n\r\nmap.on('pointermove', function (evt) {\r\n  if (evt.dragging) {\r\n    return;\r\n  }\r\n  const pixel = map.getEventPixel(evt.originalEvent);\r\n  displayFeatureInfo(pixel);\r\n});\r\n\r\nmap.on('click', function (evt) {\r\n  displayFeatureInfo(evt.pixel);\r\n});\r\n"],"sourceRoot":""}