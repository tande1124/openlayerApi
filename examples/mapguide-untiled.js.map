{"version":3,"sources":["webpack:///../src/ol/source/ImageMapGuide.js","webpack:///./mapguide-untiled.js"],"names":["options","super","imageSmoothing","projection","resolutions","this","crossOrigin_","undefined","crossOrigin","displayDpi_","displayDpi","params_","params","url_","url","imageLoadFunction_","imageLoadFunction","hidpi_","hidpi","metersPerUnit_","metersPerUnit","ratio_","ratio","useOverlay_","useOverlay","image_","renderedRevision_","getParams","getImageInternal","extent","resolution","pixelRatio","findNearestResolution","let","image","getRevision","getResolution","getPixelRatio","getExtent","slice","const","size","imageUrl","getUrl","addEventListener","EventType","CHANGE","handleImageChange","bind","getImageLoadFunction","updateParams","changed","baseUrl","scale","dpi","mcsW","mcsH","devW","devH","mpp","getScale","center","baseParams","Math","round","setImageLoadFunction","Map","layers","Image","source","MAPDEFINITION","FORMAT","VERSION","USERNAME","PASSWORD","target","view","View","zoom"],"mappings":"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","file":"mapguide-untiled.js","sourcesContent":["/**\r\n * @module ol/source/ImageMapGuide\r\n */\r\n\r\nimport EventType from '../events/EventType.js';\r\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\r\nimport ImageWrapper from '../Image.js';\r\nimport {appendParams} from '../uri.js';\r\nimport {assign} from '../obj.js';\r\nimport {\r\n  containsExtent,\r\n  getCenter,\r\n  getHeight,\r\n  getWidth,\r\n  scaleFromCenter,\r\n} from '../extent.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [url] The mapagent url.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {number} [displayDpi=96] The display resolution.\r\n * @property {number} [metersPerUnit=1] The meters-per-unit value.\r\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\r\n * the image from the remote server.\r\n * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\r\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\r\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\r\n * @property {Array<number>} [resolutions] Resolutions.\r\n * If specified, requests will be made for these resolutions only.\r\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\r\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\r\n * @property {Object} [params] Additional parameters.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Source for images from Mapguide servers\r\n *\r\n * @fires module:ol/source/Image.ImageSourceEvent\r\n * @api\r\n */\r\nclass ImageMapGuide extends ImageSource {\r\n  /**\r\n   * @param {Options} options ImageMapGuide options.\r\n   */\r\n  constructor(options) {\r\n    super({\r\n      imageSmoothing: options.imageSmoothing,\r\n      projection: options.projection,\r\n      resolutions: options.resolutions,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {?string}\r\n     */\r\n    this.crossOrigin_ =\r\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.displayDpi_ =\r\n      options.displayDpi !== undefined ? options.displayDpi : 96;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object}\r\n     */\r\n    this.params_ = options.params || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|undefined}\r\n     */\r\n    this.url_ = options.url;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../Image.js\").LoadFunction}\r\n     */\r\n    this.imageLoadFunction_ =\r\n      options.imageLoadFunction !== undefined\r\n        ? options.imageLoadFunction\r\n        : defaultImageLoadFunction;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.metersPerUnit_ =\r\n      options.metersPerUnit !== undefined ? options.metersPerUnit : 1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.useOverlay_ =\r\n      options.useOverlay !== undefined ? options.useOverlay : false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../Image.js\").default}\r\n     */\r\n    this.image_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedRevision_ = 0;\r\n  }\r\n\r\n  /**\r\n   * Get the user-provided params, i.e. those passed to the constructor through\r\n   * the \"params\" option, and possibly updated using the updateParams method.\r\n   * @return {Object} Params.\r\n   * @api\r\n   */\r\n  getParams() {\r\n    return this.params_;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {import(\"../Image.js\").default} Single image.\r\n   */\r\n  getImageInternal(extent, resolution, pixelRatio, projection) {\r\n    resolution = this.findNearestResolution(resolution);\r\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\r\n\r\n    let image = this.image_;\r\n    if (\r\n      image &&\r\n      this.renderedRevision_ == this.getRevision() &&\r\n      image.getResolution() == resolution &&\r\n      image.getPixelRatio() == pixelRatio &&\r\n      containsExtent(image.getExtent(), extent)\r\n    ) {\r\n      return image;\r\n    }\r\n\r\n    if (this.ratio_ != 1) {\r\n      extent = extent.slice();\r\n      scaleFromCenter(extent, this.ratio_);\r\n    }\r\n    const width = getWidth(extent) / resolution;\r\n    const height = getHeight(extent) / resolution;\r\n    const size = [width * pixelRatio, height * pixelRatio];\r\n\r\n    if (this.url_ !== undefined) {\r\n      const imageUrl = this.getUrl(\r\n        this.url_,\r\n        this.params_,\r\n        extent,\r\n        size,\r\n        projection\r\n      );\r\n      image = new ImageWrapper(\r\n        extent,\r\n        resolution,\r\n        pixelRatio,\r\n        imageUrl,\r\n        this.crossOrigin_,\r\n        this.imageLoadFunction_\r\n      );\r\n      image.addEventListener(\r\n        EventType.CHANGE,\r\n        this.handleImageChange.bind(this)\r\n      );\r\n    } else {\r\n      image = null;\r\n    }\r\n    this.image_ = image;\r\n    this.renderedRevision_ = this.getRevision();\r\n\r\n    return image;\r\n  }\r\n\r\n  /**\r\n   * Return the image load function of the source.\r\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\r\n   * @api\r\n   */\r\n  getImageLoadFunction() {\r\n    return this.imageLoadFunction_;\r\n  }\r\n\r\n  /**\r\n   * Update the user-provided params.\r\n   * @param {Object} params Params.\r\n   * @api\r\n   */\r\n  updateParams(params) {\r\n    assign(this.params_, params);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * @param {string} baseUrl The mapagent url.\r\n   * @param {Object<string, string|number>} params Request parameters.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {import(\"../size.js\").Size} size Size.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {string} The mapagent map image request URL.\r\n   */\r\n  getUrl(baseUrl, params, extent, size, projection) {\r\n    const scale = getScale(extent, size, this.metersPerUnit_, this.displayDpi_);\r\n    const center = getCenter(extent);\r\n    const baseParams = {\r\n      'OPERATION': this.useOverlay_\r\n        ? 'GETDYNAMICMAPOVERLAYIMAGE'\r\n        : 'GETMAPIMAGE',\r\n      'VERSION': '2.0.0',\r\n      'LOCALE': 'en',\r\n      'CLIENTAGENT': 'ol/source/ImageMapGuide source',\r\n      'CLIP': '1',\r\n      'SETDISPLAYDPI': this.displayDpi_,\r\n      'SETDISPLAYWIDTH': Math.round(size[0]),\r\n      'SETDISPLAYHEIGHT': Math.round(size[1]),\r\n      'SETVIEWSCALE': scale,\r\n      'SETVIEWCENTERX': center[0],\r\n      'SETVIEWCENTERY': center[1],\r\n    };\r\n    assign(baseParams, params);\r\n    return appendParams(baseUrl, baseParams);\r\n  }\r\n\r\n  /**\r\n   * Set the image load function of the MapGuide source.\r\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\r\n   * @api\r\n   */\r\n  setImageLoadFunction(imageLoadFunction) {\r\n    this.image_ = null;\r\n    this.imageLoadFunction_ = imageLoadFunction;\r\n    this.changed();\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../extent.js\").Extent} extent The map extents.\r\n * @param {import(\"../size.js\").Size} size The viewport size.\r\n * @param {number} metersPerUnit The meters-per-unit value.\r\n * @param {number} dpi The display resolution.\r\n * @return {number} The computed map scale.\r\n */\r\nfunction getScale(extent, size, metersPerUnit, dpi) {\r\n  const mcsW = getWidth(extent);\r\n  const mcsH = getHeight(extent);\r\n  const devW = size[0];\r\n  const devH = size[1];\r\n  const mpp = 0.0254 / dpi;\r\n  if (devH * mcsW > devW * mcsH) {\r\n    return (mcsW * metersPerUnit) / (devW * mpp); // width limited\r\n  } else {\r\n    return (mcsH * metersPerUnit) / (devH * mpp); // height limited\r\n  }\r\n}\r\n\r\nexport default ImageMapGuide;\r\n","import ImageLayer from '../src/ol/layer/Image.js';\r\nimport ImageMapGuide from '../src/ol/source/ImageMapGuide.js';\r\nimport Map from '../src/ol/Map.js';\r\nimport View from '../src/ol/View.js';\r\n\r\nconst mdf = 'Library://Samples/Sheboygan/Maps/Sheboygan.MapDefinition';\r\nconst agentUrl = 'http://138.197.230.93:8008/mapguide/mapagent/mapagent.fcgi?';\r\nconst bounds = [\r\n  -87.865114442365922,\r\n  43.665065564837931,\r\n  -87.595394059497067,\r\n  43.823852564430069,\r\n];\r\nconst map = new Map({\r\n  layers: [\r\n    new ImageLayer({\r\n      extent: bounds,\r\n      source: new ImageMapGuide({\r\n        projection: 'EPSG:4326',\r\n        url: agentUrl,\r\n        useOverlay: false,\r\n        metersPerUnit: 111319.4908, //value returned from mapguide\r\n        params: {\r\n          MAPDEFINITION: mdf,\r\n          FORMAT: 'PNG',\r\n          VERSION: '3.0.0',\r\n          USERNAME: 'OLGuest',\r\n          PASSWORD: 'olguest',\r\n        },\r\n        ratio: 2,\r\n      }),\r\n    }),\r\n  ],\r\n  target: 'map',\r\n  view: new View({\r\n    center: [-87.7302542509315, 43.744459064634],\r\n    projection: 'EPSG:4326',\r\n    zoom: 12,\r\n  }),\r\n});\r\n"],"sourceRoot":""}