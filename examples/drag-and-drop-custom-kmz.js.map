{"version":3,"sources":["webpack:///./drag-and-drop-custom-kmz.js"],"names":["zip","JSZip","getKMLData","buffer","let","kmlData","load","const","kmlFile","file","asText","getKMLImage","href","url","path","window","location","slice","lastIndexOf","indexOf","regexp","RegExp","replace","URL","createObjectURL","Blob","asArrayBuffer","KMZ","opt_options","options","iconUrlFunction","super","getType","readFeature","source","readFeatures","dragAndDropInteraction","formatConstructors","map","interactions","extend","layers","target","view","center","zoom","on","event","vectorSource","features","addLayer","getView","fit","getExtent","displayFeatureInfo","pixel","forEachFeatureAtPixel","feature","push","length","i","ii","info","description","get","document","getElementById","innerHTML","join","evt","dragging","getEventPixel","originalEvent","link","addEventListener","filename","fetch","then","response","blob","navigator","msSaveBlob","download","click"],"mappings":"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","file":"drag-and-drop-custom-kmz.js","sourcesContent":["import Map from '../src/ol/Map.js';\r\nimport View from '../src/ol/View.js';\r\nimport {\r\n  DragAndDrop,\r\n  defaults as defaultInteractions,\r\n} from '../src/ol/interaction.js';\r\nimport {GPX, GeoJSON, IGC, KML, TopoJSON} from '../src/ol/format.js';\r\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\r\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\r\n\r\n// Create functions to extract KML and icons from KMZ array buffer,\r\n// which must be done synchronously.\r\n\r\nconst zip = new JSZip();\r\n\r\nfunction getKMLData(buffer) {\r\n  let kmlData;\r\n  zip.load(buffer);\r\n  const kmlFile = zip.file(/.kml$/i)[0];\r\n  if (kmlFile) {\r\n    kmlData = kmlFile.asText();\r\n  }\r\n  return kmlData;\r\n}\r\n\r\nfunction getKMLImage(href) {\r\n  let url = href;\r\n  let path = window.location.href;\r\n  path = path.slice(0, path.lastIndexOf('/') + 1);\r\n  if (href.indexOf(path) === 0) {\r\n    const regexp = new RegExp(href.replace(path, '') + '$', 'i');\r\n    const kmlFile = zip.file(regexp)[0];\r\n    if (kmlFile) {\r\n      url = URL.createObjectURL(new Blob([kmlFile.asArrayBuffer()]));\r\n    }\r\n  }\r\n  return url;\r\n}\r\n\r\n// Define a KMZ format class by subclassing ol/format/KML\r\n\r\nclass KMZ extends KML {\r\n  constructor(opt_options) {\r\n    const options = opt_options || {};\r\n    options.iconUrlFunction = getKMLImage;\r\n    super(options);\r\n  }\r\n\r\n  getType() {\r\n    return 'arraybuffer';\r\n  }\r\n\r\n  readFeature(source, options) {\r\n    const kmlData = getKMLData(source);\r\n    return super.readFeature(kmlData, options);\r\n  }\r\n\r\n  readFeatures(source, options) {\r\n    const kmlData = getKMLData(source);\r\n    return super.readFeatures(kmlData, options);\r\n  }\r\n}\r\n\r\n// Set up map with Drag and Drop interaction\r\n\r\nconst dragAndDropInteraction = new DragAndDrop({\r\n  formatConstructors: [KMZ, GPX, GeoJSON, IGC, KML, TopoJSON],\r\n});\r\n\r\nconst map = new Map({\r\n  interactions: defaultInteractions().extend([dragAndDropInteraction]),\r\n  layers: [\r\n    new TileLayer({\r\n      source: new OSM(),\r\n    }),\r\n  ],\r\n  target: 'map',\r\n  view: new View({\r\n    center: [0, 0],\r\n    zoom: 2,\r\n  }),\r\n});\r\n\r\ndragAndDropInteraction.on('addfeatures', function (event) {\r\n  const vectorSource = new VectorSource({\r\n    features: event.features,\r\n  });\r\n  map.addLayer(\r\n    new VectorLayer({\r\n      source: vectorSource,\r\n    })\r\n  );\r\n  map.getView().fit(vectorSource.getExtent());\r\n});\r\n\r\nconst displayFeatureInfo = function (pixel) {\r\n  const features = [];\r\n  map.forEachFeatureAtPixel(pixel, function (feature) {\r\n    features.push(feature);\r\n  });\r\n  if (features.length > 0) {\r\n    const info = [];\r\n    let i, ii;\r\n    for (i = 0, ii = features.length; i < ii; ++i) {\r\n      const description =\r\n        features[i].get('description') ||\r\n        features[i].get('name') ||\r\n        features[i].get('_name') ||\r\n        features[i].get('layer');\r\n      if (description) {\r\n        info.push(description);\r\n      }\r\n    }\r\n    document.getElementById('info').innerHTML = info.join('<br/>') || '&nbsp';\r\n  } else {\r\n    document.getElementById('info').innerHTML = '&nbsp;';\r\n  }\r\n};\r\n\r\nmap.on('pointermove', function (evt) {\r\n  if (evt.dragging) {\r\n    return;\r\n  }\r\n  const pixel = map.getEventPixel(evt.originalEvent);\r\n  displayFeatureInfo(pixel);\r\n});\r\n\r\nmap.on('click', function (evt) {\r\n  displayFeatureInfo(evt.pixel);\r\n});\r\n\r\n// Sample data download\r\n\r\nconst link = document.getElementById('download');\r\n\r\nfunction download(fullpath, filename) {\r\n  fetch(fullpath)\r\n    .then(function (response) {\r\n      return response.blob();\r\n    })\r\n    .then(function (blob) {\r\n      if (navigator.msSaveBlob) {\r\n        // link download attribuute does not work on MS browsers\r\n        navigator.msSaveBlob(blob, filename);\r\n      } else {\r\n        link.href = URL.createObjectURL(blob);\r\n        link.download = filename;\r\n        link.click();\r\n      }\r\n    });\r\n}\r\n\r\ndocument.getElementById('download-kmz').addEventListener('click', function () {\r\n  download('data/kmz/iceland.kmz', 'iceland.kmz');\r\n});\r\n"],"sourceRoot":""}