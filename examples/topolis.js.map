{"version":3,"sources":["webpack:///./topolis.js"],"names":["raster","source","nodes","wrapX","nodesLayer","style","f","image","radius","fill","color","stroke","width","text","get","id","toString","edges","edgesLayer","faces","facesLayer","font","map","layers","target","view","center","zoom","topo","topolis","createTopology","removeElementFeature","element","const","feature","getFeatureById","removeFeature","createNode","coord","let","existingEdge","getEdgeByPoint","modEdgeSplit","addIsoNode","on","node","geometry","coordinate","setId","addFeature","e","edge","coordinates","setGeometry","face","getFaceGeometry","draw","type","start","end","edgeGeom","getGeometry","getCoordinates","startCoord","endCoord","length","getNodeByPoint","edgesAtStart","edgesAtEnd","crossing","getEdgesByLine","remEdgeNewFace","removeIsoNode","addEdgeNewFaces","toastr","warning","addInteraction","snap","addControl"],"mappings":"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","file":"topolis.js","sourcesContent":["import Feature from '../src/ol/Feature.js';\r\nimport Map from '../src/ol/Map.js';\r\nimport MousePosition from '../src/ol/control/MousePosition.js';\r\nimport View from '../src/ol/View.js';\r\nimport {\r\n  Circle as CircleStyle,\r\n  Fill,\r\n  Stroke,\r\n  Style,\r\n  Text,\r\n} from '../src/ol/style.js';\r\nimport {Draw, Snap} from '../src/ol/interaction.js';\r\nimport {LineString, Point, Polygon} from '../src/ol/geom.js';\r\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\r\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\r\n\r\nconst raster = new TileLayer({\r\n  source: new OSM(),\r\n});\r\n\r\nconst nodes = new VectorSource({wrapX: false});\r\nconst nodesLayer = new VectorLayer({\r\n  source: nodes,\r\n  style: function (f) {\r\n    const style = new Style({\r\n      image: new CircleStyle({\r\n        radius: 8,\r\n        fill: new Fill({color: 'rgba(255, 0, 0, 0.2)'}),\r\n        stroke: new Stroke({color: 'red', width: 1}),\r\n      }),\r\n      text: new Text({\r\n        text: f.get('node').id.toString(),\r\n        fill: new Fill({color: 'red'}),\r\n        stroke: new Stroke({\r\n          color: 'white',\r\n          width: 3,\r\n        }),\r\n      }),\r\n    });\r\n    return [style];\r\n  },\r\n});\r\n\r\nconst edges = new VectorSource({wrapX: false});\r\nconst edgesLayer = new VectorLayer({\r\n  source: edges,\r\n  style: function (f) {\r\n    const style = new Style({\r\n      stroke: new Stroke({\r\n        color: 'blue',\r\n        width: 1,\r\n      }),\r\n      text: new Text({\r\n        text: f.get('edge').id.toString(),\r\n        fill: new Fill({color: 'blue'}),\r\n        stroke: new Stroke({\r\n          color: 'white',\r\n          width: 2,\r\n        }),\r\n      }),\r\n    });\r\n    return [style];\r\n  },\r\n});\r\n\r\nconst faces = new VectorSource({wrapX: false});\r\nconst facesLayer = new VectorLayer({\r\n  source: faces,\r\n  style: function (f) {\r\n    const style = new Style({\r\n      stroke: new Stroke({\r\n        color: 'black',\r\n        width: 1,\r\n      }),\r\n      fill: new Fill({\r\n        color: 'rgba(0, 255, 0, 0.2)',\r\n      }),\r\n      text: new Text({\r\n        font: 'bold 12px sans-serif',\r\n        text: f.get('face').id.toString(),\r\n        fill: new Fill({color: 'green'}),\r\n        stroke: new Stroke({\r\n          color: 'white',\r\n          width: 2,\r\n        }),\r\n      }),\r\n    });\r\n    return [style];\r\n  },\r\n});\r\n\r\nconst map = new Map({\r\n  layers: [raster, facesLayer, edgesLayer, nodesLayer],\r\n  target: 'map',\r\n  view: new View({\r\n    center: [-11000000, 4600000],\r\n    zoom: 16,\r\n  }),\r\n});\r\n\r\nconst topo = topolis.createTopology();\r\n\r\ntopo.on('addnode', nodeToFeature);\r\ntopo.on('removenode', function (e) {\r\n  removeElementFeature(nodes, e);\r\n});\r\ntopo.on('addedge', edgeToFeature);\r\ntopo.on('modedge', function (e) {\r\n  const feature = edges.getFeatureById(e.id);\r\n  feature.setGeometry(new LineString(e.coordinates));\r\n});\r\ntopo.on('removeedge', function (e) {\r\n  removeElementFeature(edges, e);\r\n});\r\ntopo.on('addface', faceToFeature);\r\ntopo.on('removeface', function (e) {\r\n  removeElementFeature(faces, e);\r\n});\r\n\r\nfunction removeElementFeature(source, element) {\r\n  const feature = source.getFeatureById(element.id);\r\n  source.removeFeature(feature);\r\n}\r\n\r\nfunction nodeToFeature(node) {\r\n  const feature = new Feature({\r\n    geometry: new Point(node.coordinate),\r\n    node: node,\r\n  });\r\n  feature.setId(node.id);\r\n  nodes.addFeature(feature);\r\n}\r\n\r\nfunction edgeToFeature(edge) {\r\n  const feature = new Feature({\r\n    geometry: new LineString(edge.coordinates),\r\n    edge: edge,\r\n  });\r\n  feature.setId(edge.id);\r\n  edges.addFeature(feature);\r\n}\r\n\r\nfunction faceToFeature(face) {\r\n  const coordinates = topo.getFaceGeometry(face);\r\n  const feature = new Feature({\r\n    geometry: new Polygon(coordinates),\r\n    face: face,\r\n  });\r\n  feature.setId(face.id);\r\n  faces.addFeature(feature);\r\n}\r\n\r\nfunction createNode(topo, coord) {\r\n  let node;\r\n  const existingEdge = topo.getEdgeByPoint(coord, 5)[0];\r\n  if (existingEdge) {\r\n    node = topo.modEdgeSplit(existingEdge, coord);\r\n  } else {\r\n    node = topo.addIsoNode(coord);\r\n  }\r\n  return node;\r\n}\r\n\r\nfunction onDrawend(e) {\r\n  const edgeGeom = e.feature.getGeometry().getCoordinates();\r\n  const startCoord = edgeGeom[0];\r\n  const endCoord = edgeGeom[edgeGeom.length - 1];\r\n  let start, end;\r\n  try {\r\n    start = topo.getNodeByPoint(startCoord);\r\n    end = topo.getNodeByPoint(endCoord);\r\n    const edgesAtStart = topo.getEdgeByPoint(startCoord, 5);\r\n    const edgesAtEnd = topo.getEdgeByPoint(endCoord, 5);\r\n    const crossing = topo.getEdgesByLine(edgeGeom);\r\n    if (\r\n      crossing.length === 1 &&\r\n      !start &&\r\n      !end &&\r\n      edgesAtStart.length === 0 &&\r\n      edgesAtEnd.length === 0\r\n    ) {\r\n      topo.remEdgeNewFace(crossing[0]);\r\n      start = crossing[0].start;\r\n      if (start.face) {\r\n        topo.removeIsoNode(start);\r\n      }\r\n      end = crossing[0].end;\r\n      if (end.face) {\r\n        topo.removeIsoNode(end);\r\n      }\r\n      return;\r\n    }\r\n    if (!start) {\r\n      start = createNode(topo, startCoord);\r\n      edgeGeom[0] = start.coordinate;\r\n    }\r\n    if (!end) {\r\n      end = createNode(topo, endCoord);\r\n      edgeGeom[edgeGeom.length - 1] = end.coordinate;\r\n    }\r\n    topo.addEdgeNewFaces(start, end, edgeGeom);\r\n  } catch (e) {\r\n    toastr.warning(e.toString());\r\n  }\r\n}\r\n\r\nconst draw = new Draw({\r\n  type: 'LineString',\r\n});\r\ndraw.on('drawend', onDrawend);\r\nmap.addInteraction(draw);\r\nconst snap = new Snap({\r\n  source: edges,\r\n});\r\nmap.addInteraction(snap);\r\nmap.addControl(new MousePosition());\r\n"],"sourceRoot":""}