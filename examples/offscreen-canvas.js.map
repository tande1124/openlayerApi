{"version":3,"sources":["webpack:///../node_modules/json-stringify-safe/stringify.js","webpack:///./offscreen-canvas.js","webpack:///./offscreen-canvas.worker.js"],"names":["serializer","replacer","cycleReplacer","stack","keys","key","value","slice","indexOf","join","length","thisPos","this","splice","push","Infinity","call","module","exports","obj","spaces","JSON","stringify","getSerialize","container","transformContainer","rendering","workerFrameState","mainThreadFrameState","worker","Worker","updateContainerTransform","const","viewState","renderedViewState","center","resolution","rotation","renderedCenter","renderedResolution","renderedRotation","transform","style","map","Map","layers","Layer","render","frameState","document","createElement","position","width","height","appendChild","left","transformOrigin","animate","postMessage","action","parse","source","Source","attributions","target","view","View","resolutions","tileSize","getResolutions89","zoom","addControl","FullScreen","addEventListener","message","data","image","Image","crossOrigin","createImageBitmap","then","imageBitmap","src","event","requestAnimationFrame","imageData","getContext","drawImage"],"mappings":"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","file":"offscreen-canvas.js","sourcesContent":["exports = module.exports = stringify\nexports.getSerialize = serializer\n\nfunction stringify(obj, replacer, spaces, cycleReplacer) {\n  return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces)\n}\n\nfunction serializer(replacer, cycleReplacer) {\n  var stack = [], keys = []\n\n  if (cycleReplacer == null) cycleReplacer = function(key, value) {\n    if (stack[0] === value) return \"[Circular ~]\"\n    return \"[Circular ~.\" + keys.slice(0, stack.indexOf(value)).join(\".\") + \"]\"\n  }\n\n  return function(key, value) {\n    if (stack.length > 0) {\n      var thisPos = stack.indexOf(this)\n      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this)\n      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key)\n      if (~stack.indexOf(value)) value = cycleReplacer.call(this, key, value)\n    }\n    else stack.push(value)\n\n    return replacer == null ? value : replacer.call(this, key, value)\n  }\n}\n","import Layer from '../src/ol/layer/Layer.js';\r\nimport Map from '../src/ol/Map.js';\r\nimport Source from '../src/ol/source/Source.js';\r\nimport View from '../src/ol/View.js';\r\nimport Worker from 'worker-loader!./offscreen-canvas.worker.js'; //eslint-disable-line\r\nimport stringify from 'json-stringify-safe';\r\nimport {FullScreen} from '../src/ol/control.js';\r\nimport {compose, create} from '../src/ol/transform.js';\r\nimport {createTransformString} from '../src/ol/render/canvas.js';\r\nimport {createXYZ} from '../src/ol/tilegrid.js';\r\n\r\nconst worker = new Worker();\r\n\r\nlet container,\r\n  transformContainer,\r\n  canvas,\r\n  rendering,\r\n  workerFrameState,\r\n  mainThreadFrameState;\r\n\r\n// Transform the container to account for the differnece between the (newer)\r\n// main thread frameState and the (older) worker frameState\r\nfunction updateContainerTransform() {\r\n  if (workerFrameState) {\r\n    const viewState = mainThreadFrameState.viewState;\r\n    const renderedViewState = workerFrameState.viewState;\r\n    const center = viewState.center;\r\n    const resolution = viewState.resolution;\r\n    const rotation = viewState.rotation;\r\n    const renderedCenter = renderedViewState.center;\r\n    const renderedResolution = renderedViewState.resolution;\r\n    const renderedRotation = renderedViewState.rotation;\r\n    const transform = create();\r\n    // Skip the extra transform for rotated views, because it will not work\r\n    // correctly in that case\r\n    if (!rotation) {\r\n      compose(\r\n        transform,\r\n        (renderedCenter[0] - center[0]) / resolution,\r\n        (center[1] - renderedCenter[1]) / resolution,\r\n        renderedResolution / resolution,\r\n        renderedResolution / resolution,\r\n        rotation - renderedRotation,\r\n        0,\r\n        0\r\n      );\r\n    }\r\n    transformContainer.style.transform = createTransformString(transform);\r\n  }\r\n}\r\n\r\nconst map = new Map({\r\n  layers: [\r\n    new Layer({\r\n      render: function (frameState) {\r\n        if (!container) {\r\n          container = document.createElement('div');\r\n          container.style.position = 'absolute';\r\n          container.style.width = '100%';\r\n          container.style.height = '100%';\r\n          transformContainer = document.createElement('div');\r\n          transformContainer.style.position = 'absolute';\r\n          transformContainer.style.width = '100%';\r\n          transformContainer.style.height = '100%';\r\n          container.appendChild(transformContainer);\r\n          canvas = document.createElement('canvas');\r\n          canvas.style.position = 'absolute';\r\n          canvas.style.left = '0';\r\n          canvas.style.transformOrigin = 'top left';\r\n          transformContainer.appendChild(canvas);\r\n        }\r\n        mainThreadFrameState = frameState;\r\n        updateContainerTransform();\r\n        if (!rendering) {\r\n          rendering = true;\r\n          worker.postMessage({\r\n            action: 'render',\r\n            frameState: JSON.parse(stringify(frameState)),\r\n          });\r\n        } else {\r\n          frameState.animate = true;\r\n        }\r\n        return container;\r\n      },\r\n      source: new Source({\r\n        attributions: [\r\n          '<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">© MapTiler</a>',\r\n          '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">© OpenStreetMap contributors</a>',\r\n        ],\r\n      }),\r\n    }),\r\n  ],\r\n  target: 'map',\r\n  view: new View({\r\n    resolutions: createXYZ({tileSize: 512}).getResolutions89,\r\n    center: [0, 0],\r\n    zoom: 2,\r\n  }),\r\n});\r\nmap.addControl(new FullScreen());\r\n\r\n// Worker messaging and actions\r\nworker.addEventListener('message', (message) => {\r\n  if (message.data.action === 'loadImage') {\r\n    // Image loader for ol-mapbox-style\r\n    const image = new Image();\r\n    image.crossOrigin = 'anonymous';\r\n    image.addEventListener('load', function () {\r\n      createImageBitmap(image, 0, 0, image.width, image.height).then(\r\n        (imageBitmap) => {\r\n          worker.postMessage(\r\n            {\r\n              action: 'imageLoaded',\r\n              image: imageBitmap,\r\n              src: message.data.src,\r\n            },\r\n            [imageBitmap]\r\n          );\r\n        }\r\n      );\r\n    });\r\n    image.src = event.data.src;\r\n  } else if (message.data.action === 'requestRender') {\r\n    // Worker requested a new render frame\r\n    map.render();\r\n  } else if (canvas && message.data.action === 'rendered') {\r\n    // Worker provies a new render frame\r\n    requestAnimationFrame(function () {\r\n      const imageData = message.data.imageData;\r\n      canvas.width = imageData.width;\r\n      canvas.height = imageData.height;\r\n      canvas.getContext('2d').drawImage(imageData, 0, 0);\r\n      canvas.style.transform = message.data.transform;\r\n      workerFrameState = message.data.frameState;\r\n      updateContainerTransform();\r\n    });\r\n    rendering = false;\r\n  }\r\n});\r\n","export default function() {\n  return new Worker(__webpack_public_path__ + \"offscreen-canvas.worker.worker.js\");\n}\n"],"sourceRoot":""}