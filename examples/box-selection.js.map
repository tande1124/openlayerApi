{"version":3,"sources":["webpack:///./box-selection.js"],"names":["vectorSource","url","format","map","layers","source","target","view","center","zoom","constrainRotation","select","addInteraction","const","selectedFeatures","getFeatures","dragBox","condition","on","rotation","getView","getRotation","oblique","Math","PI","candidateFeatures","extent","getGeometry","getExtent","forEachFeatureIntersectingExtent","feature","push","anchor","geometry","clone","rotate","forEach","intersectsExtent","clear","infoBox","document","getElementById","names","getArray","get","length","innerHTML","join"],"mappings":"0FAAA,wFAQMA,EAAe,IAAI,IAAa,CACpCC,IAAK,iCACLC,OAAQ,IAAI,MAGRC,EAAM,IAAI,IAAI,CAClBC,OAAQ,CACN,IAAI,IAAU,CACZC,OAAQ,IAAI,MAEd,IAAI,IAAY,CACdA,OAAQL,KAGZM,OAAQ,MACRC,KAAM,IAAI,IAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,EACNC,kBAAmB,OAKjBC,EAAS,IAAI,IACnBR,EAAIS,eAAeD,GAEnBE,IAAMC,EAAmBH,EAAOI,cAG1BC,EAAU,IAAI,IAAQ,CAC1BC,UAAW,MAGbd,EAAIS,eAAeI,GAEnBA,EAAQE,GAAG,UAAU,WAOnBL,IAAMM,EAAWhB,EAAIiB,UAAUC,cACzBC,EAAUH,GAAYI,KAAKC,GAAK,IAAO,EACvCC,EAAoBH,EAAU,GAAKR,EACnCY,EAASV,EAAQW,cAAcC,YAUrC,GATA5B,EAAa6B,iCAAiCH,GAAQ,SAAUI,GAC9DL,EAAkBM,KAAKD,MAQrBR,EAAS,CACXT,IAAMmB,EAAS,CAAC,EAAG,GACbC,EAAWjB,EAAQW,cAAcO,QACvCD,EAASE,QAAQhB,EAAUa,GAC3BnB,IAAMa,EAASO,EAASL,YACxBH,EAAkBW,SAAQ,SAAUN,GAClCjB,IAAMoB,EAAWH,EAAQH,cAAcO,QACvCD,EAASE,QAAQhB,EAAUa,GACvBC,EAASI,iBAAiBX,IAC5BZ,EAAiBiB,KAAKD,UAO9Bd,EAAQE,GAAG,YAAY,WACrBJ,EAAiBwB,WAGnBzB,IAAM0B,EAAUC,SAASC,eAAe,QAExC3B,EAAiBI,GAAG,CAAC,MAAO,WAAW,WACrCL,IAAM6B,EAAQ5B,EAAiB6B,WAAWxC,KAAI,SAAU2B,GACtD,OAAOA,EAAQc,IAAI,WAEjBF,EAAMG,OAAS,EACjBN,EAAQO,UAAYJ,EAAMK,KAAK,MAE/BR,EAAQO,UAAY,6B","file":"box-selection.js","sourcesContent":["import GeoJSON from '../src/ol/format/GeoJSON.js';\r\nimport Map from '../src/ol/Map.js';\r\nimport View from '../src/ol/View.js';\r\nimport {DragBox, Select} from '../src/ol/interaction.js';\r\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\r\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\r\nimport {platformModifierKeyOnly} from '../src/ol/events/condition.js';\r\n\r\nconst vectorSource = new VectorSource({\r\n  url: 'data/geojson/countries.geojson',\r\n  format: new GeoJSON(),\r\n});\r\n\r\nconst map = new Map({\r\n  layers: [\r\n    new TileLayer({\r\n      source: new OSM(),\r\n    }),\r\n    new VectorLayer({\r\n      source: vectorSource,\r\n    }),\r\n  ],\r\n  target: 'map',\r\n  view: new View({\r\n    center: [0, 0],\r\n    zoom: 2,\r\n    constrainRotation: 16,\r\n  }),\r\n});\r\n\r\n// a normal select interaction to handle click\r\nconst select = new Select();\r\nmap.addInteraction(select);\r\n\r\nconst selectedFeatures = select.getFeatures();\r\n\r\n// a DragBox interaction used to select features by drawing boxes\r\nconst dragBox = new DragBox({\r\n  condition: platformModifierKeyOnly,\r\n});\r\n\r\nmap.addInteraction(dragBox);\r\n\r\ndragBox.on('boxend', function () {\r\n  // features that intersect the box geometry are added to the\r\n  // collection of selected features\r\n\r\n  // if the view is not obliquely rotated the box geometry and\r\n  // its extent are equalivalent so intersecting features can\r\n  // be added directly to the collection\r\n  const rotation = map.getView().getRotation();\r\n  const oblique = rotation % (Math.PI / 2) !== 0;\r\n  const candidateFeatures = oblique ? [] : selectedFeatures;\r\n  const extent = dragBox.getGeometry().getExtent();\r\n  vectorSource.forEachFeatureIntersectingExtent(extent, function (feature) {\r\n    candidateFeatures.push(feature);\r\n  });\r\n\r\n  // when the view is obliquely rotated the box extent will\r\n  // exceed its geometry so both the box and the candidate\r\n  // feature geometries are rotated around a common anchor\r\n  // to confirm that, with the box geometry aligned with its\r\n  // extent, the geometries intersect\r\n  if (oblique) {\r\n    const anchor = [0, 0];\r\n    const geometry = dragBox.getGeometry().clone();\r\n    geometry.rotate(-rotation, anchor);\r\n    const extent = geometry.getExtent();\r\n    candidateFeatures.forEach(function (feature) {\r\n      const geometry = feature.getGeometry().clone();\r\n      geometry.rotate(-rotation, anchor);\r\n      if (geometry.intersectsExtent(extent)) {\r\n        selectedFeatures.push(feature);\r\n      }\r\n    });\r\n  }\r\n});\r\n\r\n// clear selection when drawing a new box and when clicking on the map\r\ndragBox.on('boxstart', function () {\r\n  selectedFeatures.clear();\r\n});\r\n\r\nconst infoBox = document.getElementById('info');\r\n\r\nselectedFeatures.on(['add', 'remove'], function () {\r\n  const names = selectedFeatures.getArray().map(function (feature) {\r\n    return feature.get('name');\r\n  });\r\n  if (names.length > 0) {\r\n    infoBox.innerHTML = names.join(', ');\r\n  } else {\r\n    infoBox.innerHTML = 'No countries selected';\r\n  }\r\n});\r\n"],"sourceRoot":""}