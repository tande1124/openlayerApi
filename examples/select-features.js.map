{"version":3,"sources":["webpack:///./select-features.js"],"names":["raster","source","vector","url","format","map","layers","target","view","center","zoom","select","selectSingleClick","selectClick","condition","selectPointerMove","selectAltClick","mapBrowserEvent","selectElement","document","getElementById","changeInteraction","removeInteraction","const","value","addInteraction","on","e","innerHTML","getFeatures","getLength","selected","length","deselected","onchange"],"mappings":"4FAAA,+EASMA,EAAS,IAAI,IAAU,CAC3BC,OAAQ,IAAI,MAGRC,EAAS,IAAI,IAAY,CAC7BD,OAAQ,IAAI,IAAa,CACvBE,IAAK,iCACLC,OAAQ,IAAI,QAIVC,EAAM,IAAI,IAAI,CAClBC,OAAQ,CAACN,EAAQE,GACjBK,OAAQ,MACRC,KAAM,IAAI,IAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAINC,EAAS,KAGPC,EAAoB,IAAI,IAGxBC,EAAc,IAAI,IAAO,CAC7BC,UAAW,MAIPC,EAAoB,IAAI,IAAO,CACnCD,UAAW,MAGPE,EAAiB,IAAI,IAAO,CAChCF,UAAW,SAAUG,GACnB,OAAO,YAAMA,IAAoB,YAAWA,MAI1CC,EAAgBC,SAASC,eAAe,QAExCC,EAAoB,WACT,OAAXV,GACFN,EAAIiB,kBAAkBX,GAExBY,IAAMC,EAAQN,EAAcM,MAYb,QAVbb,EADW,eAATa,EACOZ,EACS,SAATY,EACAX,EACS,eAATW,EACAT,EACS,YAATS,EACAR,EAEA,QAGTX,EAAIoB,eAAed,GACnBA,EAAOe,GAAG,UAAU,SAAUC,GAC5BR,SAASC,eAAe,UAAUQ,UAChC,SACAD,EAAEpB,OAAOsB,cAAcC,YACvB,+CACAH,EAAEI,SAASC,OACX,mBACAL,EAAEM,WAAWD,OACb,kBAQRd,EAAcgB,SAAWb,EACzBA,M","file":"select-features.js","sourcesContent":["import GeoJSON from '../src/ol/format/GeoJSON.js';\r\nimport Map from '../src/ol/Map.js';\r\nimport OSM from '../src/ol/source/OSM.js';\r\nimport Select from '../src/ol/interaction/Select.js';\r\nimport VectorSource from '../src/ol/source/Vector.js';\r\nimport View from '../src/ol/View.js';\r\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\r\nimport {altKeyOnly, click, pointerMove} from '../src/ol/events/condition.js';\r\n\r\nconst raster = new TileLayer({\r\n  source: new OSM(),\r\n});\r\n\r\nconst vector = new VectorLayer({\r\n  source: new VectorSource({\r\n    url: 'data/geojson/countries.geojson',\r\n    format: new GeoJSON(),\r\n  }),\r\n});\r\n\r\nconst map = new Map({\r\n  layers: [raster, vector],\r\n  target: 'map',\r\n  view: new View({\r\n    center: [0, 0],\r\n    zoom: 2,\r\n  }),\r\n});\r\n\r\nlet select = null; // ref to currently selected interaction\r\n\r\n// select interaction working on \"singleclick\"\r\nconst selectSingleClick = new Select();\r\n\r\n// select interaction working on \"click\"\r\nconst selectClick = new Select({\r\n  condition: click,\r\n});\r\n\r\n// select interaction working on \"pointermove\"\r\nconst selectPointerMove = new Select({\r\n  condition: pointerMove,\r\n});\r\n\r\nconst selectAltClick = new Select({\r\n  condition: function (mapBrowserEvent) {\r\n    return click(mapBrowserEvent) && altKeyOnly(mapBrowserEvent);\r\n  },\r\n});\r\n\r\nconst selectElement = document.getElementById('type');\r\n\r\nconst changeInteraction = function () {\r\n  if (select !== null) {\r\n    map.removeInteraction(select);\r\n  }\r\n  const value = selectElement.value;\r\n  if (value == 'singleclick') {\r\n    select = selectSingleClick;\r\n  } else if (value == 'click') {\r\n    select = selectClick;\r\n  } else if (value == 'pointermove') {\r\n    select = selectPointerMove;\r\n  } else if (value == 'altclick') {\r\n    select = selectAltClick;\r\n  } else {\r\n    select = null;\r\n  }\r\n  if (select !== null) {\r\n    map.addInteraction(select);\r\n    select.on('select', function (e) {\r\n      document.getElementById('status').innerHTML =\r\n        '&nbsp;' +\r\n        e.target.getFeatures().getLength() +\r\n        ' selected features (last operation selected ' +\r\n        e.selected.length +\r\n        ' and deselected ' +\r\n        e.deselected.length +\r\n        ' features)';\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * onchange callback on the select element.\r\n */\r\nselectElement.onchange = changeInteraction;\r\nchangeInteraction();\r\n"],"sourceRoot":""}