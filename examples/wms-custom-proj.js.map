{"version":3,"sources":["webpack:///./wms-custom-proj.js"],"names":["projection","code","extent","units","coordinate","WGStoCHy","WGStoCHx","CHtoWGSlng","CHtoWGSlat","const","layers","source","url","crossOrigin","attributions","params","serverType","controls","extend","target","view","center","zoom","lat","lng","DECtoSEX","lat_aux","DEGtoSEC","lng_aux","Math","pow","y","x","y_aux","x_aux","angle","deg","parseInt","min","sec","parts","String","split","length","Number"],"mappings":"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","file":"wms-custom-proj.js","sourcesContent":["import Map from '../src/ol/Map.js';\r\nimport Projection from '../src/ol/proj/Projection.js';\r\nimport TileLayer from '../src/ol/layer/Tile.js';\r\nimport TileWMS from '../src/ol/source/TileWMS.js';\r\nimport View from '../src/ol/View.js';\r\nimport {ScaleLine, defaults as defaultControls} from '../src/ol/control.js';\r\nimport {\r\n  addCoordinateTransforms,\r\n  addProjection,\r\n  transform,\r\n} from '../src/ol/proj.js';\r\n\r\n// By default OpenLayers does not know about the EPSG:21781 (Swiss) projection.\r\n// So we create a projection instance for EPSG:21781 and pass it to\r\n// ol/proj~addProjection to make it available to the library for lookup by its\r\n// code.\r\n\r\nconst projection = new Projection({\r\n  code: 'EPSG:21781',\r\n  // The extent is used to determine zoom level 0. Recommended values for a\r\n  // projection's validity extent can be found at https://epsg.io/.\r\n  extent: [485869.5728, 76443.1884, 837076.5648, 299941.7864],\r\n  units: 'm',\r\n});\r\naddProjection(projection);\r\n\r\n// We also declare EPSG:21781/EPSG:4326 transform functions. These functions\r\n// are necessary for the ScaleLine control and when calling ol/proj~transform\r\n// for setting the view's initial center (see below).\r\n\r\naddCoordinateTransforms(\r\n  'EPSG:4326',\r\n  projection,\r\n  function (coordinate) {\r\n    return [\r\n      WGStoCHy(coordinate[1], coordinate[0]),\r\n      WGStoCHx(coordinate[1], coordinate[0]),\r\n    ];\r\n  },\r\n  function (coordinate) {\r\n    return [\r\n      CHtoWGSlng(coordinate[0], coordinate[1]),\r\n      CHtoWGSlat(coordinate[0], coordinate[1]),\r\n    ];\r\n  }\r\n);\r\n\r\nconst extent = [420000, 30000, 900000, 350000];\r\nconst layers = [\r\n  new TileLayer({\r\n    extent: extent,\r\n    source: new TileWMS({\r\n      url: 'https://wms.geo.admin.ch/',\r\n      crossOrigin: 'anonymous',\r\n      attributions:\r\n        '© <a href=\"https://shop.swisstopo.admin.ch/en/products/maps/national/lk1000\"' +\r\n        'target=\"_blank\">Pixelmap 1:1000000 / geo.admin.ch</a>',\r\n      params: {\r\n        'LAYERS': 'ch.swisstopo.pixelkarte-farbe-pk1000.noscale',\r\n        'FORMAT': 'image/jpeg',\r\n      },\r\n      serverType: 'mapserver',\r\n    }),\r\n  }),\r\n  new TileLayer({\r\n    extent: extent,\r\n    source: new TileWMS({\r\n      url: 'https://wms.geo.admin.ch/',\r\n      crossOrigin: 'anonymous',\r\n      attributions:\r\n        '© <a href=\"https://www.hydrodaten.admin.ch/en/notes-on-the-flood-alert-maps.html\"' +\r\n        'target=\"_blank\">Flood Alert / geo.admin.ch</a>',\r\n      params: {'LAYERS': 'ch.bafu.hydroweb-warnkarte_national'},\r\n      serverType: 'mapserver',\r\n    }),\r\n  }),\r\n];\r\n\r\nconst map = new Map({\r\n  controls: defaultControls().extend([\r\n    new ScaleLine({\r\n      units: 'metric',\r\n    }),\r\n  ]),\r\n  layers: layers,\r\n  target: 'map',\r\n  view: new View({\r\n    projection: projection,\r\n    center: transform([8.23, 46.86], 'EPSG:4326', 'EPSG:21781'),\r\n    extent: extent,\r\n    zoom: 2,\r\n  }),\r\n});\r\n\r\n/*\r\n * Swiss projection transform functions downloaded from\r\n * http://www.swisstopo.admin.ch/internet/swisstopo/en/home/products/software/products/skripts.html\r\n */\r\n\r\n// Convert WGS lat/long (° dec) to CH y\r\nfunction WGStoCHy(lat, lng) {\r\n  // Converts degrees dec to sex\r\n  lat = DECtoSEX(lat);\r\n  lng = DECtoSEX(lng);\r\n\r\n  // Converts degrees to seconds (sex)\r\n  lat = DEGtoSEC(lat);\r\n  lng = DEGtoSEC(lng);\r\n\r\n  // Axiliary values (% Bern)\r\n  const lat_aux = (lat - 169028.66) / 10000;\r\n  const lng_aux = (lng - 26782.5) / 10000;\r\n\r\n  // Process Y\r\n  const y =\r\n    600072.37 +\r\n    211455.93 * lng_aux -\r\n    10938.51 * lng_aux * lat_aux -\r\n    0.36 * lng_aux * Math.pow(lat_aux, 2) -\r\n    44.54 * Math.pow(lng_aux, 3);\r\n\r\n  return y;\r\n}\r\n\r\n// Convert WGS lat/long (° dec) to CH x\r\nfunction WGStoCHx(lat, lng) {\r\n  // Converts degrees dec to sex\r\n  lat = DECtoSEX(lat);\r\n  lng = DECtoSEX(lng);\r\n\r\n  // Converts degrees to seconds (sex)\r\n  lat = DEGtoSEC(lat);\r\n  lng = DEGtoSEC(lng);\r\n\r\n  // Axiliary values (% Bern)\r\n  const lat_aux = (lat - 169028.66) / 10000;\r\n  const lng_aux = (lng - 26782.5) / 10000;\r\n\r\n  // Process X\r\n  const x =\r\n    200147.07 +\r\n    308807.95 * lat_aux +\r\n    3745.25 * Math.pow(lng_aux, 2) +\r\n    76.63 * Math.pow(lat_aux, 2) -\r\n    194.56 * Math.pow(lng_aux, 2) * lat_aux +\r\n    119.79 * Math.pow(lat_aux, 3);\r\n\r\n  return x;\r\n}\r\n\r\n// Convert CH y/x to WGS lat\r\nfunction CHtoWGSlat(y, x) {\r\n  // Converts militar to civil and  to unit = 1000km\r\n  // Axiliary values (% Bern)\r\n  const y_aux = (y - 600000) / 1000000;\r\n  const x_aux = (x - 200000) / 1000000;\r\n\r\n  // Process lat\r\n  let lat =\r\n    16.9023892 +\r\n    3.238272 * x_aux -\r\n    0.270978 * Math.pow(y_aux, 2) -\r\n    0.002528 * Math.pow(x_aux, 2) -\r\n    0.0447 * Math.pow(y_aux, 2) * x_aux -\r\n    0.014 * Math.pow(x_aux, 3);\r\n\r\n  // Unit 10000\" to 1 \" and converts seconds to degrees (dec)\r\n  lat = (lat * 100) / 36;\r\n\r\n  return lat;\r\n}\r\n\r\n// Convert CH y/x to WGS long\r\nfunction CHtoWGSlng(y, x) {\r\n  // Converts militar to civil and  to unit = 1000km\r\n  // Axiliary values (% Bern)\r\n  const y_aux = (y - 600000) / 1000000;\r\n  const x_aux = (x - 200000) / 1000000;\r\n\r\n  // Process long\r\n  let lng =\r\n    2.6779094 +\r\n    4.728982 * y_aux +\r\n    0.791484 * y_aux * x_aux +\r\n    0.1306 * y_aux * Math.pow(x_aux, 2) -\r\n    0.0436 * Math.pow(y_aux, 3);\r\n\r\n  // Unit 10000\" to 1 \" and converts seconds to degrees (dec)\r\n  lng = (lng * 100) / 36;\r\n\r\n  return lng;\r\n}\r\n\r\n// Convert DEC angle to SEX DMS\r\nfunction DECtoSEX(angle) {\r\n  // Extract DMS\r\n  const deg = parseInt(angle, 10);\r\n  const min = parseInt((angle - deg) * 60, 10);\r\n  const sec = ((angle - deg) * 60 - min) * 60;\r\n\r\n  // Result in degrees sex (dd.mmss)\r\n  return deg + min / 100 + sec / 10000;\r\n}\r\n\r\n// Convert Degrees angle to seconds\r\nfunction DEGtoSEC(angle) {\r\n  // Extract DMS\r\n  const deg = parseInt(angle, 10);\r\n  let min = parseInt((angle - deg) * 100, 10);\r\n  let sec = ((angle - deg) * 100 - min) * 100;\r\n\r\n  // Avoid rounding problems with seconds=0\r\n  const parts = String(angle).split('.');\r\n  if (parts.length == 2 && parts[1].length == 2) {\r\n    min = Number(parts[1]);\r\n    sec = 0;\r\n  }\r\n\r\n  // Result in degrees sex (dd.mmss)\r\n  return sec + min * 60 + deg * 3600;\r\n}\r\n"],"sourceRoot":""}