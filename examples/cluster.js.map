{"version":3,"sources":["webpack:///./cluster.js"],"names":["distance","document","getElementById","features","Array","e","i","const","coordinates","Math","random","source","clusterSource","parseInt","value","styleCache","clusters","style","feature","size","get","length","image","radius","stroke","color","fill","text","toString","raster","layers","target","view","center","zoom","addEventListener","setDistance"],"mappings":"2FAAA,OAmBA,IAnBA,iHAcMA,EAAWC,SAASC,eAAe,YAGnCC,EAAW,IAAIC,MADP,KAERC,EAAI,KACDC,EAAI,EAAGA,EAHF,MAGeA,EAAG,CAC9BC,IAAMC,EAAc,CAAC,EAAIH,EAAII,KAAKC,SAAWL,EAAG,EAAIA,EAAII,KAAKC,SAAWL,GACxEF,EAASG,GAAK,IAAI,IAAQ,IAAI,IAAME,IAGtCD,IAAMI,EAAS,IAAI,IAAa,CAC9BR,SAAUA,IAGNS,EAAgB,IAAI,IAAQ,CAChCZ,SAAUa,SAASb,EAASc,MAAO,IACnCH,OAAQA,IAGJI,EAAa,GACbC,EAAW,IAAI,IAAY,CAC/BL,OAAQC,EACRK,MAAO,SAAUC,GACfX,IAAMY,EAAOD,EAAQE,IAAI,YAAYC,OACjCJ,EAAQF,EAAWI,GAqBvB,OApBKF,IACHA,EAAQ,IAAI,IAAM,CAChBK,MAAO,IAAI,IAAY,CACrBC,OAAQ,GACRC,OAAQ,IAAI,IAAO,CACjBC,MAAO,SAETC,KAAM,IAAI,IAAK,CACbD,MAAO,cAGXE,KAAM,IAAI,IAAK,CACbA,KAAMR,EAAKS,WACXF,KAAM,IAAI,IAAK,CACbD,MAAO,aAIbV,EAAWI,GAAQF,GAEdA,KAILY,EAAS,IAAI,IAAU,CAC3BlB,OAAQ,IAAI,MAGF,IAAI,IAAI,CAClBmB,OAAQ,CAACD,EAAQb,GACjBe,OAAQ,MACRC,KAAM,IAAI,IAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAIVlC,EAASmC,iBAAiB,SAAS,WACjCvB,EAAcwB,YAAYvB,SAASb,EAASc,MAAO,U","file":"cluster.js","sourcesContent":["import Feature from '../src/ol/Feature.js';\r\nimport Map from '../src/ol/Map.js';\r\nimport Point from '../src/ol/geom/Point.js';\r\nimport View from '../src/ol/View.js';\r\nimport {\r\n  Circle as CircleStyle,\r\n  Fill,\r\n  Stroke,\r\n  Style,\r\n  Text,\r\n} from '../src/ol/style.js';\r\nimport {Cluster, OSM, Vector as VectorSource} from '../src/ol/source.js';\r\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\r\n\r\nconst distance = document.getElementById('distance');\r\n\r\nconst count = 20000;\r\nconst features = new Array(count);\r\nconst e = 4500000;\r\nfor (let i = 0; i < count; ++i) {\r\n  const coordinates = [2 * e * Math.random() - e, 2 * e * Math.random() - e];\r\n  features[i] = new Feature(new Point(coordinates));\r\n}\r\n\r\nconst source = new VectorSource({\r\n  features: features,\r\n});\r\n\r\nconst clusterSource = new Cluster({\r\n  distance: parseInt(distance.value, 10),\r\n  source: source,\r\n});\r\n\r\nconst styleCache = {};\r\nconst clusters = new VectorLayer({\r\n  source: clusterSource,\r\n  style: function (feature) {\r\n    const size = feature.get('features').length;\r\n    let style = styleCache[size];\r\n    if (!style) {\r\n      style = new Style({\r\n        image: new CircleStyle({\r\n          radius: 10,\r\n          stroke: new Stroke({\r\n            color: '#fff',\r\n          }),\r\n          fill: new Fill({\r\n            color: '#3399CC',\r\n          }),\r\n        }),\r\n        text: new Text({\r\n          text: size.toString(),\r\n          fill: new Fill({\r\n            color: '#fff',\r\n          }),\r\n        }),\r\n      });\r\n      styleCache[size] = style;\r\n    }\r\n    return style;\r\n  },\r\n});\r\n\r\nconst raster = new TileLayer({\r\n  source: new OSM(),\r\n});\r\n\r\nconst map = new Map({\r\n  layers: [raster, clusters],\r\n  target: 'map',\r\n  view: new View({\r\n    center: [0, 0],\r\n    zoom: 2,\r\n  }),\r\n});\r\n\r\ndistance.addEventListener('input', function () {\r\n  clusterSource.setDistance(parseInt(distance.value, 10));\r\n});\r\n"],"sourceRoot":""}